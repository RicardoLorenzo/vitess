//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	partitions        Partitions
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	joinCondition     JoinCondition
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	updateExpr        *UpdateExpr
	colIdent          ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	optDestination    Destination
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const ID = 57395
const HEX = 57396
const STRING = 57397
const INTEGRAL = 57398
const FLOAT = 57399
const HEXNUM = 57400
const VALUE_ARG = 57401
const LIST_ARG = 57402
const COMMENT = 57403
const COMMENT_KEYWORD = 57404
const BIT_LITERAL = 57405
const KEYSPACE_DESTINATION = 57406
const NULL = 57407
const TRUE = 57408
const FALSE = 57409
const OR = 57410
const AND = 57411
const NOT = 57412
const BETWEEN = 57413
const CASE = 57414
const WHEN = 57415
const THEN = 57416
const ELSE = 57417
const END = 57418
const LE = 57419
const GE = 57420
const NE = 57421
const NULL_SAFE_EQUAL = 57422
const IS = 57423
const LIKE = 57424
const REGEXP = 57425
const IN = 57426
const SHIFT_LEFT = 57427
const SHIFT_RIGHT = 57428
const DIV = 57429
const MOD = 57430
const UNARY = 57431
const COLLATE = 57432
const BINARY = 57433
const UNDERSCORE_BINARY = 57434
const INTERVAL = 57435
const JSON_EXTRACT_OP = 57436
const JSON_UNQUOTE_EXTRACT_OP = 57437
const CREATE = 57438
const ALTER = 57439
const DROP = 57440
const RENAME = 57441
const ANALYZE = 57442
const TABLE = 57443
const INDEX = 57444
const VIEW = 57445
const TO = 57446
const IGNORE = 57447
const IF = 57448
const UNIQUE = 57449
const PRIMARY = 57450
const SHOW = 57451
const DESCRIBE = 57452
const EXPLAIN = 57453
const DATE = 57454
const ESCAPE = 57455
const REPAIR = 57456
const OPTIMIZE = 57457
const TRUNCATE = 57458
const MAXVALUE = 57459
const PARTITION = 57460
const REORGANIZE = 57461
const LESS = 57462
const THAN = 57463
const PROCEDURE = 57464
const TRIGGER = 57465
const VINDEX = 57466
const VINDEXES = 57467
const STATUS = 57468
const VARIABLES = 57469
const BEGIN = 57470
const START = 57471
const TRANSACTION = 57472
const COMMIT = 57473
const ROLLBACK = 57474
const BIT = 57475
const TINYINT = 57476
const SMALLINT = 57477
const MEDIUMINT = 57478
const INT = 57479
const INTEGER = 57480
const BIGINT = 57481
const INTNUM = 57482
const REAL = 57483
const DOUBLE = 57484
const FLOAT_TYPE = 57485
const DECIMAL = 57486
const NUMERIC = 57487
const TIME = 57488
const TIMESTAMP = 57489
const DATETIME = 57490
const YEAR = 57491
const CHAR = 57492
const VARCHAR = 57493
const BOOL = 57494
const CHARACTER = 57495
const VARBINARY = 57496
const NCHAR = 57497
const TEXT = 57498
const TINYTEXT = 57499
const MEDIUMTEXT = 57500
const LONGTEXT = 57501
const BLOB = 57502
const TINYBLOB = 57503
const MEDIUMBLOB = 57504
const LONGBLOB = 57505
const JSON = 57506
const ENUM = 57507
const NULLX = 57508
const AUTO_INCREMENT = 57509
const APPROXNUM = 57510
const SIGNED = 57511
const UNSIGNED = 57512
const ZEROFILL = 57513
const DATABASES = 57514
const TABLES = 57515
const VITESS_KEYSPACES = 57516
const VITESS_SHARDS = 57517
const VITESS_TABLETS = 57518
const VSCHEMA_TABLES = 57519
const NAMES = 57520
const CHARSET = 57521
const GLOBAL = 57522
const SESSION = 57523
const CURRENT_TIMESTAMP = 57524
const DATABASE = 57525
const CURRENT_DATE = 57526
const CURRENT_TIME = 57527
const LOCALTIME = 57528
const LOCALTIMESTAMP = 57529
const UTC_DATE = 57530
const UTC_TIME = 57531
const UTC_TIMESTAMP = 57532
const REPLACE = 57533
const CONVERT = 57534
const CAST = 57535
const GROUP_CONCAT = 57536
const SEPARATOR = 57537
const MATCH = 57538
const AGAINST = 57539
const BOOLEAN = 57540
const LANGUAGE = 57541
const WITH = 57542
const QUERY = 57543
const EXPANSION = 57544
const UNUSED = 57545

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"KEYSPACE_DESTINATION",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 210,
	110, 508,
	-2, 504,
	-1, 211,
	110, 509,
	-2, 505,
	-1, 278,
	81, 646,
	110, 646,
	-2, 52,
	-1, 279,
	81, 619,
	110, 619,
	-2, 53,
	-1, 280,
	81, 608,
	110, 608,
	-2, 47,
	-1, 282,
	81, 633,
	110, 633,
	-2, 49,
	-1, 645,
	110, 511,
	-2, 507,
	-1, 825,
	5, 28,
	-2, 332,
	-1, 845,
	5, 27,
	-2, 455,
	-1, 1009,
	5, 28,
	-2, 456,
	-1, 1044,
	5, 27,
	-2, 458,
	-1, 1089,
	5, 28,
	-2, 459,
}

const yyPrivate = 57344

const yyLast = 8655

var yyAct = [...]int{

	241, 47, 1080, 485, 939, 240, 961, 215, 274, 774,
	940, 719, 936, 771, 734, 528, 735, 484, 3, 862,
	530, 848, 883, 918, 680, 53, 670, 817, 677, 851,
	744, 692, 189, 647, 1015, 183, 287, 424, 767, 532,
	418, 517, 732, 277, 265, 700, 430, 438, 47, 213,
	758, 264, 198, 52, 1106, 1097, 194, 1104, 752, 1087,
	1102, 679, 269, 318, 1096, 188, 1086, 931, 1003, 291,
	1060, 283, 309, 879, 751, 1027, 1037, 263, 759, 184,
	185, 186, 187, 497, 202, 919, 316, 998, 1068, 451,
	450, 460, 461, 453, 454, 455, 456, 457, 458, 459,
	452, 996, 57, 462, 182, 410, 411, 921, 966, 967,
	968, 297, 1103, 1101, 1081, 903, 701, 298, 969, 720,
	722, 293, 150, 1058, 151, 151, 746, 59, 60, 61,
	62, 63, 900, 595, 311, 746, 313, 590, 902, 923,
	861, 927, 860, 922, 217, 920, 153, 154, 155, 859,
	925, 289, 294, 162, 288, 310, 312, 152, 1073, 924,
	474, 475, 1012, 873, 926, 928, 304, 315, 315, 315,
	315, 866, 315, 315, 787, 811, 619, 603, 548, 315,
	884, 455, 456, 457, 458, 459, 452, 442, 785, 462,
	759, 452, 721, 462, 462, 47, 460, 461, 453, 454,
	455, 456, 457, 458, 459, 452, 268, 616, 462, 302,
	471, 437, 427, 473, 1069, 791, 308, 745, 426, 1059,
	1057, 975, 743, 742, 784, 435, 745, 830, 416, 901,
	547, 899, 933, 1085, 693, 693, 835, 592, 877, 1076,
	483, 437, 487, 488, 489, 490, 491, 492, 493, 970,
	496, 498, 498, 498, 498, 498, 498, 498, 498, 506,
	507, 508, 509, 637, 639, 640, 748, 300, 638, 1031,
	529, 749, 976, 781, 786, 779, 436, 435, 23, 24,
	48, 26, 27, 283, 542, 211, 808, 809, 810, 654,
	50, 315, 432, 437, 789, 792, 315, 42, 428, 149,
	650, 1030, 28, 652, 653, 651, 892, 315, 315, 315,
	315, 315, 315, 315, 315, 1091, 73, 622, 623, 891,
	160, 37, 671, 160, 672, 50, 880, 436, 435, 783,
	239, 829, 974, 828, 935, 499, 500, 501, 502, 503,
	504, 505, 1040, 782, 437, 600, 1029, 160, 160, 890,
	436, 435, 963, 160, 1093, 417, 417, 472, 1048, 417,
	262, 71, 874, 544, 436, 435, 602, 437, 788, 673,
	453, 454, 455, 456, 457, 458, 459, 452, 588, 790,
	462, 437, 1048, 1049, 1062, 30, 31, 33, 32, 35,
	436, 435, 1024, 1023, 284, 956, 417, 1061, 36, 43,
	44, 1011, 417, 45, 46, 34, 306, 437, 299, 618,
	288, 315, 315, 971, 268, 981, 980, 38, 39, 541,
	40, 41, 21, 451, 450, 460, 461, 453, 454, 455,
	456, 457, 458, 459, 452, 682, 160, 462, 160, 978,
	977, 1007, 160, 823, 417, 617, 514, 417, 160, 23,
	908, 648, 73, 73, 73, 73, 204, 73, 73, 624,
	23, 818, 436, 435, 73, 54, 230, 229, 232, 233,
	234, 235, 849, 843, 47, 231, 844, 236, 193, 437,
	49, 626, 682, 417, 23, 643, 937, 641, 487, 541,
	73, 550, 549, 823, 514, 849, 50, 317, 317, 317,
	317, 539, 317, 317, 823, 684, 645, 50, 50, 317,
	208, 1043, 979, 867, 514, 269, 269, 269, 269, 269,
	823, 283, 703, 620, 674, 675, 753, 195, 513, 644,
	529, 50, 723, 772, 950, 440, 697, 541, 269, 870,
	690, 768, 540, 775, 538, 852, 853, 684, 160, 283,
	685, 686, 514, 726, 689, 160, 160, 160, 763, 65,
	705, 706, 73, 708, 965, 937, 704, 716, 696, 707,
	698, 699, 632, 724, 50, 893, 73, 855, 160, 729,
	160, 73, 725, 160, 598, 728, 160, 739, 160, 414,
	649, 858, 73, 73, 73, 73, 73, 73, 73, 73,
	315, 773, 857, 713, 711, 710, 284, 317, 714, 712,
	709, 1100, 645, 760, 761, 762, 754, 755, 756, 757,
	1095, 317, 797, 769, 770, 715, 317, 523, 524, 199,
	200, 764, 765, 766, 905, 731, 736, 317, 317, 317,
	317, 317, 317, 317, 317, 812, 796, 421, 425, 1099,
	806, 805, 431, 885, 546, 307, 625, 648, 800, 268,
	268, 268, 268, 268, 443, 801, 429, 602, 876, 519,
	522, 523, 524, 520, 268, 521, 525, 1078, 1077, 852,
	853, 1041, 268, 645, 871, 813, 1005, 419, 519, 522,
	523, 524, 520, 807, 521, 525, 73, 73, 486, 420,
	160, 846, 847, 1033, 777, 495, 644, 597, 527, 196,
	197, 431, 804, 681, 683, 73, 190, 54, 845, 160,
	803, 1066, 191, 834, 1065, 73, 1035, 695, 849, 476,
	477, 478, 479, 480, 481, 482, 433, 856, 1070, 1028,
	822, 317, 317, 615, 56, 58, 537, 864, 865, 51,
	1, 868, 832, 780, 1079, 960, 741, 718, 733, 286,
	628, 64, 740, 889, 1056, 1026, 747, 878, 73, 750,
	440, 303, 964, 317, 872, 1075, 875, 315, 553, 554,
	552, 556, 73, 886, 887, 888, 555, 551, 170, 275,
	526, 543, 434, 66, 898, 315, 649, 160, 897, 778,
	160, 160, 160, 160, 160, 881, 882, 292, 470, 802,
	276, 944, 160, 676, 896, 160, 621, 423, 1064, 160,
	1034, 736, 833, 160, 160, 494, 691, 694, 216, 636,
	228, 225, 227, 226, 627, 73, 842, 444, 214, 206,
	267, 911, 912, 510, 284, 942, 518, 47, 917, 516,
	941, 283, 938, 515, 930, 272, 929, 854, 932, 850,
	952, 953, 954, 266, 943, 907, 1002, 946, 1067, 631,
	25, 55, 284, 201, 947, 19, 160, 18, 17, 317,
	317, 160, 958, 20, 160, 73, 959, 16, 15, 160,
	957, 14, 634, 635, 29, 13, 12, 11, 910, 10,
	9, 8, 820, 7, 972, 973, 821, 6, 5, 269,
	4, 192, 22, 825, 826, 827, 2, 0, 831, 0,
	0, 0, 0, 837, 987, 838, 839, 840, 841, 986,
	317, 0, 1001, 0, 984, 0, 0, 994, 0, 0,
	0, 0, 0, 0, 486, 0, 0, 687, 688, 0,
	317, 1006, 0, 910, 736, 646, 736, 0, 655, 656,
	657, 658, 659, 660, 661, 662, 663, 664, 665, 666,
	667, 668, 669, 0, 0, 868, 1020, 0, 991, 992,
	1014, 993, 0, 315, 995, 0, 997, 1017, 1018, 1019,
	1022, 451, 450, 460, 461, 453, 454, 455, 456, 457,
	458, 459, 452, 0, 730, 462, 0, 0, 942, 73,
	0, 1045, 0, 941, 0, 0, 0, 0, 1042, 0,
	73, 1025, 0, 0, 0, 0, 0, 0, 1044, 0,
	0, 1055, 1053, 1054, 1063, 0, 0, 0, 0, 0,
	0, 0, 0, 1036, 942, 736, 47, 0, 1071, 941,
	0, 916, 0, 268, 863, 422, 0, 0, 0, 0,
	0, 73, 73, 1072, 0, 317, 0, 0, 0, 0,
	1083, 0, 0, 0, 798, 799, 0, 425, 283, 1088,
	73, 0, 0, 0, 0, 0, 0, 0, 160, 0,
	158, 955, 0, 181, 0, 0, 1098, 73, 0, 0,
	0, 0, 0, 0, 1105, 0, 894, 317, 0, 0,
	0, 0, 0, 0, 0, 205, 0, 158, 158, 285,
	0, 0, 0, 158, 0, 317, 0, 0, 0, 0,
	0, 0, 73, 73, 0, 0, 0, 0, 0, 824,
	988, 0, 317, 0, 0, 0, 0, 990, 0, 0,
	836, 0, 73, 73, 0, 73, 73, 0, 999, 1000,
	0, 0, 0, 814, 815, 816, 0, 0, 0, 0,
	0, 1008, 1009, 1010, 284, 1013, 0, 945, 863, 160,
	0, 0, 0, 160, 0, 0, 0, 0, 0, 73,
	0, 0, 0, 0, 160, 0, 314, 317, 317, 0,
	317, 962, 0, 0, 0, 0, 158, 0, 158, 0,
	0, 0, 158, 0, 0, 0, 0, 0, 158, 0,
	0, 0, 0, 270, 0, 0, 0, 0, 0, 0,
	0, 1039, 0, 0, 985, 0, 73, 0, 73, 73,
	73, 160, 73, 0, 73, 0, 1050, 1051, 1052, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 157, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 73, 450,
	460, 461, 453, 454, 455, 456, 457, 458, 459, 452,
	0, 1016, 462, 1016, 1016, 1016, 273, 1021, 0, 317,
	0, 290, 934, 0, 0, 0, 1084, 73, 73, 0,
	0, 1089, 0, 0, 0, 0, 948, 0, 1092, 949,
	73, 0, 951, 317, 0, 0, 168, 0, 158, 0,
	0, 0, 0, 0, 0, 158, 534, 158, 0, 914,
	915, 285, 0, 0, 73, 0, 1109, 1110, 0, 0,
	178, 0, 1046, 1047, 0, 0, 0, 0, 158, 0,
	158, 0, 0, 158, 0, 962, 158, 0, 601, 73,
	0, 0, 0, 0, 407, 408, 409, 73, 412, 413,
	0, 0, 0, 0, 295, 415, 296, 0, 0, 1074,
	301, 0, 0, 0, 0, 0, 305, 0, 0, 559,
	0, 163, 1004, 0, 0, 0, 0, 165, 0, 486,
	0, 284, 171, 167, 1090, 0, 0, 0, 0, 0,
	0, 571, 1094, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 169, 989, 0, 173, 0, 0, 0,
	0, 0, 576, 577, 578, 579, 580, 581, 582, 0,
	583, 584, 585, 586, 587, 572, 573, 574, 575, 557,
	558, 0, 0, 560, 164, 561, 562, 563, 564, 565,
	566, 567, 568, 569, 570, 0, 0, 0, 0, 0,
	158, 0, 0, 166, 172, 174, 175, 176, 177, 0,
	0, 180, 179, 0, 0, 0, 512, 589, 0, 158,
	417, 0, 594, 0, 0, 536, 0, 0, 601, 0,
	0, 0, 0, 604, 605, 606, 607, 608, 609, 610,
	611, 0, 1038, 0, 0, 0, 591, 0, 593, 0,
	0, 596, 1082, 486, 599, 0, 0, 451, 450, 460,
	461, 453, 454, 455, 456, 457, 458, 459, 452, 205,
	0, 462, 0, 0, 205, 205, 0, 0, 205, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 205, 205, 205, 205, 0, 158, 0, 285,
	158, 158, 158, 158, 158, 0, 0, 0, 0, 0,
	0, 0, 717, 0, 0, 158, 0, 0, 0, 534,
	0, 0, 0, 158, 158, 0, 0, 285, 0, 0,
	0, 446, 0, 449, 601, 0, 0, 612, 613, 463,
	464, 465, 466, 467, 468, 469, 1107, 447, 448, 445,
	451, 450, 460, 461, 453, 454, 455, 456, 457, 458,
	459, 452, 0, 0, 462, 0, 0, 0, 614, 0,
	913, 0, 0, 0, 0, 0, 158, 0, 0, 0,
	0, 158, 0, 0, 158, 0, 0, 633, 0, 601,
	451, 450, 460, 461, 453, 454, 455, 456, 457, 458,
	459, 452, 819, 0, 462, 601, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 0, 0,
	0, 0, 451, 450, 460, 461, 453, 454, 455, 456,
	457, 458, 459, 452, 0, 0, 462, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 205, 702, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 205, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 727, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 795, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 776, 0, 0, 0, 0, 793,
	0, 0, 794, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 158, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 205, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 205,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 285,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 158,
	0, 0, 0, 158, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 158, 0, 0, 0, 0, 0,
	0, 0, 0, 895, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 904, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 534, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 906, 396, 386, 0,
	359, 398, 337, 351, 406, 352, 353, 380, 325, 367,
	110, 349, 0, 340, 320, 346, 321, 338, 361, 89,
	364, 336, 388, 370, 97, 404, 99, 375, 0, 121,
	106, 0, 0, 363, 390, 365, 385, 358, 381, 330,
	374, 399, 350, 378, 400, 0, 0, 0, 72, 0,
	737, 738, 0, 0, 0, 0, 0, 83, 0, 0,
	377, 395, 348, 379, 319, 376, 0, 323, 326, 405,
	393, 343, 344, 869, 0, 0, 0, 0, 0, 0,
	362, 366, 382, 356, 0, 0, 0, 982, 0, 0,
	0, 983, 341, 0, 373, 0, 285, 0, 327, 324,
	0, 360, 0, 0, 0, 329, 0, 342, 383, 0,
	391, 357, 161, 394, 355, 354, 397, 113, 389, 339,
	347, 85, 345, 118, 111, 0, 372, 112, 117, 100,
	127, 114, 134, 140, 141, 125, 139, 75, 124, 133,
	84, 119, 77, 131, 123, 104, 94, 95, 76, 1032,
	116, 88, 92, 87, 109, 128, 129, 86, 147, 80,
	138, 79, 81, 137, 108, 126, 132, 105, 102, 78,
	130, 103, 101, 96, 90, 0, 322, 0, 122, 135,
	148, 335, 392, 142, 143, 144, 145, 107, 82, 93,
	120, 333, 334, 331, 332, 368, 369, 401, 402, 403,
	384, 328, 0, 0, 387, 371, 74, 0, 98, 146,
	115, 91, 136, 396, 386, 0, 359, 398, 337, 351,
	406, 352, 353, 380, 325, 367, 110, 349, 0, 340,
	320, 346, 321, 338, 361, 89, 364, 336, 388, 370,
	97, 404, 99, 375, 0, 121, 106, 0, 0, 363,
	390, 365, 385, 358, 381, 330, 374, 399, 350, 378,
	400, 0, 0, 0, 72, 0, 737, 738, 0, 0,
	0, 0, 0, 83, 0, 0, 377, 395, 348, 379,
	319, 376, 0, 323, 326, 405, 393, 343, 344, 0,
	0, 0, 0, 0, 0, 0, 362, 366, 382, 356,
	0, 0, 0, 0, 0, 0, 0, 0, 341, 0,
	373, 0, 0, 0, 327, 324, 0, 360, 0, 0,
	0, 329, 0, 342, 383, 0, 391, 357, 161, 394,
	355, 354, 397, 113, 389, 339, 347, 85, 345, 118,
	111, 0, 372, 112, 117, 100, 127, 114, 134, 140,
	141, 125, 139, 75, 124, 133, 84, 119, 77, 131,
	123, 104, 94, 95, 76, 0, 116, 88, 92, 87,
	109, 128, 129, 86, 147, 80, 138, 79, 81, 137,
	108, 126, 132, 105, 102, 78, 130, 103, 101, 96,
	90, 0, 322, 0, 122, 135, 148, 335, 392, 142,
	143, 144, 145, 107, 82, 93, 120, 333, 334, 331,
	332, 368, 369, 401, 402, 403, 384, 328, 0, 0,
	387, 371, 74, 0, 98, 146, 115, 91, 136, 396,
	386, 0, 359, 398, 337, 351, 406, 352, 353, 380,
	325, 367, 110, 349, 0, 340, 320, 346, 321, 338,
	361, 89, 364, 336, 388, 370, 97, 404, 99, 375,
	0, 121, 106, 0, 0, 363, 390, 365, 385, 358,
	381, 330, 374, 399, 350, 378, 400, 50, 0, 0,
	72, 0, 0, 0, 0, 0, 0, 0, 0, 83,
	0, 0, 377, 395, 348, 379, 319, 376, 0, 323,
	326, 405, 393, 343, 344, 0, 0, 0, 0, 0,
	0, 0, 362, 366, 382, 356, 0, 0, 0, 0,
	0, 0, 0, 0, 341, 0, 373, 0, 0, 0,
	327, 324, 0, 360, 0, 0, 0, 329, 0, 342,
	383, 0, 391, 357, 161, 394, 355, 354, 397, 113,
	389, 339, 347, 85, 345, 118, 111, 0, 372, 112,
	117, 100, 127, 114, 134, 140, 141, 125, 139, 75,
	124, 133, 84, 119, 77, 131, 123, 104, 94, 95,
	76, 0, 116, 88, 92, 87, 109, 128, 129, 86,
	147, 80, 138, 79, 81, 137, 108, 126, 132, 105,
	102, 78, 130, 103, 101, 96, 90, 0, 322, 0,
	122, 135, 148, 335, 392, 142, 143, 144, 145, 107,
	82, 93, 120, 333, 334, 331, 332, 368, 369, 401,
	402, 403, 384, 328, 0, 0, 387, 371, 74, 0,
	98, 146, 115, 91, 136, 396, 386, 0, 359, 398,
	337, 351, 406, 352, 353, 380, 325, 367, 110, 349,
	0, 340, 320, 346, 321, 338, 361, 89, 364, 336,
	388, 370, 97, 404, 99, 375, 0, 121, 106, 0,
	0, 363, 390, 365, 385, 358, 381, 330, 374, 399,
	350, 378, 400, 0, 0, 0, 72, 0, 0, 0,
	0, 0, 0, 0, 0, 83, 0, 0, 377, 395,
	348, 379, 319, 376, 0, 323, 326, 405, 393, 343,
	344, 0, 0, 0, 0, 0, 0, 0, 362, 366,
	382, 356, 0, 0, 0, 0, 0, 0, 909, 0,
	341, 0, 373, 0, 0, 0, 327, 324, 0, 360,
	0, 0, 0, 329, 0, 342, 383, 0, 391, 357,
	161, 394, 355, 354, 397, 113, 389, 339, 347, 85,
	345, 118, 111, 0, 372, 112, 117, 100, 127, 114,
	134, 140, 141, 125, 139, 75, 124, 133, 84, 119,
	77, 131, 123, 104, 94, 95, 76, 0, 116, 88,
	92, 87, 109, 128, 129, 86, 147, 80, 138, 79,
	81, 137, 108, 126, 132, 105, 102, 78, 130, 103,
	101, 96, 90, 0, 322, 0, 122, 135, 148, 335,
	392, 142, 143, 144, 145, 107, 82, 93, 120, 333,
	334, 331, 332, 368, 369, 401, 402, 403, 384, 328,
	0, 0, 387, 371, 74, 0, 98, 146, 115, 91,
	136, 396, 386, 0, 359, 398, 337, 351, 406, 352,
	353, 380, 325, 367, 110, 349, 0, 340, 320, 346,
	321, 338, 361, 89, 364, 336, 388, 370, 97, 404,
	99, 375, 0, 121, 106, 0, 0, 363, 390, 365,
	385, 358, 381, 330, 374, 399, 350, 378, 400, 0,
	0, 0, 210, 0, 0, 0, 0, 0, 0, 0,
	0, 83, 0, 0, 377, 395, 348, 379, 319, 376,
	0, 323, 326, 405, 393, 343, 344, 0, 0, 0,
	0, 0, 0, 0, 362, 366, 382, 356, 0, 0,
	0, 0, 0, 0, 642, 0, 341, 0, 373, 0,
	0, 0, 327, 324, 0, 360, 0, 0, 0, 329,
	0, 342, 383, 0, 391, 357, 161, 394, 355, 354,
	397, 113, 389, 339, 347, 85, 345, 118, 111, 0,
	372, 112, 117, 100, 127, 114, 134, 140, 141, 125,
	139, 75, 124, 133, 84, 119, 77, 131, 123, 104,
	94, 95, 76, 0, 116, 88, 92, 87, 109, 128,
	129, 86, 147, 80, 138, 79, 81, 137, 108, 126,
	132, 105, 102, 78, 130, 103, 101, 96, 90, 0,
	322, 0, 122, 135, 148, 335, 392, 142, 143, 144,
	145, 107, 82, 93, 120, 333, 334, 331, 332, 368,
	369, 401, 402, 403, 384, 328, 0, 0, 387, 371,
	74, 0, 98, 146, 115, 91, 136, 396, 386, 0,
	359, 398, 337, 351, 406, 352, 353, 380, 325, 367,
	110, 349, 0, 340, 320, 346, 321, 338, 361, 89,
	364, 336, 388, 370, 97, 404, 99, 375, 0, 121,
	106, 0, 0, 363, 390, 365, 385, 358, 381, 330,
	374, 399, 350, 378, 400, 0, 0, 0, 72, 0,
	545, 0, 0, 0, 0, 0, 0, 83, 0, 0,
	377, 395, 348, 379, 319, 376, 0, 323, 326, 405,
	393, 343, 344, 0, 0, 0, 0, 0, 0, 0,
	362, 366, 382, 356, 0, 0, 0, 0, 0, 0,
	0, 0, 341, 0, 373, 0, 0, 0, 327, 324,
	0, 360, 0, 0, 0, 329, 0, 342, 383, 0,
	391, 357, 161, 394, 355, 354, 397, 113, 389, 339,
	347, 85, 345, 118, 111, 0, 372, 112, 117, 100,
	127, 114, 134, 140, 141, 125, 139, 75, 124, 133,
	84, 119, 77, 131, 123, 104, 94, 95, 76, 0,
	116, 88, 92, 87, 109, 128, 129, 86, 147, 80,
	138, 79, 81, 137, 108, 126, 132, 105, 102, 78,
	130, 103, 101, 96, 90, 0, 322, 0, 122, 135,
	148, 335, 392, 142, 143, 144, 145, 107, 82, 93,
	120, 333, 334, 331, 332, 368, 369, 401, 402, 403,
	384, 328, 0, 0, 387, 371, 74, 0, 98, 146,
	115, 91, 136, 396, 386, 0, 359, 398, 337, 351,
	406, 352, 353, 380, 325, 367, 110, 349, 0, 340,
	320, 346, 321, 338, 361, 89, 364, 336, 388, 370,
	97, 404, 99, 375, 0, 121, 106, 0, 0, 363,
	390, 365, 385, 358, 381, 330, 374, 399, 350, 378,
	400, 0, 0, 0, 72, 0, 0, 0, 0, 0,
	0, 0, 0, 83, 0, 0, 377, 395, 348, 379,
	319, 376, 0, 323, 326, 405, 393, 343, 344, 0,
	0, 0, 0, 0, 0, 0, 362, 366, 382, 356,
	0, 0, 0, 0, 0, 0, 0, 0, 341, 0,
	373, 0, 0, 0, 327, 324, 0, 360, 0, 0,
	0, 329, 0, 342, 383, 0, 391, 357, 161, 394,
	355, 354, 397, 113, 389, 339, 347, 85, 345, 118,
	111, 0, 372, 112, 117, 100, 127, 114, 134, 140,
	141, 125, 139, 75, 124, 133, 84, 119, 77, 131,
	123, 104, 94, 95, 76, 0, 116, 88, 92, 87,
	109, 128, 129, 86, 147, 80, 138, 79, 81, 137,
	108, 126, 132, 105, 102, 78, 130, 103, 101, 96,
	90, 0, 322, 0, 122, 135, 148, 335, 392, 142,
	143, 144, 145, 107, 82, 93, 120, 333, 334, 331,
	332, 368, 369, 401, 402, 403, 384, 328, 0, 0,
	387, 371, 74, 0, 98, 146, 115, 91, 136, 396,
	386, 0, 359, 398, 337, 351, 406, 352, 353, 380,
	325, 367, 110, 349, 0, 340, 320, 346, 321, 338,
	361, 89, 364, 336, 388, 370, 97, 404, 99, 375,
	0, 121, 106, 0, 0, 363, 390, 365, 385, 358,
	381, 330, 374, 399, 350, 378, 400, 0, 0, 0,
	210, 0, 0, 0, 0, 0, 0, 0, 0, 83,
	0, 0, 377, 395, 348, 379, 319, 376, 0, 323,
	326, 405, 393, 343, 344, 0, 0, 0, 0, 0,
	0, 0, 362, 366, 382, 356, 0, 0, 0, 0,
	0, 0, 0, 0, 341, 0, 373, 0, 0, 0,
	327, 324, 0, 360, 0, 0, 0, 329, 0, 342,
	383, 0, 391, 357, 161, 394, 355, 354, 397, 113,
	389, 339, 347, 85, 345, 118, 111, 0, 372, 112,
	117, 100, 127, 114, 134, 140, 141, 125, 139, 75,
	124, 133, 84, 119, 77, 131, 123, 104, 94, 95,
	76, 0, 116, 88, 92, 87, 109, 128, 129, 86,
	147, 80, 138, 79, 81, 137, 108, 126, 132, 105,
	102, 78, 130, 103, 101, 96, 90, 0, 322, 0,
	122, 135, 148, 335, 392, 142, 143, 144, 145, 107,
	82, 93, 120, 333, 334, 331, 332, 368, 369, 401,
	402, 403, 384, 328, 0, 0, 387, 371, 74, 0,
	98, 146, 115, 91, 136, 396, 386, 0, 359, 398,
	337, 351, 406, 352, 353, 380, 325, 367, 110, 349,
	0, 340, 320, 346, 321, 338, 361, 89, 364, 336,
	388, 370, 97, 404, 99, 375, 0, 121, 106, 0,
	0, 363, 390, 365, 385, 358, 381, 330, 374, 399,
	350, 378, 400, 0, 0, 0, 159, 0, 0, 0,
	0, 0, 0, 0, 0, 83, 0, 0, 377, 395,
	348, 379, 319, 376, 0, 323, 326, 405, 393, 343,
	344, 0, 0, 0, 0, 0, 0, 0, 362, 366,
	382, 356, 0, 0, 0, 0, 0, 0, 0, 0,
	341, 0, 373, 0, 0, 0, 327, 324, 0, 360,
	0, 0, 0, 329, 0, 342, 383, 0, 391, 357,
	161, 394, 355, 354, 397, 113, 389, 339, 347, 85,
	345, 118, 111, 0, 372, 112, 117, 100, 127, 114,
	134, 140, 141, 125, 139, 75, 124, 133, 84, 119,
	77, 131, 123, 104, 94, 95, 76, 0, 116, 88,
	92, 87, 109, 128, 129, 86, 147, 80, 138, 79,
	81, 137, 108, 126, 132, 105, 102, 78, 130, 103,
	101, 96, 90, 0, 322, 0, 122, 135, 148, 335,
	392, 142, 143, 144, 145, 107, 82, 93, 120, 333,
	334, 331, 332, 368, 369, 401, 402, 403, 384, 328,
	0, 0, 387, 371, 74, 0, 98, 146, 115, 91,
	136, 110, 0, 0, 678, 0, 212, 0, 0, 0,
	89, 0, 209, 0, 0, 97, 249, 99, 0, 0,
	121, 106, 0, 0, 0, 0, 242, 243, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 210,
	230, 229, 232, 233, 234, 235, 0, 0, 83, 231,
	0, 236, 237, 238, 0, 0, 207, 223, 0, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 220,
	221, 203, 0, 0, 0, 260, 0, 222, 0, 0,
	218, 219, 224, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 161, 0, 0, 258, 0, 113, 0,
	0, 0, 85, 0, 118, 111, 0, 0, 112, 117,
	100, 127, 114, 134, 140, 141, 125, 139, 75, 124,
	133, 84, 119, 77, 131, 123, 104, 94, 95, 76,
	0, 116, 88, 92, 87, 109, 128, 129, 86, 147,
	80, 138, 79, 81, 137, 108, 126, 132, 105, 102,
	78, 130, 103, 101, 96, 90, 0, 0, 0, 122,
	135, 148, 0, 0, 142, 143, 144, 145, 107, 82,
	93, 120, 250, 259, 256, 257, 254, 255, 253, 252,
	251, 261, 244, 245, 247, 0, 246, 74, 0, 98,
	146, 115, 91, 136, 110, 0, 0, 0, 0, 212,
	0, 0, 0, 89, 0, 209, 0, 0, 97, 249,
	99, 0, 0, 121, 106, 0, 0, 0, 0, 242,
	243, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 417, 210, 230, 229, 232, 233, 234, 235, 0,
	0, 83, 231, 0, 236, 237, 238, 0, 0, 207,
	223, 0, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 220, 221, 0, 0, 0, 0, 260, 0,
	222, 0, 0, 218, 219, 224, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 161, 0, 0, 258,
	0, 113, 0, 0, 0, 85, 0, 118, 111, 0,
	0, 112, 117, 100, 127, 114, 134, 140, 141, 125,
	139, 75, 124, 133, 84, 119, 77, 131, 123, 104,
	94, 95, 76, 0, 116, 88, 92, 87, 109, 128,
	129, 86, 147, 80, 138, 79, 81, 137, 108, 126,
	132, 105, 102, 78, 130, 103, 101, 96, 90, 0,
	0, 0, 122, 135, 148, 0, 0, 142, 143, 144,
	145, 107, 82, 93, 120, 250, 259, 256, 257, 254,
	255, 253, 252, 251, 261, 244, 245, 247, 0, 246,
	74, 0, 98, 146, 115, 91, 136, 110, 0, 0,
	0, 0, 212, 0, 0, 0, 89, 0, 209, 0,
	0, 97, 249, 99, 0, 0, 121, 106, 0, 0,
	0, 0, 242, 243, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 210, 230, 229, 232, 233,
	234, 235, 0, 0, 83, 231, 0, 236, 237, 238,
	0, 0, 207, 223, 0, 248, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 220, 221, 203, 0, 0,
	0, 260, 0, 222, 0, 0, 218, 219, 224, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 161,
	0, 0, 258, 0, 113, 0, 0, 0, 85, 0,
	118, 111, 0, 0, 112, 117, 100, 127, 114, 134,
	140, 141, 125, 139, 75, 124, 133, 84, 119, 77,
	131, 123, 104, 94, 95, 76, 0, 116, 88, 92,
	87, 109, 128, 129, 86, 147, 80, 138, 79, 81,
	137, 108, 126, 132, 105, 102, 78, 130, 103, 101,
	96, 90, 0, 0, 0, 122, 135, 148, 0, 0,
	142, 143, 144, 145, 107, 82, 93, 120, 250, 259,
	256, 257, 254, 255, 253, 252, 251, 261, 244, 245,
	247, 23, 246, 74, 0, 98, 146, 115, 91, 136,
	0, 0, 0, 110, 0, 0, 0, 0, 212, 0,
	0, 0, 89, 0, 209, 0, 0, 97, 249, 99,
	0, 0, 121, 106, 0, 0, 0, 0, 242, 243,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 210, 230, 229, 232, 233, 234, 235, 0, 0,
	83, 231, 0, 236, 237, 238, 0, 0, 207, 223,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 220, 221, 0, 0, 0, 0, 260, 0, 222,
	0, 0, 218, 219, 224, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 161, 0, 0, 258, 0,
	113, 0, 0, 0, 85, 0, 118, 111, 0, 0,
	112, 117, 100, 127, 114, 134, 140, 141, 125, 139,
	75, 124, 133, 84, 119, 77, 131, 123, 104, 94,
	95, 76, 0, 116, 88, 92, 87, 109, 128, 129,
	86, 147, 80, 138, 79, 81, 137, 108, 126, 132,
	105, 102, 78, 130, 103, 101, 96, 90, 0, 0,
	0, 122, 135, 148, 0, 0, 142, 143, 144, 145,
	107, 82, 93, 120, 250, 259, 256, 257, 254, 255,
	253, 252, 251, 261, 244, 245, 247, 0, 246, 74,
	0, 98, 146, 115, 91, 136, 110, 0, 0, 0,
	0, 212, 0, 0, 0, 89, 0, 209, 0, 0,
	97, 249, 99, 0, 0, 121, 106, 0, 0, 0,
	0, 242, 243, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 210, 230, 229, 232, 233, 234,
	235, 0, 0, 83, 231, 0, 236, 237, 238, 0,
	0, 207, 223, 0, 248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 220, 221, 0, 0, 0, 0,
	260, 0, 222, 0, 0, 218, 219, 224, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 161, 0,
	0, 258, 0, 113, 0, 0, 0, 85, 0, 118,
	111, 0, 0, 112, 117, 100, 127, 114, 134, 140,
	141, 125, 139, 75, 124, 133, 84, 119, 77, 131,
	123, 104, 94, 95, 76, 0, 116, 88, 92, 87,
	109, 128, 129, 86, 147, 80, 138, 79, 81, 137,
	108, 126, 132, 105, 102, 78, 130, 103, 101, 96,
	90, 0, 0, 0, 122, 135, 148, 0, 0, 142,
	143, 144, 145, 107, 82, 93, 120, 250, 259, 256,
	257, 254, 255, 253, 252, 251, 261, 244, 245, 247,
	110, 246, 74, 0, 98, 146, 115, 91, 136, 89,
	0, 0, 0, 0, 97, 249, 99, 0, 0, 121,
	106, 0, 0, 0, 0, 242, 243, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 210, 230,
	229, 232, 233, 234, 235, 0, 0, 83, 231, 0,
	236, 237, 238, 0, 0, 0, 223, 0, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 220, 221,
	0, 0, 0, 0, 260, 0, 222, 0, 0, 218,
	219, 224, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 161, 0, 0, 258, 0, 113, 0, 0,
	0, 85, 0, 118, 111, 0, 1108, 112, 117, 100,
	127, 114, 134, 140, 141, 125, 139, 75, 124, 133,
	84, 119, 77, 131, 123, 104, 94, 95, 76, 0,
	116, 88, 92, 87, 109, 128, 129, 86, 147, 80,
	138, 79, 81, 137, 108, 126, 132, 105, 102, 78,
	130, 103, 101, 96, 90, 0, 0, 0, 122, 135,
	148, 0, 0, 142, 143, 144, 145, 107, 82, 93,
	120, 250, 259, 256, 257, 254, 255, 253, 252, 251,
	261, 244, 245, 247, 110, 246, 74, 0, 98, 146,
	115, 91, 136, 89, 0, 0, 0, 0, 97, 249,
	99, 0, 0, 121, 106, 0, 0, 0, 0, 242,
	243, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 210, 230, 229, 232, 233, 234, 235, 0,
	0, 83, 231, 0, 236, 237, 238, 0, 0, 0,
	223, 0, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 220, 221, 0, 0, 0, 0, 260, 0,
	222, 0, 0, 218, 219, 224, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 161, 0, 0, 258,
	0, 113, 0, 0, 0, 85, 0, 118, 111, 0,
	0, 112, 117, 100, 127, 114, 134, 140, 141, 125,
	139, 75, 124, 133, 84, 119, 77, 131, 123, 104,
	94, 95, 76, 0, 116, 88, 92, 87, 109, 128,
	129, 86, 147, 80, 138, 79, 81, 137, 108, 126,
	132, 105, 102, 78, 130, 103, 101, 96, 90, 0,
	0, 0, 122, 135, 148, 0, 0, 142, 143, 144,
	145, 107, 82, 93, 120, 250, 259, 256, 257, 254,
	255, 253, 252, 251, 261, 244, 245, 247, 110, 246,
	74, 0, 98, 146, 115, 91, 136, 89, 0, 0,
	0, 0, 97, 0, 99, 0, 0, 121, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 72, 0, 0, 0,
	0, 0, 0, 0, 0, 83, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 451, 450, 460, 461, 453, 454, 455, 456,
	457, 458, 459, 452, 0, 0, 462, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	161, 0, 0, 0, 0, 113, 0, 0, 0, 85,
	0, 118, 111, 0, 0, 112, 117, 100, 127, 114,
	134, 140, 141, 125, 139, 75, 124, 133, 84, 119,
	77, 131, 123, 104, 94, 95, 76, 0, 116, 88,
	92, 87, 109, 128, 129, 86, 147, 80, 138, 79,
	81, 137, 108, 126, 132, 105, 102, 78, 130, 103,
	101, 96, 90, 0, 0, 0, 122, 135, 148, 0,
	0, 142, 143, 144, 145, 107, 82, 93, 120, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 98, 146, 115, 91,
	136, 110, 0, 0, 0, 439, 0, 0, 0, 0,
	89, 0, 0, 0, 0, 97, 0, 99, 0, 0,
	121, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 72,
	0, 441, 0, 0, 0, 0, 0, 0, 83, 0,
	0, 0, 0, 0, 436, 435, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 437, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 161, 0, 0, 0, 0, 113, 0,
	0, 0, 85, 0, 118, 111, 0, 0, 112, 117,
	100, 127, 114, 134, 140, 141, 125, 139, 75, 124,
	133, 84, 119, 77, 131, 123, 104, 94, 95, 76,
	0, 116, 88, 92, 87, 109, 128, 129, 86, 147,
	80, 138, 79, 81, 137, 108, 126, 132, 105, 102,
	78, 130, 103, 101, 96, 90, 0, 0, 0, 122,
	135, 148, 0, 110, 142, 143, 144, 145, 107, 82,
	93, 120, 89, 0, 0, 0, 0, 97, 0, 99,
	0, 0, 121, 106, 0, 0, 0, 74, 0, 98,
	146, 115, 91, 136, 0, 0, 0, 0, 0, 0,
	0, 72, 0, 0, 0, 0, 0, 0, 0, 0,
	83, 0, 0, 0, 0, 0, 68, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 69, 0, 67, 0, 0, 0, 70,
	113, 0, 0, 0, 85, 0, 118, 111, 0, 0,
	112, 117, 100, 127, 114, 134, 140, 141, 125, 139,
	75, 124, 133, 84, 119, 77, 131, 123, 104, 94,
	95, 76, 0, 116, 88, 92, 87, 109, 128, 129,
	86, 147, 80, 138, 79, 81, 137, 108, 126, 132,
	105, 102, 78, 130, 103, 101, 96, 90, 0, 0,
	0, 122, 135, 148, 0, 0, 142, 143, 144, 145,
	107, 82, 93, 120, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 74,
	0, 98, 146, 115, 91, 136, 110, 0, 0, 0,
	533, 0, 0, 0, 0, 89, 0, 0, 0, 0,
	97, 0, 99, 0, 0, 121, 106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 159, 0, 535, 0, 0, 0,
	0, 0, 0, 83, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 161, 0,
	0, 0, 0, 113, 0, 0, 0, 85, 0, 118,
	111, 0, 0, 112, 117, 100, 127, 114, 134, 140,
	141, 125, 139, 75, 124, 133, 84, 119, 77, 131,
	123, 104, 94, 95, 76, 0, 116, 88, 92, 87,
	109, 128, 129, 86, 147, 80, 138, 79, 81, 137,
	108, 126, 132, 105, 102, 78, 130, 103, 101, 96,
	90, 0, 0, 0, 122, 135, 148, 0, 0, 142,
	143, 144, 145, 107, 82, 93, 120, 0, 23, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	110, 0, 74, 0, 98, 146, 115, 91, 136, 89,
	0, 0, 0, 0, 97, 0, 99, 0, 0, 121,
	106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 72, 0,
	0, 0, 0, 0, 0, 0, 0, 83, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 161, 0, 0, 0, 0, 113, 0, 0,
	0, 85, 0, 118, 111, 0, 0, 112, 117, 100,
	127, 114, 134, 140, 141, 125, 139, 75, 124, 133,
	84, 119, 77, 131, 123, 104, 94, 95, 76, 0,
	116, 88, 92, 87, 109, 128, 129, 86, 147, 80,
	138, 79, 81, 137, 108, 126, 132, 105, 102, 78,
	130, 103, 101, 96, 90, 0, 0, 0, 122, 135,
	148, 0, 0, 142, 143, 144, 145, 107, 82, 93,
	120, 0, 23, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 110, 0, 74, 0, 98, 146,
	115, 91, 136, 89, 0, 0, 0, 0, 97, 0,
	99, 0, 0, 121, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 159, 0, 0, 0, 0, 0, 0, 0,
	0, 83, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 161, 0, 0, 0,
	0, 113, 0, 0, 0, 85, 0, 118, 111, 0,
	0, 112, 117, 100, 127, 114, 134, 140, 141, 125,
	139, 75, 124, 133, 84, 119, 77, 131, 123, 104,
	94, 95, 76, 0, 116, 88, 92, 87, 109, 128,
	129, 86, 147, 80, 138, 79, 81, 137, 108, 126,
	132, 105, 102, 78, 130, 103, 101, 96, 90, 0,
	0, 0, 122, 135, 148, 0, 110, 142, 143, 144,
	145, 107, 82, 93, 120, 89, 0, 0, 0, 0,
	97, 0, 99, 0, 0, 121, 106, 0, 0, 0,
	74, 0, 98, 146, 115, 91, 136, 0, 0, 0,
	0, 0, 0, 0, 72, 0, 0, 629, 0, 0,
	630, 0, 0, 83, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 161, 0,
	0, 0, 0, 113, 0, 0, 0, 85, 0, 118,
	111, 0, 0, 112, 117, 100, 127, 114, 134, 140,
	141, 125, 139, 75, 124, 133, 84, 119, 77, 131,
	123, 104, 94, 95, 76, 0, 116, 88, 92, 87,
	109, 128, 129, 86, 147, 80, 138, 79, 81, 137,
	108, 126, 132, 105, 102, 78, 130, 103, 101, 96,
	90, 0, 0, 0, 122, 135, 148, 0, 0, 142,
	143, 144, 145, 107, 82, 93, 120, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 74, 0, 98, 146, 115, 91, 136, 110,
	0, 0, 0, 533, 0, 0, 0, 0, 89, 0,
	0, 0, 0, 97, 0, 99, 0, 0, 121, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 159, 0, 535,
	0, 0, 0, 0, 0, 0, 83, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 161, 0, 0, 0, 0, 113, 0, 0, 0,
	85, 0, 118, 111, 0, 0, 531, 117, 100, 127,
	114, 134, 140, 141, 125, 139, 75, 124, 133, 84,
	119, 77, 131, 123, 104, 94, 95, 76, 0, 116,
	88, 92, 87, 109, 128, 129, 86, 147, 80, 138,
	79, 81, 137, 108, 126, 132, 105, 102, 78, 130,
	103, 101, 96, 90, 0, 0, 0, 122, 135, 148,
	0, 110, 142, 143, 144, 145, 107, 82, 93, 120,
	89, 0, 0, 0, 0, 97, 0, 99, 0, 0,
	121, 106, 0, 0, 0, 74, 0, 98, 146, 115,
	91, 136, 0, 0, 0, 0, 50, 0, 0, 159,
	0, 0, 0, 0, 0, 0, 0, 0, 83, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 161, 0, 0, 0, 0, 113, 0,
	0, 0, 85, 0, 118, 111, 0, 0, 112, 117,
	100, 127, 114, 134, 140, 141, 125, 139, 75, 124,
	133, 84, 119, 77, 131, 123, 104, 94, 95, 76,
	0, 116, 88, 92, 87, 109, 128, 129, 86, 147,
	80, 138, 79, 81, 137, 108, 126, 132, 105, 102,
	78, 130, 103, 101, 96, 90, 0, 0, 0, 122,
	135, 148, 0, 110, 142, 143, 144, 145, 107, 82,
	93, 120, 89, 0, 0, 0, 0, 97, 0, 99,
	0, 0, 121, 106, 0, 0, 0, 74, 0, 98,
	146, 115, 91, 136, 0, 0, 0, 0, 0, 0,
	0, 159, 0, 535, 0, 0, 0, 0, 0, 0,
	83, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 161, 0, 0, 0, 0,
	113, 0, 0, 0, 85, 0, 118, 111, 0, 0,
	112, 117, 100, 127, 114, 134, 140, 141, 125, 139,
	75, 124, 133, 84, 119, 77, 131, 123, 104, 94,
	95, 76, 0, 116, 88, 92, 87, 109, 128, 129,
	86, 147, 80, 138, 79, 81, 137, 108, 126, 132,
	105, 102, 78, 130, 103, 101, 96, 90, 0, 0,
	0, 122, 135, 148, 0, 110, 142, 143, 144, 145,
	107, 82, 93, 120, 89, 0, 0, 0, 0, 97,
	0, 99, 0, 0, 121, 106, 0, 0, 0, 74,
	0, 98, 146, 115, 91, 136, 0, 0, 0, 0,
	0, 0, 0, 72, 0, 441, 0, 0, 0, 0,
	0, 0, 83, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 161, 0, 0,
	0, 0, 113, 0, 0, 0, 85, 0, 118, 111,
	0, 0, 112, 117, 100, 127, 114, 134, 140, 141,
	125, 139, 75, 124, 133, 84, 119, 77, 131, 123,
	104, 94, 95, 76, 0, 116, 88, 92, 87, 109,
	128, 129, 86, 147, 80, 138, 79, 81, 137, 108,
	126, 132, 105, 102, 78, 130, 103, 101, 96, 90,
	0, 0, 0, 122, 135, 148, 0, 0, 142, 143,
	144, 145, 107, 82, 93, 120, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	110, 74, 0, 98, 146, 115, 91, 136, 511, 89,
	0, 0, 0, 0, 97, 0, 99, 0, 0, 121,
	106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 159, 0,
	0, 0, 0, 0, 0, 0, 0, 83, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 161, 0, 0, 0, 0, 113, 0, 0,
	0, 85, 0, 118, 111, 0, 0, 112, 117, 100,
	127, 114, 134, 140, 141, 125, 139, 75, 124, 133,
	84, 119, 77, 131, 123, 104, 94, 95, 76, 0,
	116, 88, 92, 87, 109, 128, 129, 86, 147, 80,
	138, 79, 81, 137, 108, 126, 132, 105, 102, 78,
	130, 103, 101, 96, 90, 271, 0, 0, 122, 135,
	148, 0, 110, 142, 143, 144, 145, 107, 82, 93,
	120, 89, 0, 0, 0, 0, 97, 0, 99, 0,
	0, 121, 106, 0, 0, 0, 74, 0, 98, 146,
	115, 91, 136, 0, 0, 0, 0, 0, 0, 0,
	159, 0, 0, 0, 0, 0, 0, 0, 0, 83,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 161, 0, 0, 0, 0, 113,
	0, 0, 0, 85, 0, 118, 111, 0, 0, 112,
	117, 100, 127, 114, 134, 140, 141, 125, 139, 75,
	124, 133, 84, 119, 77, 131, 123, 104, 94, 95,
	76, 0, 116, 88, 92, 87, 109, 128, 129, 86,
	147, 80, 138, 79, 81, 137, 108, 126, 132, 105,
	102, 78, 130, 103, 101, 96, 90, 0, 0, 0,
	122, 135, 148, 0, 110, 142, 143, 144, 145, 107,
	82, 93, 120, 89, 0, 0, 0, 0, 97, 0,
	99, 0, 0, 121, 106, 0, 0, 0, 74, 0,
	98, 146, 115, 91, 136, 0, 0, 0, 0, 0,
	0, 0, 159, 0, 0, 0, 0, 0, 0, 0,
	0, 83, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 156, 0, 161, 0, 0, 0,
	0, 113, 0, 0, 0, 85, 0, 118, 111, 0,
	0, 112, 117, 100, 127, 114, 134, 140, 141, 125,
	139, 75, 124, 133, 84, 119, 77, 131, 123, 104,
	94, 95, 76, 0, 116, 88, 92, 87, 109, 128,
	129, 86, 147, 80, 138, 79, 81, 137, 108, 126,
	132, 105, 102, 78, 130, 103, 101, 96, 90, 0,
	0, 0, 122, 135, 148, 0, 110, 142, 143, 144,
	145, 107, 82, 93, 120, 89, 0, 0, 0, 0,
	97, 0, 99, 0, 0, 121, 106, 0, 0, 0,
	74, 0, 98, 146, 115, 91, 136, 0, 0, 0,
	0, 0, 0, 0, 72, 0, 0, 0, 0, 0,
	0, 0, 0, 83, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 161, 0,
	0, 0, 0, 113, 0, 0, 0, 85, 0, 118,
	111, 0, 0, 112, 117, 100, 127, 114, 134, 140,
	141, 125, 139, 75, 124, 133, 84, 119, 77, 131,
	123, 104, 94, 95, 76, 0, 116, 88, 92, 87,
	109, 128, 129, 86, 147, 80, 138, 79, 81, 137,
	108, 126, 132, 105, 102, 78, 130, 103, 101, 96,
	90, 0, 0, 0, 122, 135, 148, 0, 110, 142,
	143, 144, 145, 107, 82, 93, 120, 89, 0, 0,
	0, 0, 97, 0, 99, 0, 0, 121, 106, 0,
	0, 0, 74, 0, 98, 146, 115, 91, 136, 0,
	0, 0, 0, 0, 0, 0, 210, 0, 0, 0,
	0, 0, 0, 0, 0, 83, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	161, 0, 0, 0, 0, 113, 0, 0, 0, 85,
	0, 118, 111, 0, 0, 112, 117, 100, 127, 114,
	134, 140, 141, 125, 139, 75, 124, 133, 84, 119,
	77, 131, 123, 104, 94, 95, 76, 0, 116, 88,
	92, 87, 109, 128, 129, 86, 147, 80, 138, 79,
	81, 137, 108, 126, 132, 105, 102, 78, 130, 103,
	101, 96, 90, 0, 0, 0, 122, 135, 148, 0,
	110, 142, 143, 144, 145, 107, 82, 93, 120, 89,
	0, 0, 0, 0, 97, 0, 99, 0, 0, 121,
	106, 0, 0, 0, 74, 0, 98, 146, 115, 91,
	136, 0, 0, 0, 0, 0, 0, 0, 159, 0,
	0, 0, 0, 0, 0, 0, 0, 83, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 161, 0, 0, 0, 0, 113, 0, 0,
	0, 85, 0, 118, 111, 0, 0, 112, 117, 100,
	127, 114, 134, 140, 141, 125, 139, 75, 124, 133,
	84, 119, 77, 131, 123, 104, 94, 95, 76, 0,
	116, 88, 92, 87, 109, 128, 129, 86, 147, 80,
	138, 79, 81, 137, 108, 126, 132, 105, 102, 78,
	130, 103, 101, 96, 90, 0, 0, 0, 122, 135,
	148, 0, 110, 142, 143, 144, 145, 107, 82, 93,
	120, 89, 0, 0, 0, 0, 97, 0, 99, 0,
	0, 121, 106, 0, 0, 0, 74, 0, 98, 146,
	115, 91, 136, 0, 0, 0, 0, 0, 0, 0,
	210, 0, 0, 0, 0, 0, 0, 0, 0, 83,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 161, 0, 0, 0, 0, 113,
	0, 0, 0, 85, 0, 118, 111, 0, 0, 112,
	117, 100, 127, 114, 134, 140, 141, 125, 139, 75,
	124, 133, 84, 119, 77, 131, 123, 104, 94, 95,
	76, 0, 116, 88, 92, 87, 109, 128, 129, 86,
	147, 80, 138, 79, 281, 137, 108, 126, 132, 105,
	102, 78, 130, 103, 101, 96, 90, 0, 0, 0,
	122, 135, 148, 0, 0, 142, 143, 144, 145, 282,
	280, 279, 278, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 74, 0,
	98, 146, 115, 91, 136,
}
var yyPact = [...]int{

	272, -1000, -168, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 702, 739, -1000, -1000, -1000, -1000, -1000, -1000, 506,
	5725, 2, 39, 28, 7746, 35, 1284, 8262, -1000, -43,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 454, -1000, -1000,
	-1000, -1000, -1000, 699, 706, 521, 689, 590, -1000, 4359,
	3, 6863, 7574, 8434, -1000, 354, 32, 8262, -139, -2,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 34,
	8262, -1000, 8262, -6, 352, -6, 8262, -1000, 99, -1000,
	-1000, -1000, 8262, 350, 625, 16, 2454, 2454, 2454, 2454,
	-38, 2454, 2454, 538, -1000, -1000, -1000, -1000, 2454, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 301, 668,
	4768, 4768, 702, -1000, 454, -1000, -1000, -1000, 631, -1000,
	-1000, 228, 725, -1000, 5553, 77, -1000, 4768, 1528, 455,
	-1000, -1000, 455, -1000, -1000, 49, -1000, -1000, 5156, 5156,
	5156, 5156, 5156, 5156, 5156, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 455,
	-1000, 4565, 455, 455, 455, 455, 455, 455, 4768, 455,
	455, 455, 455, 455, 455, 455, 455, 455, 455, 455,
	455, 455, 7402, 498, 647, -1000, -1000, -1000, 686, 6316,
	6691, 8262, 490, -1000, 365, 8090, 3102, -1000, -1000, -1000,
	-1000, 624, -1000, 149, -1000, 68, 437, -1000, 1282, 322,
	2454, 17, 8262, 164, 8262, 2454, 12, 8262, 684, 533,
	8262, -1000, 3750, 67, -1000, -1000, 2454, 2454, 2454, 2454,
	2454, 2454, 2454, 2454, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2454, 2454, -1000, -1000, 8262, -1000, -1000, -1000, -1000, 734,
	116, 391, 66, 469, -1000, 293, 699, 301, 590, 6488,
	530, -1000, -1000, 8262, -1000, 4768, 4768, 195, -1000, 7207,
	-1000, -1000, 2886, 123, 5156, 237, 214, 5156, 5156, 5156,
	5156, 5156, 5156, 5156, 5156, 5156, 5156, 5156, 5156, 5156,
	5156, 5156, 266, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 313, -1000, 454, 409, 409, 87, 87, 87, 87,
	87, 87, 5350, 3953, 301, 428, 319, 4565, 4359, 4359,
	4768, 4768, 4359, 690, 158, 319, 7918, -1000, 301, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 4359, 4359, 4359, 4359,
	-19, 8262, -1000, 8090, 6863, 6863, 6863, 6863, 6863, -1000,
	569, 564, -1000, 563, 562, 584, 8262, -1000, 392, 6316,
	70, 455, -1000, 7035, -1000, -1000, -19, 6863, 8262, -1000,
	-1000, 8090, 365, -1000, -1000, -1000, -1000, 4768, 3534, 2238,
	98, 198, -113, -1000, -1000, 473, -1000, 473, 473, 473,
	473, -92, -92, -92, -92, -1000, -1000, -1000, -1000, -1000,
	505, -1000, 473, 473, 473, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 488, 488, 488, 480, 480, 491, -1000,
	8262, -1000, 681, 159, -1000, 8262, -1000, -1000, 8262, 2454,
	-1000, -1000, -1000, 3750, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 585, 4768, 4768, 3534,
	4768, -1000, -1000, -1000, 668, -1000, 690, 701, -1000, 618,
	617, 4359, -1000, -1000, 123, 153, -1000, -1000, 218, -1000,
	-1000, -1000, -1000, 65, 455, -1000, 899, -1000, -1000, -1000,
	-1000, 237, 5156, 5156, 5156, 331, 899, 1600, 102, 1176,
	87, 83, 83, 88, 88, 88, 88, 88, 274, 274,
	-1000, -1000, -1000, 301, -1000, -1000, -1000, 301, 4359, 466,
	-1000, -1000, 4768, -1000, 301, 389, 389, 279, 205, 389,
	4359, 157, -1000, 4768, 301, -1000, 389, 301, 389, 389,
	443, 455, -1000, 483, 647, 494, 526, 628, -1000, -1000,
	-1000, -1000, 561, -1000, 550, -1000, -1000, -1000, -1000, -1000,
	30, 23, 21, 7918, -1000, 716, 460, -1000, -1000, -1000,
	319, -1000, 61, 459, 2022, -1000, -1000, -1000, -1000, -1000,
	-1000, 486, 656, 107, 306, -1000, -1000, 639, -1000, 170,
	-115, -1000, -1000, 267, -92, -92, -1000, -1000, 74, 623,
	74, 74, 74, 291, -1000, -1000, -1000, -1000, 260, -1000,
	-1000, -1000, 247, -1000, 524, 7918, 2454, -1000, -1000, 110,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -20, -1000, 2454, -1000, -1000, 596, 319, 319,
	-1000, -1000, 8262, -1000, -1000, -1000, -1000, 439, -1000, -1000,
	-1000, 2670, 4359, -1000, 331, 899, 1568, -1000, 5156, 5156,
	-1000, -1000, 389, 4359, 319, -1000, -1000, -1000, -22, 266,
	-22, -147, 450, 152, -1000, 4768, 256, -1000, -1000, -1000,
	-1000, -1000, 514, 8090, 455, -1000, 6122, 7918, 702, 4768,
	-1000, -1000, 4768, 481, -1000, 4768, -1000, -1000, -1000, 455,
	455, 455, 341, -1000, 702, -1000, 3318, 2238, -1000, 2238,
	7918, -1000, 296, -1000, -1000, 513, 50, -1000, -1000, -1000,
	358, 74, 74, -1000, 276, 165, -1000, -1000, -1000, 385,
	-1000, 458, 361, 8262, -1000, -1000, -1000, 8262, -1000, -1000,
	-1000, -1000, -1000, 7918, -1000, -1000, -1000, 716, 6863, -1000,
	-1000, 301, -1000, 5156, 899, 899, -1000, -1000, 301, 473,
	473, -1000, 473, 480, -1000, 473, -54, 473, -68, 301,
	301, 455, -144, -1000, 319, 4768, -1000, 659, 435, 387,
	-1000, -1000, 4156, 301, 347, 52, 341, 699, 319, 319,
	7918, 319, 7918, 7918, 7918, 5928, 7918, 699, 2022, -1000,
	338, -1000, 473, -1000, -109, 730, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 288, 242,
	-1000, 210, 2454, -1000, -1000, 677, 713, 440, -1000, 899,
	-1000, -1000, 20, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 5156, 301, 284, 319, 653, -1000, 455, -1000, -1000,
	478, 7918, 7918, -1000, -1000, 328, -1000, 304, 304, 304,
	70, -1000, -1000, 491, 7918, -1000, 95, -1000, -129, -1000,
	342, 329, -1000, 455, 710, 705, -1000, -1000, -3, -1000,
	-1000, 729, -1000, 455, -1000, 454, 48, -1000, 7918, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 174, 650, -1000, 649,
	-1000, -1000, -1000, -21, -1000, 4768, 4768, 301, 18, -159,
	8090, 387, 301, 7918, -1000, -1000, 257, -1000, -1000, 300,
	-1000, 7918, 319, 381, -1000, 582, -152, -164, 365, -1000,
	-1000, -1000, -1000, -21, 616, -1000, 573, -1000, -1000, -24,
	-157, -26, -161, 455, -165, 4962, -1000, 1435, 301, -1000,
	-1000,
}
var yyPgo = [...]int{

	0, 916, 17, 422, 912, 911, 910, 908, 907, 903,
	901, 900, 899, 897, 896, 895, 894, 891, 888, 887,
	883, 878, 877, 875, 102, 873, 871, 870, 46, 869,
	52, 868, 866, 27, 61, 28, 24, 456, 865, 15,
	51, 44, 863, 29, 859, 857, 855, 853, 41, 849,
	846, 1223, 843, 840, 11, 21, 839, 838, 837, 836,
	49, 510, 834, 833, 832, 831, 830, 829, 33, 3,
	4, 5, 10, 828, 144, 7, 826, 31, 825, 822,
	820, 818, 25, 817, 37, 816, 32, 40, 811, 34,
	45, 19, 12, 8, 810, 43, 809, 299, 808, 111,
	807, 799, 798, 794, 793, 63, 285, 330, 86, 47,
	792, 791, 9, 1055, 42, 39, 20, 790, 35, 1196,
	26, 789, 788, 23, 787, 786, 781, 780, 779, 778,
	58, 776, 775, 772, 771, 50, 22, 769, 767, 38,
	13, 766, 765, 764, 763, 36, 762, 30, 761, 759,
	758, 14, 16, 756, 6, 755, 754, 2, 753, 750,
	749, 0, 228, 746, 745, 83,
}
var yyR1 = [...]int{

	0, 159, 160, 160, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 163, 163,
	46, 46, 90, 90, 10, 10, 10, 94, 94, 94,
	111, 111, 121, 121, 11, 11, 11, 11, 16, 148,
	149, 149, 149, 145, 124, 124, 124, 127, 127, 125,
	125, 125, 125, 125, 125, 125, 126, 126, 126, 126,
	126, 128, 128, 128, 128, 128, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	144, 144, 130, 130, 139, 139, 140, 140, 140, 137,
	137, 138, 138, 141, 141, 141, 131, 131, 131, 131,
	131, 131, 133, 133, 142, 142, 135, 135, 135, 136,
	136, 143, 143, 143, 143, 143, 132, 132, 146, 153,
	153, 153, 153, 147, 147, 155, 155, 154, 150, 150,
	150, 151, 151, 151, 152, 152, 152, 12, 12, 12,
	12, 12, 158, 156, 156, 157, 157, 13, 14, 14,
	14, 15, 15, 17, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 122, 122, 122,
	19, 19, 21, 21, 22, 23, 20, 20, 20, 20,
	20, 164, 24, 25, 25, 26, 26, 26, 30, 30,
	30, 28, 28, 29, 29, 35, 35, 34, 34, 36,
	36, 36, 36, 110, 110, 110, 109, 109, 38, 38,
	39, 39, 40, 40, 41, 41, 41, 53, 53, 89,
	89, 91, 91, 42, 42, 42, 42, 43, 43, 44,
	44, 45, 45, 117, 117, 116, 116, 116, 115, 115,
	47, 47, 47, 49, 48, 48, 48, 48, 50, 50,
	52, 52, 51, 51, 51, 134, 134, 54, 54, 54,
	54, 55, 55, 37, 37, 37, 37, 37, 37, 37,
	98, 98, 57, 57, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 67, 67, 67, 67, 67, 67,
	58, 58, 58, 58, 58, 58, 58, 33, 33, 68,
	68, 68, 74, 69, 69, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 65, 65, 65, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 64, 64,
	64, 64, 64, 64, 64, 64, 165, 165, 66, 66,
	66, 66, 31, 31, 31, 31, 31, 120, 120, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 78, 78, 32, 32, 76, 76, 77, 79,
	79, 75, 75, 75, 60, 60, 60, 60, 60, 60,
	60, 60, 62, 62, 62, 80, 80, 81, 81, 82,
	82, 83, 83, 84, 85, 85, 85, 86, 86, 86,
	86, 87, 87, 87, 59, 59, 59, 59, 59, 59,
	88, 88, 88, 88, 92, 92, 70, 70, 72, 72,
	71, 73, 93, 93, 95, 96, 96, 99, 99, 100,
	100, 97, 97, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 102, 102, 102, 103, 103, 104,
	104, 104, 112, 112, 107, 107, 108, 108, 113, 113,
	114, 114, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 161, 162, 118, 119,
	119, 119,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 6, 1, 1,
	1, 3, 0, 4, 3, 4, 5, 1, 2, 1,
	1, 1, 1, 1, 2, 8, 4, 6, 4, 4,
	1, 3, 3, 8, 3, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 2, 2, 2, 1, 4, 4, 2, 2,
	3, 3, 3, 3, 1, 1, 1, 1, 1, 4,
	1, 3, 0, 3, 0, 5, 0, 3, 5, 0,
	1, 0, 1, 0, 1, 2, 0, 2, 2, 2,
	2, 2, 0, 3, 0, 1, 0, 3, 3, 0,
	2, 0, 2, 1, 2, 1, 0, 2, 5, 2,
	3, 2, 2, 1, 1, 1, 3, 2, 0, 1,
	3, 1, 2, 3, 1, 1, 1, 6, 7, 7,
	4, 5, 7, 1, 3, 8, 8, 5, 4, 6,
	5, 3, 2, 3, 4, 4, 4, 4, 4, 4,
	4, 4, 3, 3, 3, 3, 4, 3, 3, 4,
	2, 4, 2, 2, 2, 2, 3, 0, 1, 1,
	2, 1, 1, 2, 1, 1, 2, 2, 2, 2,
	2, 0, 2, 0, 2, 1, 2, 2, 0, 1,
	1, 0, 1, 0, 1, 0, 1, 1, 3, 1,
	2, 3, 5, 0, 1, 2, 1, 1, 0, 2,
	1, 3, 1, 1, 1, 3, 3, 3, 7, 1,
	3, 1, 3, 4, 4, 4, 3, 2, 4, 0,
	1, 0, 2, 0, 1, 0, 1, 2, 1, 1,
	1, 2, 2, 1, 2, 3, 2, 3, 2, 2,
	2, 1, 1, 3, 4, 0, 1, 0, 5, 5,
	5, 0, 2, 1, 3, 3, 2, 3, 1, 2,
	0, 3, 1, 1, 3, 3, 4, 4, 5, 3,
	4, 5, 6, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 1, 3, 1, 3, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 2, 2, 2,
	2, 3, 1, 1, 1, 1, 4, 5, 6, 4,
	4, 6, 6, 6, 9, 7, 5, 4, 2, 2,
	2, 2, 2, 2, 2, 2, 0, 2, 4, 4,
	4, 4, 0, 3, 4, 7, 3, 1, 1, 2,
	3, 3, 1, 2, 2, 1, 2, 1, 2, 2,
	1, 2, 0, 1, 0, 2, 1, 2, 4, 0,
	2, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 0, 3, 0, 2, 0,
	3, 1, 3, 2, 0, 1, 1, 0, 2, 4,
	4, 0, 2, 4, 2, 1, 3, 5, 4, 6,
	1, 3, 3, 5, 0, 5, 1, 3, 1, 2,
	3, 1, 1, 3, 3, 1, 1, 0, 2, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 0,
	1, 1, 0, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
	1, 1,
}
var yyChk = [...]int{

	-1000, -159, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 30, -16,
	113, 114, 116, 115, 133, 117, 126, 49, 145, 146,
	148, 149, 25, 127, 128, 131, 132, -161, 8, 208,
	53, -160, 221, -82, 15, -26, 5, -24, -164, -24,
	-24, -24, -24, -24, -148, 53, -104, 120, 71, 118,
	124, -107, 56, -106, 214, 145, 156, 150, 177, 169,
	167, 170, 196, 65, 148, 129, 165, 161, 159, 27,
	182, 219, 160, 197, 154, 155, 181, 32, 216, 34,
	137, 180, 176, 179, 153, 175, 38, 195, 172, 162,
	18, 132, 135, 125, 139, 218, 158, 136, 131, 149,
	198, 37, 186, 152, 146, 143, 173, 138, 163, 164,
	178, 151, 174, 147, 140, 187, 220, 171, 168, 144,
	141, 142, 191, 192, 193, 194, 217, 166, 188, -97,
	120, 122, 118, 118, 119, 120, 118, -51, -113, 56,
	-106, 120, 118, 107, 170, 113, 189, 119, 32, 139,
	-122, 118, 190, 142, 191, 192, 193, 194, 56, 198,
	197, -113, 147, -118, -118, -118, -118, -118, -2, -86,
	17, 16, -5, -3, -161, 6, 20, 21, -30, 39,
	40, -25, -36, 98, -37, -113, -56, 73, -61, 29,
	56, -106, 23, -60, -57, -75, -73, -74, 107, 108,
	96, 97, 104, 74, 109, -65, -63, -64, -66, 58,
	57, 66, 59, 60, 61, 62, 68, 69, 70, -107,
	-71, -161, 43, 44, 209, 210, 213, 211, 76, 33,
	199, 207, 206, 205, 203, 204, 201, 202, 123, 200,
	102, 208, -97, -39, -40, -41, -42, -53, -74, -161,
	-51, 11, -46, -51, -93, -121, -94, -95, 198, 197,
	196, 170, 195, -75, -107, -113, -149, -145, 56, 119,
	-51, 208, -100, 123, 118, -51, -51, -99, 123, 56,
	-99, -51, 110, -134, 67, -51, 56, 30, 200, 56,
	139, 118, 140, 120, -119, -161, -108, -107, -105, 72,
	22, 24, 184, 75, 107, 16, 76, 106, 209, 113,
	47, 201, 202, 199, 200, 189, 29, 10, 25, 127,
	21, 100, 115, 79, 80, 130, 23, 128, 70, 19,
	50, 11, 13, 14, 123, 122, 91, 119, 45, 8,
	109, 26, 88, 41, 28, 43, 89, 17, 203, 204,
	31, 213, 134, 102, 48, 35, 73, 68, 51, 71,
	15, 46, 90, 116, 208, 44, 6, 212, 30, 126,
	42, 118, 190, 78, 121, 69, 5, 124, 9, 49,
	52, 205, 206, 207, 33, 77, 12, -119, -119, -119,
	143, 144, -119, -119, 51, -119, -162, 55, -87, 19,
	31, -37, -113, -83, -84, -37, -82, -2, -24, 35,
	-28, 21, 64, 11, -110, 72, 71, 88, -109, 22,
	-107, 58, 110, -37, -58, 91, 73, 89, 90, 75,
	93, 92, 103, 96, 97, 98, 99, 100, 101, 102,
	94, 95, 106, 81, 82, 83, 84, 85, 86, 87,
	-98, -161, -74, -161, 111, 112, -61, -61, -61, -61,
	-61, -61, -61, -161, -2, -69, -37, -161, -161, -161,
	-161, -161, -161, -161, -78, -37, -161, -165, -161, -165,
	-165, -165, -165, -165, -165, -165, -161, -161, -161, -161,
	-52, 26, -51, 30, 54, -47, -49, -48, -50, 41,
	45, 47, 42, 43, 44, 48, -117, 22, -39, -161,
	-116, 135, -115, 22, -113, 58, -51, -163, 54, 11,
	52, 54, -93, -111, -108, 58, 30, 81, 110, 55,
	54, -124, -127, -129, -128, -125, -126, 167, 168, 107,
	171, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 129, 163, 164, 165, 166, 150, 151, 152, 153,
	154, 155, 156, 158, 159, 160, 161, 162, 56, -119,
	120, -51, 73, -51, -119, 121, -51, 23, 51, -51,
	-114, -113, -105, 110, -119, -119, -119, -119, -119, -119,
	-119, -119, -119, -119, -51, 9, 91, 54, 18, 110,
	54, -85, 24, 25, -86, -162, -30, -62, -107, 59,
	62, -29, 42, -51, -37, -37, -67, 68, 73, 69,
	70, -109, 98, -114, -108, -105, -61, -68, -71, -74,
	63, 91, 89, 90, 75, -61, -61, -61, -61, -61,
	-61, -61, -61, -61, -61, -61, -61, -61, -61, -61,
	-120, 56, 58, 56, -60, -60, -107, -35, 21, -34,
	-36, -162, 54, -162, -2, -34, -34, -37, -37, -34,
	-28, -76, -77, 77, -107, -162, -34, -35, -34, -34,
	-90, 135, -51, -93, -40, -41, -41, -40, -41, 41,
	41, 41, 46, 41, 46, 41, -48, -113, -162, -54,
	49, 122, 50, -161, -115, -90, -39, -51, -95, -118,
	-37, -108, -114, -150, -151, -152, -108, 58, 59, -145,
	-146, -153, 125, 124, -147, 119, 28, -141, 68, 73,
	-137, 187, -130, 53, -130, -130, -130, -130, -135, 170,
	-135, -135, -135, 53, -130, -130, -130, -139, 53, -139,
	-139, -140, 53, -140, -112, 52, -51, 23, -101, 116,
	-158, 114, 184, 170, 65, 29, 115, 15, 209, 135,
	220, 56, 136, -51, -51, -119, -114, 37, -37, -37,
	-84, -87, -96, 19, 11, 33, 33, -34, 68, 69,
	70, 110, -161, -68, -61, -61, -61, -33, 130, 72,
	-162, -162, -34, 54, -37, -162, -162, -162, 54, 52,
	22, -162, -34, -79, -77, 79, -37, -162, -162, -162,
	-162, -162, -59, 30, 33, -2, -161, -161, -55, 12,
	-44, -43, 51, 52, -45, 51, -43, 41, 41, 119,
	119, 119, -91, -107, -55, -55, 110, 54, -152, 81,
	53, 28, -147, 56, 56, -131, 29, 68, -138, 188,
	59, -135, -135, -136, 106, 30, -136, -136, -136, -144,
	58, 59, 59, 51, -107, -119, -118, -102, -103, 121,
	22, 119, 28, 135, -119, 38, -51, -38, 11, 98,
	-108, -35, -33, 72, -61, -61, -162, -36, -123, 107,
	167, 129, 165, 161, 181, 172, 186, 163, 187, -120,
	-123, 214, -82, 80, -37, 78, -92, 51, -93, -70,
	-72, -71, -161, -2, -88, -107, -91, -82, -37, -37,
	53, -37, -161, -161, -161, -162, 54, -82, -151, -152,
	-155, -154, -107, 56, -133, 51, 58, 59, 60, 68,
	199, 55, -136, -136, 56, 56, 107, 55, 54, 54,
	55, 54, -51, -51, -118, -107, -55, -39, -162, -61,
	-162, -130, -130, -130, -140, -130, 155, -130, 155, -162,
	-162, -161, -32, 212, -37, 27, -92, 54, -162, -162,
	-162, 54, 110, -162, -86, -89, -107, -89, -89, -89,
	-116, -107, -86, 55, 54, -130, -142, 184, 9, 58,
	59, 59, -119, 26, -80, 13, -135, 56, -61, -162,
	58, 28, -72, 33, -2, -161, -107, -107, 54, 55,
	-162, -162, -162, -54, -112, -154, -143, 125, 28, 124,
	199, 55, 55, -161, -81, 14, 16, -31, 91, 217,
	9, -70, -2, 110, -107, -132, 65, 28, 28, -156,
	-157, 135, -37, -69, -162, 215, 48, 218, -93, -162,
	-107, 58, -162, 54, -107, 38, 216, 219, -157, 33,
	38, 137, 217, 138, 218, -161, 219, -61, 134, -162,
	-162,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 439, 0, 211, 211, 211, 211, 211, 211, 0,
	499, 481, 0, 0, 0, 0, 197, 201, 202, 0,
	204, 205, 678, 678, 678, 678, 678, 0, 33, 34,
	676, 1, 3, 447, 0, 0, 215, 218, 213, 0,
	481, 0, 0, 0, 54, 0, 0, 666, 0, 479,
	500, 501, 504, 505, 600, 601, 602, 603, 604, 605,
	606, 607, 608, 609, 610, 611, 612, 613, 614, 615,
	616, 617, 618, 619, 620, 621, 622, 623, 624, 625,
	626, 627, 628, 629, 630, 631, 632, 633, 634, 635,
	636, 637, 638, 639, 640, 641, 642, 643, 644, 645,
	646, 647, 648, 649, 650, 651, 652, 653, 654, 655,
	656, 657, 658, 659, 660, 661, 662, 663, 664, 665,
	667, 668, 669, 670, 671, 672, 673, 674, 675, 0,
	0, 482, 0, 477, 0, 477, 0, 172, 282, 508,
	509, 666, 0, 0, 0, 0, 679, 679, 679, 679,
	0, 679, 679, 190, 192, 193, 194, 195, 679, 198,
	199, 200, 203, 206, 207, 208, 209, 210, 27, 451,
	0, 0, 439, 29, 0, 211, 216, 217, 221, 219,
	220, 212, 0, 229, 233, 0, 293, 0, 298, 300,
	-2, -2, 0, 335, 336, 337, 338, 339, 0, 0,
	0, 0, 0, 0, 0, 362, 363, 364, 365, 424,
	425, 426, 427, 428, 429, 430, 431, 302, 303, 421,
	471, 0, 0, 0, 0, 0, 0, 0, 412, 0,
	386, 386, 386, 386, 386, 386, 386, 386, 0, 0,
	0, 0, 0, 0, 240, 242, 243, 244, 263, 0,
	265, 0, 0, 40, 44, 0, 0, 472, -2, -2,
	-2, 607, -2, 0, 421, 0, 0, 60, 0, 0,
	679, 0, 0, 0, 0, 679, 0, 0, 0, 0,
	0, 171, 0, 0, 286, 173, 679, 679, 679, 679,
	679, 679, 679, 679, 182, 680, 681, 506, 507, 512,
	513, 514, 515, 516, 517, 518, 519, 520, 521, 522,
	523, 524, 525, 526, 527, 528, 529, 530, 531, 532,
	533, 534, 535, 536, 537, 538, 539, 540, 541, 542,
	543, 544, 545, 546, 547, 548, 549, 550, 551, 552,
	553, 554, 555, 556, 557, 558, 559, 560, 561, 562,
	563, 564, 565, 566, 567, 568, 569, 570, 571, 572,
	573, 574, 575, 576, 577, 578, 579, 580, 581, 582,
	583, 584, 585, 586, 587, 588, 589, 590, 591, 592,
	593, 594, 595, 596, 597, 598, 599, 183, 184, 185,
	679, 679, 187, 188, 0, 196, 28, 677, 22, 0,
	0, 448, 0, 440, 441, 444, 447, 27, 218, 0,
	223, 222, 214, 0, 230, 0, 0, 0, 234, 0,
	236, 237, 0, 296, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 320, 321, 322, 323, 324, 325, 326,
	299, 0, 313, 0, 0, 0, 355, 356, 357, 358,
	359, 360, 0, 225, 27, 0, 333, 0, 0, 0,
	0, 0, 0, 221, 0, 413, 0, 378, 0, 379,
	380, 381, 382, 383, 384, 385, 0, 225, 0, 0,
	42, 0, 281, 0, 0, 0, 0, 0, 0, 270,
	0, 0, 273, 0, 0, 0, 0, 264, 0, 0,
	287, 638, 266, 0, 268, 269, 42, 0, 0, 38,
	39, 0, 45, 678, 50, 51, 48, 0, 0, 148,
	0, 113, 109, 65, 66, 102, 68, 102, 102, 102,
	102, 126, 126, 126, 126, 94, 95, 96, 97, 98,
	0, 81, 102, 102, 102, 85, 69, 70, 71, 72,
	73, 74, 75, 104, 104, 104, 106, 106, 502, 56,
	0, 58, 0, 0, 160, 0, 168, 478, 0, 679,
	283, 510, 511, 0, 174, 175, 176, 177, 178, 179,
	180, 181, 186, 189, 191, 452, 0, 0, 0, 0,
	0, 443, 445, 446, 451, 30, 221, 0, 432, 0,
	0, 0, 224, 25, 294, 295, 297, 314, 0, 316,
	318, 235, 231, 0, 422, -2, 304, 305, 329, 330,
	331, 0, 0, 0, 0, 327, 309, 0, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 349, 350, 351,
	354, 397, 398, 0, 352, 353, 361, 0, 0, 226,
	227, 332, 0, 470, 27, 0, 0, 0, 0, 0,
	0, 419, 416, 0, 0, 387, 0, 0, 0, 0,
	0, 0, 280, 291, 241, 259, 261, 0, 256, 271,
	272, 274, 0, 276, 0, 278, 279, 245, 246, 247,
	0, 0, 0, 0, 267, 291, 291, 41, 473, 46,
	474, 422, 0, 59, 149, 151, 154, 155, 156, 61,
	62, 0, 0, 0, 0, 143, 144, 116, 114, 0,
	111, 110, 67, 0, 126, 126, 88, 89, 129, 0,
	129, 129, 129, 0, 82, 83, 84, 76, 0, 77,
	78, 79, 0, 80, 0, 0, 679, 480, 678, 494,
	161, 483, 484, 485, 486, 487, 488, 489, 490, 491,
	492, 493, 0, 167, 679, 170, 284, 0, 449, 450,
	442, 23, 0, 475, 476, 433, 434, 238, 315, 317,
	319, 0, 225, 306, 327, 310, 0, 307, 0, 0,
	301, 366, 0, 0, 334, -2, 369, 370, 0, 0,
	0, 0, 439, 0, 417, 0, 0, 377, 388, 389,
	390, 391, 464, 0, 0, -2, 0, 0, 439, 0,
	253, 260, 0, 0, 254, 0, 255, 275, 277, 0,
	0, 0, 0, 251, 439, 37, 0, 0, 152, 0,
	0, 139, 0, 141, 142, 122, 0, 115, 64, 112,
	0, 129, 129, 90, 0, 0, 91, 92, 93, 0,
	100, 0, 0, 0, 503, 57, 157, 0, 678, 495,
	496, 497, 498, 0, 169, 453, 24, 291, 0, 232,
	423, 0, 308, 0, 328, 311, 367, 228, 0, 102,
	102, 402, 102, 106, 405, 102, 407, 102, 410, 0,
	0, 0, 414, 376, 420, 0, 31, 0, 464, 454,
	466, 468, 0, 27, 0, 460, 0, 447, 292, 257,
	0, 262, 0, 0, 0, 265, 0, 447, 150, 153,
	0, 145, 102, 140, 124, 0, 117, 118, 119, 120,
	121, 103, 86, 87, 130, 127, 128, 99, 0, 0,
	107, 0, 679, 158, 159, 0, 435, 239, 368, 312,
	371, 399, 126, 403, 404, 406, 408, 409, 411, 373,
	372, 0, 0, 0, 418, 0, 32, 0, 469, -2,
	0, 0, 0, 43, 35, 0, 249, 0, 0, 0,
	287, 252, 36, 502, 0, 147, 131, 125, 0, 101,
	0, 0, 55, 0, 437, 0, 400, 401, 392, 375,
	415, 0, 467, 0, -2, 0, 462, 461, 0, 258,
	288, 289, 290, 248, 138, 146, 136, 0, 133, 135,
	123, 105, 108, 0, 26, 0, 0, 0, 0, 0,
	0, 457, 27, 0, 250, 63, 0, 132, 134, 0,
	163, 0, 438, 436, 374, 0, 0, 0, 465, -2,
	463, 137, 162, 0, 0, 393, 0, 396, 164, 0,
	394, 0, 0, 0, 0, 0, 395, 0, 0, 165,
	166,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 74, 3, 3, 3, 101, 93, 3,
	53, 55, 98, 96, 54, 97, 110, 99, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 221,
	82, 81, 83, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 103, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 92, 3, 104,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 75,
	76, 77, 78, 79, 80, 84, 85, 86, 87, 88,
	89, 90, 91, 94, 95, 100, 102, 105, 106, 107,
	108, 109, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:283
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:288
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:289
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:293
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:316
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:324
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:328
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:334
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:341
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:347
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:351
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:357
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:361
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:368
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:380
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:392
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:396
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:402
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:408
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:412
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:417
		{
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:418
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:422
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:426
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 42:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:431
		{
			yyVAL.partitions = nil
		}
	case 43:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:435
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:441
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].updateExprs}
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:445
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].updateExprs}
		}
	case 46:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:449
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Charset: yyDollar[4].colIdent}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:460
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:464
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:470
		{
			yyVAL.str = SessionStr
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:474
		{
			yyVAL.str = GlobalStr
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:480
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 55:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:485
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 56:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:490
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 57:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:494
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 58:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:500
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 59:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:507
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:514
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:519
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:523
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 63:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:529
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:540
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:550
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:555
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:561
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:565
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:569
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:573
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:577
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:581
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:585
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:591
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:597
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:603
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:609
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:615
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:623
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:627
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:631
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:635
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:639
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:645
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 87:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:649
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:653
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:657
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:661
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:665
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:669
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:673
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:677
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:681
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:685
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:689
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:693
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:697
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:703
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:708
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 102:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:713
		{
			yyVAL.optVal = nil
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:717
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 104:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:722
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 105:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:726
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 106:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:734
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:738
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 108:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:744
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 109:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:752
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:756
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 111:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:761
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:765
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 113:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:771
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:775
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:779
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 116:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:784
		{
			yyVAL.optVal = nil
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:788
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:792
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:796
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:800
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:804
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 122:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:809
		{
			yyVAL.optVal = nil
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:813
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 124:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:818
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:822
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:827
		{
			yyVAL.str = ""
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:831
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:835
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 129:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:840
		{
			yyVAL.str = ""
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:844
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:849
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:853
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:857
		{
			yyVAL.colKeyOpt = colKey
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:861
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:865
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:870
		{
			yyVAL.optVal = nil
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:874
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 138:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:880
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Using: yyDollar[5].colIdent}
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:886
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:890
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:894
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:898
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:904
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:908
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:914
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:918
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:924
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:929
		{
			yyVAL.str = ""
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:933
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:937
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:945
		{
			yyVAL.str = yyDollar[1].str
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:949
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:953
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:959
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:963
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:967
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:973
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 158:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:977
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 159:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:982
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 160:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:987
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 161:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:991
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 162:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:997
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1003
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1007
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 165:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1013
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 166:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1017
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 167:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1023
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 168:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1029
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 169:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1037
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 170:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1042
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1052
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1056
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1061
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 174:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1067
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 175:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1071
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 176:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1075
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 177:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1080
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 178:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1084
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 179:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1088
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 180:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1092
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 181:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1096
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1100
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1104
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1108
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1112
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 186:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1116
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1120
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1124
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 189:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1128
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1132
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 191:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1136
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1140
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1144
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1148
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1152
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1162
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 197:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1168
		{
			yyVAL.str = ""
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1172
		{
			yyVAL.str = SessionStr
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1176
		{
			yyVAL.str = GlobalStr
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1182
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1186
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1192
		{
			yyVAL.statement = &Begin{}
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1196
		{
			yyVAL.statement = &Begin{}
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1202
		{
			yyVAL.statement = &Commit{}
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1208
		{
			yyVAL.statement = &Rollback{}
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1214
		{
			yyVAL.statement = &OtherRead{}
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1218
		{
			yyVAL.statement = &OtherRead{}
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1222
		{
			yyVAL.statement = &OtherRead{}
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1226
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1230
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 211:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1235
		{
			setAllowComments(yylex, true)
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1239
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 213:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1245
		{
			yyVAL.bytes2 = nil
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1249
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1255
		{
			yyVAL.str = UnionStr
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1259
		{
			yyVAL.str = UnionAllStr
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1263
		{
			yyVAL.str = UnionDistinctStr
		}
	case 218:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1268
		{
			yyVAL.str = ""
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1272
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1276
		{
			yyVAL.str = SQLCacheStr
		}
	case 221:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1281
		{
			yyVAL.str = ""
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1285
		{
			yyVAL.str = DistinctStr
		}
	case 223:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1290
		{
			yyVAL.str = ""
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1294
		{
			yyVAL.str = StraightJoinHint
		}
	case 225:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1299
		{
			yyVAL.selectExprs = nil
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1303
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1309
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1313
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1319
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1323
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1327
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 232:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1331
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 233:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1336
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1340
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1344
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1351
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 238:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1356
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1360
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1366
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1370
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1380
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1384
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1388
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1394
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 248:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1398
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1404
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1408
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1414
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1418
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1431
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 254:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1435
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 255:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1439
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1443
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1449
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1451
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 259:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1455
		{
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1457
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 261:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1461
		{
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1463
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 263:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1466
		{
			yyVAL.empty = struct{}{}
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1468
		{
			yyVAL.empty = struct{}{}
		}
	case 265:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1471
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1475
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1479
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1486
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1492
		{
			yyVAL.str = JoinStr
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1496
		{
			yyVAL.str = JoinStr
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1500
		{
			yyVAL.str = JoinStr
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1506
		{
			yyVAL.str = StraightJoinStr
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1512
		{
			yyVAL.str = LeftJoinStr
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1516
		{
			yyVAL.str = LeftJoinStr
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1520
		{
			yyVAL.str = RightJoinStr
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1524
		{
			yyVAL.str = RightJoinStr
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1530
		{
			yyVAL.str = NaturalJoinStr
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1534
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1544
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1548
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1554
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1558
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1562
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[4].tableIdent, Destination: yyDollar[2].optDestination}
		}
	case 285:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1567
		{
			yyVAL.optDestination = nil
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1571
		{
			if keyRange, err := NewDestinationExactKeyRange(string(yyDollar[1].bytes)); err != nil {
				yylex.Error("expecting valid keyrange")
				return 1
			} else {
				yyVAL.optDestination = keyRange
			}
		}
	case 287:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1581
		{
			yyVAL.indexHints = nil
		}
	case 288:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1585
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 289:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1589
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 290:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1593
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 291:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1598
		{
			yyVAL.expr = nil
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1602
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1608
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1612
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1616
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1620
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1624
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1628
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1632
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 300:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1638
		{
			yyVAL.str = ""
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1642
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1648
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1652
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1658
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1662
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 306:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1666
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 307:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1670
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 308:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1674
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1678
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 310:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1682
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 311:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1686
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 312:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1690
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1694
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1700
		{
			yyVAL.str = IsNullStr
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1704
		{
			yyVAL.str = IsNotNullStr
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1708
		{
			yyVAL.str = IsTrueStr
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1712
		{
			yyVAL.str = IsNotTrueStr
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1716
		{
			yyVAL.str = IsFalseStr
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1720
		{
			yyVAL.str = IsNotFalseStr
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1726
		{
			yyVAL.str = EqualStr
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1730
		{
			yyVAL.str = LessThanStr
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1734
		{
			yyVAL.str = GreaterThanStr
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1738
		{
			yyVAL.str = LessEqualStr
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1742
		{
			yyVAL.str = GreaterEqualStr
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1746
		{
			yyVAL.str = NotEqualStr
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1750
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1755
		{
			yyVAL.expr = nil
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1759
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1765
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1769
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1773
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1779
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1785
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1789
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1795
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1799
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1803
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1807
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1811
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1815
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1819
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1823
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1827
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1831
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1835
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1839
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1843
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1847
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1851
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1855
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1859
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1863
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1867
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1871
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1875
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1879
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1883
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1891
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1905
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1909
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1913
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 366:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1931
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 367:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1935
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 368:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1939
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 369:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1949
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 370:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1953
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 371:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1957
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 372:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1961
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 373:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1965
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 374:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1969
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 375:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1973
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 376:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1977
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 377:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1981
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1991
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1995
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1999
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2003
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2008
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2013
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2018
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2023
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 388:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2037
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 389:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2041
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 390:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2045
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 391:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2049
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 392:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2055
		{
			yyVAL.str = ""
		}
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2059
		{
			yyVAL.str = BooleanModeStr
		}
	case 394:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2063
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 395:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2067
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2071
		{
			yyVAL.str = QueryExpansionStr
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2077
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2081
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2087
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2091
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2095
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2099
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2103
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2107
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2113
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2117
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2121
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2125
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2129
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2133
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2137
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 412:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2142
		{
			yyVAL.expr = nil
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2146
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 414:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2151
		{
			yyVAL.str = string("")
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2155
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2161
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2165
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 418:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2171
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 419:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2176
		{
			yyVAL.expr = nil
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2180
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2186
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2190
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 423:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2194
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2200
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2204
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2208
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2212
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2216
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2220
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2224
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2228
		{
			yyVAL.expr = &NullVal{}
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2234
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2243
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2247
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 435:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2252
		{
			yyVAL.exprs = nil
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2256
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 437:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2261
		{
			yyVAL.expr = nil
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2265
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 439:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2270
		{
			yyVAL.orderBy = nil
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2274
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2280
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2284
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2290
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 444:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2295
		{
			yyVAL.str = AscScr
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2299
		{
			yyVAL.str = AscScr
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2303
		{
			yyVAL.str = DescScr
		}
	case 447:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2308
		{
			yyVAL.limit = nil
		}
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2312
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 449:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2316
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 450:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2320
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 451:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2325
		{
			yyVAL.str = ""
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2329
		{
			yyVAL.str = ForUpdateStr
		}
	case 453:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2333
		{
			yyVAL.str = ShareModeStr
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2346
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2350
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2354
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 457:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2359
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 458:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2363
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 459:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2367
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2374
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2378
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2382
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 463:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2386
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 464:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2391
		{
			yyVAL.updateExprs = nil
		}
	case 465:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2395
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2401
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2405
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2411
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2415
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2421
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2427
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2437
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2441
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2447
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 477:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2456
		{
			yyVAL.byt = 0
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2458
		{
			yyVAL.byt = 1
		}
	case 479:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2461
		{
			yyVAL.empty = struct{}{}
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2463
		{
			yyVAL.empty = struct{}{}
		}
	case 481:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2466
		{
			yyVAL.str = ""
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2468
		{
			yyVAL.str = IgnoreStr
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2472
		{
			yyVAL.empty = struct{}{}
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2474
		{
			yyVAL.empty = struct{}{}
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2476
		{
			yyVAL.empty = struct{}{}
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2478
		{
			yyVAL.empty = struct{}{}
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2480
		{
			yyVAL.empty = struct{}{}
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2482
		{
			yyVAL.empty = struct{}{}
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2484
		{
			yyVAL.empty = struct{}{}
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2486
		{
			yyVAL.empty = struct{}{}
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2488
		{
			yyVAL.empty = struct{}{}
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2490
		{
			yyVAL.empty = struct{}{}
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2492
		{
			yyVAL.empty = struct{}{}
		}
	case 494:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2495
		{
			yyVAL.empty = struct{}{}
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2497
		{
			yyVAL.empty = struct{}{}
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2499
		{
			yyVAL.empty = struct{}{}
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2503
		{
			yyVAL.empty = struct{}{}
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2505
		{
			yyVAL.empty = struct{}{}
		}
	case 499:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2508
		{
			yyVAL.empty = struct{}{}
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2510
		{
			yyVAL.empty = struct{}{}
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2512
		{
			yyVAL.empty = struct{}{}
		}
	case 502:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2515
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2517
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2521
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2525
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2532
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2538
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2542
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2549
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2739
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2748
		{
			decNesting(yylex)
		}
	case 678:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2753
		{
			forceEOF(yylex)
		}
	case 679:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2758
		{
			forceEOF(yylex)
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2762
		{
			forceEOF(yylex)
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2766
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
