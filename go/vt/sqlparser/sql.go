// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               *SQLVal
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const VALUES = 57376
const LAST_INSERT_ID = 57377
const NEXT = 57378
const VALUE = 57379
const SHARE = 57380
const MODE = 57381
const SHARD_PARTIAL = 57382
const SQL_NO_CACHE = 57383
const SQL_CACHE = 57384
const JOIN = 57385
const STRAIGHT_JOIN = 57386
const LEFT = 57387
const RIGHT = 57388
const INNER = 57389
const OUTER = 57390
const CROSS = 57391
const NATURAL = 57392
const USE = 57393
const FORCE = 57394
const ON = 57395
const USING = 57396
const ID = 57397
const HEX = 57398
const STRING = 57399
const INTEGRAL = 57400
const FLOAT = 57401
const HEXNUM = 57402
const VALUE_ARG = 57403
const LIST_ARG = 57404
const COMMENT = 57405
const COMMENT_KEYWORD = 57406
const BIT_LITERAL = 57407
const NULL = 57408
const TRUE = 57409
const FALSE = 57410
const OFF = 57411
const OR = 57412
const AND = 57413
const NOT = 57414
const BETWEEN = 57415
const CASE = 57416
const WHEN = 57417
const THEN = 57418
const ELSE = 57419
const END = 57420
const LE = 57421
const GE = 57422
const NE = 57423
const NULL_SAFE_EQUAL = 57424
const IS = 57425
const LIKE = 57426
const REGEXP = 57427
const IN = 57428
const SHIFT_LEFT = 57429
const SHIFT_RIGHT = 57430
const DIV = 57431
const MOD = 57432
const UNARY = 57433
const COLLATE = 57434
const BINARY = 57435
const UNDERSCORE_BINARY = 57436
const UNDERSCORE_UTF8MB4 = 57437
const INTERVAL = 57438
const JSON_EXTRACT_OP = 57439
const JSON_UNQUOTE_EXTRACT_OP = 57440
const CREATE = 57441
const ALTER = 57442
const DROP = 57443
const RENAME = 57444
const ANALYZE = 57445
const ADD = 57446
const SCHEMA = 57447
const TABLE = 57448
const INDEX = 57449
const VIEW = 57450
const TO = 57451
const IGNORE = 57452
const IF = 57453
const UNIQUE = 57454
const PRIMARY = 57455
const COLUMN = 57456
const SPATIAL = 57457
const FULLTEXT = 57458
const KEY_BLOCK_SIZE = 57459
const ACTION = 57460
const CASCADE = 57461
const CONSTRAINT = 57462
const FOREIGN = 57463
const NO = 57464
const REFERENCES = 57465
const RESTRICT = 57466
const SHOW = 57467
const DESCRIBE = 57468
const EXPLAIN = 57469
const DATE = 57470
const ESCAPE = 57471
const REPAIR = 57472
const OPTIMIZE = 57473
const TRUNCATE = 57474
const MAXVALUE = 57475
const PARTITION = 57476
const REORGANIZE = 57477
const LESS = 57478
const THAN = 57479
const PROCEDURE = 57480
const TRIGGER = 57481
const VINDEX = 57482
const VINDEXES = 57483
const STATUS = 57484
const VARIABLES = 57485
const BEGIN = 57486
const START = 57487
const TRANSACTION = 57488
const COMMIT = 57489
const ROLLBACK = 57490
const BIT = 57491
const TINYINT = 57492
const SMALLINT = 57493
const MEDIUMINT = 57494
const INT = 57495
const INTEGER = 57496
const BIGINT = 57497
const INTNUM = 57498
const REAL = 57499
const DOUBLE = 57500
const FLOAT_TYPE = 57501
const DECIMAL = 57502
const NUMERIC = 57503
const TIME = 57504
const TIMESTAMP = 57505
const DATETIME = 57506
const YEAR = 57507
const CHAR = 57508
const VARCHAR = 57509
const BOOL = 57510
const CHARACTER = 57511
const VARBINARY = 57512
const NCHAR = 57513
const TEXT = 57514
const TINYTEXT = 57515
const MEDIUMTEXT = 57516
const LONGTEXT = 57517
const BLOB = 57518
const TINYBLOB = 57519
const MEDIUMBLOB = 57520
const LONGBLOB = 57521
const JSON = 57522
const ENUM = 57523
const GEOMETRY = 57524
const POINT = 57525
const LINESTRING = 57526
const POLYGON = 57527
const GEOMETRYCOLLECTION = 57528
const MULTIPOINT = 57529
const MULTILINESTRING = 57530
const MULTIPOLYGON = 57531
const NULLX = 57532
const AUTO_INCREMENT = 57533
const APPROXNUM = 57534
const SIGNED = 57535
const UNSIGNED = 57536
const ZEROFILL = 57537
const COLLATION = 57538
const DATABASES = 57539
const TABLES = 57540
const VITESS_KEYSPACES = 57541
const VITESS_SHARDS = 57542
const VITESS_TABLETS = 57543
const VSCHEMA_TABLES = 57544
const VITESS_TARGET = 57545
const FULL = 57546
const PROCESSLIST = 57547
const COLUMNS = 57548
const FIELDS = 57549
const NAMES = 57550
const CHARSET = 57551
const GLOBAL = 57552
const SESSION = 57553
const ISOLATION = 57554
const LEVEL = 57555
const READ = 57556
const WRITE = 57557
const ONLY = 57558
const REPEATABLE = 57559
const COMMITTED = 57560
const UNCOMMITTED = 57561
const SERIALIZABLE = 57562
const CURRENT_TIMESTAMP = 57563
const DATABASE = 57564
const CURRENT_DATE = 57565
const CURRENT_TIME = 57566
const LOCALTIME = 57567
const LOCALTIMESTAMP = 57568
const UTC_DATE = 57569
const UTC_TIME = 57570
const UTC_TIMESTAMP = 57571
const REPLACE = 57572
const CONVERT = 57573
const CAST = 57574
const SUBSTR = 57575
const SUBSTRING = 57576
const GROUP_CONCAT = 57577
const SEPARATOR = 57578
const MATCH = 57579
const AGAINST = 57580
const BOOLEAN = 57581
const LANGUAGE = 57582
const WITH = 57583
const QUERY = 57584
const EXPANSION = 57585
const UNUSED = 57586

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SHARD_PARTIAL",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"VITESS_TARGET",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 29,
	-2, 4,
	-1, 36,
	159, 291,
	160, 291,
	-2, 281,
	-1, 255,
	113, 620,
	-2, 616,
	-1, 256,
	113, 621,
	-2, 617,
	-1, 316,
	1, 342,
	5, 342,
	12, 342,
	13, 342,
	14, 342,
	15, 342,
	17, 342,
	19, 342,
	30, 342,
	31, 342,
	43, 342,
	44, 342,
	45, 342,
	46, 342,
	47, 342,
	49, 342,
	50, 342,
	53, 342,
	54, 342,
	56, 342,
	57, 342,
	262, 342,
	-2, 360,
	-1, 326,
	83, 790,
	-2, 60,
	-1, 327,
	83, 748,
	-2, 61,
	-1, 332,
	83, 729,
	-2, 582,
	-1, 334,
	83, 769,
	-2, 584,
	-1, 607,
	54, 43,
	56, 43,
	-2, 45,
	-1, 744,
	113, 623,
	-2, 619,
	-1, 958,
	5, 30,
	-2, 426,
	-1, 983,
	5, 29,
	-2, 556,
	-1, 1212,
	5, 30,
	-2, 557,
	-1, 1259,
	5, 29,
	-2, 559,
	-1, 1327,
	5, 30,
	-2, 560,
}

const yyPrivate = 57344

const yyLast = 11312

var yyAct = [...]int{

	256, 1364, 1354, 1317, 896, 55, 1218, 679, 260, 806,
	554, 1245, 234, 1270, 1146, 1289, 824, 986, 1119, 876,
	1048, 1022, 843, 553, 3, 601, 1118, 847, 1115, 890,
	463, 80, 1081, 226, 923, 199, 286, 807, 199, 856,
	1002, 599, 331, 769, 779, 262, 950, 776, 1092, 846,
	708, 1051, 860, 1039, 795, 746, 730, 617, 778, 991,
	485, 491, 886, 325, 199, 199, 80, 432, 588, 616,
	199, 312, 199, 233, 80, 803, 603, 227, 228, 229,
	230, 313, 243, 498, 931, 322, 287, 49, 506, 913,
	320, 54, 1357, 1340, 1352, 1325, 1349, 568, 897, 1339,
	1324, 258, 1110, 912, 1206, 311, 247, 437, 1280, 316,
	1297, 519, 518, 528, 529, 521, 522, 523, 524, 525,
	526, 527, 520, 1141, 1142, 530, 59, 194, 190, 191,
	192, 1010, 917, 458, 1009, 1140, 49, 1011, 838, 839,
	618, 911, 619, 837, 239, 1093, 483, 232, 231, 1030,
	317, 61, 62, 63, 64, 65, 1154, 1155, 1156, 476,
	869, 1231, 446, 1248, 1159, 1157, 477, 474, 475, 877,
	1195, 1193, 225, 469, 470, 1351, 1059, 1348, 1318, 1072,
	804, 1095, 1309, 861, 1271, 447, 1372, 1278, 199, 440,
	199, 908, 905, 906, 188, 904, 199, 1273, 460, 687,
	462, 863, 187, 199, 188, 678, 1057, 80, 80, 80,
	80, 1001, 80, 1097, 1000, 1101, 999, 1096, 435, 1094,
	443, 80, 202, 189, 1099, 915, 918, 863, 825, 827,
	459, 461, 1302, 1098, 542, 543, 1368, 863, 466, 467,
	468, 1215, 471, 493, 193, 1078, 1100, 1102, 1069, 966,
	80, 480, 944, 717, 1071, 510, 453, 433, 1163, 520,
	910, 844, 530, 494, 1272, 481, 482, 1023, 530, 709,
	505, 714, 1058, 1307, 1173, 1298, 68, 1063, 1060, 1053,
	1061, 1056, 909, 504, 503, 1054, 1055, 989, 1279, 1277,
	1114, 877, 433, 464, 464, 464, 464, 862, 464, 1062,
	505, 753, 963, 540, 826, 1065, 1323, 464, 620, 1164,
	1059, 199, 69, 1112, 457, 751, 752, 750, 199, 199,
	199, 796, 914, 862, 80, 431, 49, 682, 859, 857,
	80, 858, 866, 862, 1158, 916, 855, 861, 867, 1028,
	1057, 539, 1366, 925, 541, 1367, 503, 1365, 504, 503,
	1070, 710, 1068, 504, 503, 449, 450, 451, 796, 1311,
	973, 52, 505, 316, 500, 505, 1329, 495, 1373, 1238,
	505, 749, 552, 1237, 556, 557, 558, 559, 560, 561,
	562, 563, 564, 1043, 567, 569, 569, 569, 569, 569,
	569, 569, 569, 577, 578, 579, 580, 570, 571, 572,
	573, 574, 575, 576, 600, 439, 1058, 1042, 1374, 614,
	608, 1063, 1060, 1053, 1061, 1056, 962, 186, 961, 1054,
	1055, 1031, 924, 870, 521, 522, 523, 524, 525, 526,
	527, 520, 199, 1062, 530, 504, 503, 80, 1331, 1052,
	736, 738, 739, 199, 199, 80, 737, 199, 1308, 770,
	199, 771, 505, 1255, 199, 1305, 80, 80, 80, 80,
	80, 80, 80, 80, 941, 942, 943, 677, 1235, 1075,
	80, 80, 1012, 1040, 1013, 686, 1263, 1350, 484, 199,
	310, 441, 442, 1335, 484, 1332, 697, 698, 699, 700,
	701, 702, 703, 704, 1263, 1315, 696, 80, 1263, 1275,
	705, 706, 199, 1263, 484, 1285, 722, 1023, 80, 1018,
	519, 518, 528, 529, 521, 522, 523, 524, 525, 526,
	527, 520, 899, 464, 530, 523, 524, 525, 526, 527,
	520, 464, 772, 530, 1263, 1264, 716, 693, 694, 1227,
	1226, 1284, 464, 464, 464, 464, 464, 464, 464, 464,
	747, 692, 80, 744, 720, 721, 464, 464, 683, 748,
	681, 676, 951, 276, 275, 278, 279, 280, 281, 455,
	788, 791, 277, 282, 715, 448, 797, 1281, 724, 21,
	783, 729, 1160, 199, 1137, 484, 199, 199, 199, 199,
	199, 504, 503, 808, 864, 742, 740, 611, 199, 1214,
	484, 199, 1082, 504, 503, 199, 1170, 1169, 505, 968,
	199, 199, 1166, 1167, 80, 56, 784, 785, 1166, 1165,
	505, 831, 792, 610, 783, 987, 800, 80, 49, 956,
	484, 316, 316, 316, 316, 316, 799, 238, 801, 802,
	612, 723, 610, 556, 773, 774, 316, 956, 793, 585,
	484, 832, 781, 484, 967, 316, 956, 809, 23, 285,
	812, 878, 879, 880, 781, 821, 627, 626, 810, 811,
	23, 813, 317, 317, 317, 317, 317, 834, 965, 199,
	988, 829, 80, 830, 80, 835, 1258, 600, 199, 828,
	78, 199, 80, 988, 981, 851, 317, 1210, 982, 1116,
	780, 782, 987, 584, 585, 892, 1172, 52, 199, 52,
	199, 199, 900, 23, 902, 1168, 798, 1014, 836, 52,
	240, 956, 921, 964, 585, 330, 613, 1087, 718, 585,
	1341, 1314, 1242, 438, 1233, 888, 889, 987, 590, 593,
	594, 595, 591, 871, 592, 596, 823, 519, 518, 528,
	529, 521, 522, 523, 524, 525, 526, 527, 520, 891,
	744, 530, 52, 1151, 1131, 1017, 992, 993, 464, 52,
	464, 731, 887, 882, 881, 680, 894, 1359, 464, 1355,
	932, 1153, 1116, 933, 1044, 995, 939, 747, 690, 940,
	478, 514, 818, 517, 998, 997, 748, 819, 815, 531,
	532, 533, 534, 535, 536, 537, 946, 515, 516, 513,
	519, 518, 528, 529, 521, 522, 523, 524, 525, 526,
	527, 520, 814, 816, 530, 244, 245, 983, 817, 80,
	945, 820, 199, 594, 595, 1346, 955, 1338, 1077, 928,
	1344, 938, 937, 1035, 625, 456, 1027, 80, 1004, 972,
	1006, 486, 970, 528, 529, 521, 522, 523, 524, 525,
	526, 527, 520, 487, 499, 530, 330, 330, 330, 330,
	1313, 330, 996, 1005, 1015, 1312, 1256, 316, 1025, 496,
	330, 1019, 1024, 497, 1208, 1243, 901, 689, 598, 465,
	984, 985, 1032, 1033, 1007, 80, 80, 499, 80, 1034,
	936, 1036, 1037, 1038, 241, 242, 56, 235, 935, 508,
	1291, 1020, 1021, 236, 1290, 1246, 988, 479, 317, 953,
	707, 80, 501, 954, 484, 1361, 1046, 1361, 1360, 1299,
	958, 959, 960, 1232, 713, 199, 1041, 1050, 60, 969,
	58, 609, 53, 1, 975, 80, 976, 977, 978, 979,
	1353, 1073, 1203, 898, 1047, 328, 907, 1064, 1316, 1269,
	1145, 519, 518, 528, 529, 521, 522, 523, 524, 525,
	526, 527, 520, 1074, 854, 530, 1111, 845, 67, 430,
	66, 1306, 464, 330, 853, 80, 80, 318, 852, 622,
	808, 1117, 1126, 1085, 1086, 1276, 808, 1230, 1080, 865,
	1029, 1091, 868, 1152, 1310, 1026, 1103, 464, 1122, 744,
	1138, 253, 1104, 633, 631, 80, 632, 80, 80, 1120,
	630, 635, 196, 1139, 634, 1127, 1125, 519, 518, 528,
	529, 521, 522, 523, 524, 525, 526, 527, 520, 629,
	210, 530, 1149, 1150, 1144, 199, 323, 597, 621, 893,
	502, 70, 321, 80, 1067, 1161, 1162, 434, 1148, 436,
	872, 873, 874, 875, 1143, 1066, 80, 199, 903, 1121,
	472, 49, 473, 80, 212, 538, 883, 884, 885, 80,
	934, 1008, 329, 199, 1123, 1174, 1133, 1134, 1135, 719,
	490, 971, 565, 794, 261, 735, 330, 274, 1176, 1183,
	271, 1179, 1090, 273, 330, 272, 725, 980, 512, 1181,
	259, 251, 315, 1182, 581, 330, 330, 330, 330, 330,
	330, 330, 330, 249, 1184, 589, 587, 1191, 316, 330,
	330, 586, 80, 994, 80, 80, 80, 199, 80, 1217,
	1220, 1221, 1222, 990, 80, 314, 1209, 1205, 1296, 1136,
	25, 1225, 80, 57, 246, 19, 726, 18, 1229, 17,
	20, 16, 1223, 15, 14, 29, 13, 508, 12, 317,
	330, 1015, 80, 80, 80, 444, 11, 445, 10, 9,
	8, 7, 6, 452, 5, 1234, 4, 1236, 237, 22,
	454, 2, 0, 1240, 0, 0, 0, 1204, 0, 0,
	1244, 1241, 1239, 0, 0, 0, 0, 0, 0, 1247,
	0, 775, 0, 328, 0, 80, 80, 0, 0, 0,
	0, 789, 789, 0, 0, 0, 0, 789, 80, 1257,
	0, 0, 1185, 0, 0, 0, 0, 1259, 0, 1187,
	1268, 0, 1274, 80, 789, 0, 0, 1120, 0, 1286,
	1196, 1197, 1198, 0, 0, 1201, 1288, 1282, 464, 1283,
	0, 0, 0, 0, 80, 0, 0, 0, 1211, 1212,
	1213, 0, 1216, 330, 0, 544, 545, 546, 547, 548,
	549, 550, 551, 1304, 1301, 1300, 330, 0, 0, 0,
	0, 0, 0, 0, 0, 1120, 0, 1121, 583, 0,
	1260, 0, 1321, 80, 1319, 1200, 0, 607, 808, 1326,
	199, 590, 593, 594, 595, 591, 0, 592, 596, 80,
	0, 992, 993, 1333, 0, 1337, 0, 0, 0, 0,
	1287, 0, 0, 0, 0, 0, 0, 0, 1342, 1343,
	0, 330, 80, 330, 0, 1121, 0, 49, 1347, 0,
	1345, 330, 1254, 0, 0, 0, 1358, 0, 0, 488,
	492, 0, 0, 1369, 0, 0, 0, 1265, 1266, 1267,
	0, 0, 0, 0, 0, 0, 511, 330, 0, 0,
	519, 518, 528, 529, 521, 522, 523, 524, 525, 526,
	527, 520, 0, 0, 530, 0, 1292, 1293, 1294, 1295,
	743, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 555, 0, 0, 0, 0, 0, 0, 0, 628,
	566, 0, 0, 0, 0, 0, 0, 0, 0, 489,
	684, 685, 0, 0, 688, 0, 0, 691, 1356, 0,
	0, 0, 0, 1322, 0, 0, 0, 0, 1327, 0,
	0, 0, 0, 23, 24, 50, 26, 27, 0, 0,
	0, 0, 0, 1334, 197, 0, 711, 224, 0, 0,
	0, 0, 42, 0, 0, 0, 0, 28, 47, 48,
	0, 0, 0, 0, 0, 0, 0, 0, 1003, 732,
	0, 250, 0, 197, 197, 0, 0, 0, 37, 197,
	0, 197, 52, 328, 1202, 484, 330, 0, 0, 1370,
	1371, 0, 0, 0, 0, 0, 848, 1188, 1189, 0,
	1190, 0, 0, 1192, 745, 1194, 0, 754, 755, 756,
	757, 758, 759, 760, 761, 762, 763, 764, 765, 766,
	767, 768, 519, 518, 528, 529, 521, 522, 523, 524,
	525, 526, 527, 520, 1045, 330, 530, 330, 0, 0,
	0, 0, 0, 30, 31, 33, 32, 35, 0, 0,
	805, 1228, 0, 0, 208, 0, 0, 0, 0, 0,
	330, 0, 0, 0, 0, 0, 0, 0, 0, 36,
	43, 44, 0, 0, 45, 46, 34, 0, 833, 220,
	0, 0, 0, 712, 330, 0, 0, 743, 38, 39,
	0, 40, 41, 0, 0, 0, 0, 197, 0, 197,
	0, 0, 0, 0, 0, 197, 330, 733, 734, 0,
	0, 0, 197, 0, 0, 0, 0, 0, 0, 0,
	0, 789, 0, 0, 1124, 1003, 0, 789, 0, 0,
	203, 0, 0, 0, 0, 0, 0, 205, 0, 0,
	0, 0, 1199, 484, 211, 207, 895, 0, 0, 0,
	0, 0, 0, 0, 330, 919, 330, 1147, 920, 0,
	555, 0, 0, 786, 787, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 51, 922, 209, 0, 0, 213,
	519, 518, 528, 529, 521, 522, 523, 524, 525, 526,
	527, 520, 1175, 0, 530, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1177, 0, 204, 0, 0,
	0, 0, 1180, 0, 0, 0, 848, 0, 330, 0,
	197, 0, 0, 0, 842, 0, 0, 197, 605, 197,
	952, 0, 0, 0, 214, 206, 0, 215, 216, 217,
	219, 218, 223, 947, 948, 949, 0, 0, 222, 221,
	519, 518, 528, 529, 521, 522, 523, 524, 525, 526,
	527, 520, 0, 0, 530, 0, 0, 1049, 0, 0,
	0, 1219, 0, 1219, 1219, 1219, 0, 1224, 0, 0,
	0, 0, 0, 330, 0, 0, 0, 0, 0, 0,
	0, 1219, 519, 518, 528, 529, 521, 522, 523, 524,
	525, 526, 527, 520, 0, 0, 530, 0, 0, 0,
	0, 330, 330, 330, 1084, 0, 0, 0, 0, 929,
	930, 0, 492, 0, 518, 528, 529, 521, 522, 523,
	524, 525, 526, 527, 520, 0, 1107, 530, 0, 0,
	0, 197, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 197, 197, 1261, 1262, 197, 0, 0, 197,
	0, 0, 0, 695, 0, 0, 0, 1147, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1219, 0, 848, 957, 848, 0, 197, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	974, 0, 1079, 1303, 0, 0, 0, 0, 0, 0,
	0, 197, 0, 0, 0, 0, 0, 0, 0, 0,
	695, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 789,
	0, 0, 1328, 1088, 1089, 0, 0, 0, 1084, 0,
	0, 0, 0, 0, 0, 0, 1105, 1106, 1336, 1108,
	1109, 0, 250, 0, 0, 0, 0, 250, 250, 0,
	0, 790, 790, 250, 0, 0, 0, 790, 0, 0,
	0, 1219, 0, 0, 0, 0, 0, 250, 250, 250,
	250, 0, 197, 0, 790, 197, 197, 197, 197, 197,
	0, 0, 0, 0, 0, 0, 0, 822, 0, 0,
	197, 0, 1171, 848, 605, 0, 0, 0, 0, 197,
	197, 0, 0, 0, 0, 0, 0, 0, 0, 1076,
	0, 0, 0, 0, 1178, 0, 0, 0, 0, 0,
	0, 0, 1049, 848, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1113, 0, 1186,
	0, 0, 0, 0, 0, 0, 0, 0, 197, 0,
	0, 0, 1128, 1129, 0, 0, 1130, 197, 0, 1132,
	197, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 197, 0, 926,
	927, 0, 135, 0, 0, 0, 0, 695, 0, 0,
	0, 101, 0, 0, 0, 0, 0, 116, 0, 118,
	250, 0, 154, 127, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 79, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 0, 0, 0, 0, 0, 72, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 250, 0, 0,
	0, 1249, 1250, 0, 1251, 1252, 1253, 0, 0, 0,
	0, 0, 0, 250, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1207, 0,
	0, 0, 0, 0, 0, 555, 75, 76, 0, 71,
	0, 0, 0, 77, 141, 0, 157, 107, 115, 82,
	88, 197, 106, 133, 146, 150, 0, 0, 0, 97,
	0, 148, 137, 169, 0, 138, 147, 119, 161, 142,
	168, 73, 176, 159, 175, 83, 158, 167, 95, 151,
	85, 165, 156, 125, 111, 112, 84, 1330, 145, 100,
	104, 99, 134, 162, 163, 98, 184, 89, 174, 87,
	90, 173, 132, 160, 166, 126, 123, 86, 164, 124,
	122, 114, 102, 108, 139, 121, 140, 109, 129, 128,
	130, 0, 0, 0, 155, 171, 185, 92, 0, 0,
	177, 178, 179, 180, 181, 0, 0, 93, 105, 131,
	91, 110, 152, 113, 120, 144, 183, 136, 149, 96,
	170, 153, 0, 74, 197, 0, 0, 0, 1362, 250,
	0, 0, 0, 0, 0, 250, 0, 650, 0, 81,
	0, 117, 182, 143, 103, 172, 250, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 695, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 790, 0, 0, 1320, 555, 0, 790, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 638, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 197, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 651, 0, 0, 0, 197, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 197, 664, 665, 666, 667, 668, 669, 670,
	0, 671, 672, 673, 674, 675, 652, 653, 654, 655,
	636, 637, 0, 0, 639, 0, 640, 641, 642, 643,
	644, 645, 646, 647, 648, 649, 656, 657, 658, 659,
	660, 661, 662, 663, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 418, 408, 0, 378, 421, 356,
	370, 429, 371, 372, 400, 342, 386, 135, 368, 0,
	359, 337, 365, 338, 357, 380, 101, 383, 355, 410,
	389, 420, 116, 427, 118, 394, 0, 154, 127, 402,
	0, 0, 382, 412, 384, 406, 377, 401, 347, 393,
	422, 369, 398, 423, 0, 0, 0, 79, 0, 849,
	850, 0, 0, 0, 0, 0, 94, 0, 396, 417,
	367, 397, 399, 336, 395, 0, 340, 343, 428, 415,
	362, 363, 1016, 0, 0, 0, 0, 0, 0, 381,
	385, 403, 375, 0, 0, 0, 0, 0, 0, 0,
	0, 360, 0, 392, 0, 0, 0, 344, 341, 790,
	0, 379, 0, 0, 0, 346, 0, 361, 404, 197,
	335, 407, 413, 376, 200, 416, 374, 373, 419, 141,
	0, 157, 107, 115, 82, 88, 0, 106, 133, 146,
	150, 411, 358, 366, 97, 364, 148, 137, 169, 391,
	138, 147, 119, 161, 142, 168, 201, 176, 159, 175,
	83, 158, 167, 95, 151, 85, 165, 156, 125, 111,
	112, 84, 0, 145, 100, 104, 99, 134, 162, 163,
	98, 184, 89, 174, 87, 90, 173, 132, 160, 166,
	126, 123, 86, 164, 124, 122, 114, 102, 108, 139,
	121, 140, 109, 129, 128, 130, 0, 339, 0, 155,
	171, 185, 92, 354, 414, 177, 178, 179, 180, 181,
	0, 0, 93, 105, 131, 91, 110, 152, 113, 120,
	144, 183, 136, 149, 96, 170, 153, 350, 353, 348,
	349, 387, 388, 424, 425, 426, 405, 345, 0, 351,
	352, 0, 409, 390, 81, 0, 117, 182, 143, 103,
	172, 418, 408, 0, 378, 421, 356, 370, 429, 371,
	372, 400, 342, 386, 135, 368, 0, 359, 337, 365,
	338, 357, 380, 101, 383, 355, 410, 389, 420, 116,
	427, 118, 394, 0, 154, 127, 402, 0, 0, 382,
	412, 384, 406, 377, 401, 347, 393, 422, 369, 398,
	423, 0, 0, 0, 79, 0, 849, 850, 0, 0,
	0, 0, 0, 94, 0, 396, 417, 367, 397, 399,
	336, 395, 0, 340, 343, 428, 415, 362, 363, 0,
	0, 0, 0, 0, 0, 0, 381, 385, 403, 375,
	0, 0, 0, 0, 0, 0, 0, 0, 360, 0,
	392, 0, 0, 0, 344, 341, 0, 0, 379, 0,
	0, 0, 346, 0, 361, 404, 0, 335, 407, 413,
	376, 200, 416, 374, 373, 419, 141, 0, 157, 107,
	115, 82, 88, 0, 106, 133, 146, 150, 411, 358,
	366, 97, 364, 148, 137, 169, 391, 138, 147, 119,
	161, 142, 168, 201, 176, 159, 175, 83, 158, 167,
	95, 151, 85, 165, 156, 125, 111, 112, 84, 0,
	145, 100, 104, 99, 134, 162, 163, 98, 184, 89,
	174, 87, 90, 173, 132, 160, 166, 126, 123, 86,
	164, 124, 122, 114, 102, 108, 139, 121, 140, 109,
	129, 128, 130, 0, 339, 0, 155, 171, 185, 92,
	354, 414, 177, 178, 179, 180, 181, 0, 0, 93,
	105, 131, 91, 110, 152, 113, 120, 144, 183, 136,
	149, 96, 170, 153, 350, 353, 348, 349, 387, 388,
	424, 425, 426, 405, 345, 0, 351, 352, 0, 409,
	390, 81, 0, 117, 182, 143, 103, 172, 418, 408,
	0, 378, 421, 356, 370, 429, 371, 372, 400, 342,
	386, 135, 368, 0, 359, 337, 365, 338, 357, 380,
	101, 383, 355, 410, 389, 420, 116, 427, 118, 394,
	0, 154, 127, 402, 0, 0, 382, 412, 384, 406,
	377, 401, 347, 393, 422, 369, 398, 423, 52, 0,
	0, 79, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 0, 396, 417, 367, 397, 399, 336, 395, 0,
	340, 343, 428, 415, 362, 363, 0, 0, 0, 0,
	0, 0, 0, 381, 385, 403, 375, 0, 0, 0,
	0, 0, 0, 0, 0, 360, 0, 392, 0, 0,
	0, 344, 341, 0, 0, 379, 0, 0, 0, 346,
	0, 361, 404, 0, 335, 407, 413, 376, 200, 416,
	374, 373, 419, 141, 0, 157, 107, 115, 82, 88,
	0, 106, 133, 146, 150, 411, 358, 366, 97, 364,
	148, 137, 169, 391, 138, 147, 119, 161, 142, 168,
	201, 176, 159, 175, 83, 158, 167, 95, 151, 85,
	165, 156, 125, 111, 112, 84, 0, 145, 100, 104,
	99, 134, 162, 163, 98, 184, 89, 174, 87, 90,
	173, 132, 160, 166, 126, 123, 86, 164, 124, 122,
	114, 102, 108, 139, 121, 140, 109, 129, 128, 130,
	0, 339, 0, 155, 171, 185, 92, 354, 414, 177,
	178, 179, 180, 181, 0, 0, 93, 105, 131, 91,
	110, 152, 113, 120, 144, 183, 136, 149, 96, 170,
	153, 350, 353, 348, 349, 387, 388, 424, 425, 426,
	405, 345, 0, 351, 352, 0, 409, 390, 81, 0,
	117, 182, 143, 103, 172, 418, 408, 0, 378, 421,
	356, 370, 429, 371, 372, 400, 342, 386, 135, 368,
	0, 359, 337, 365, 338, 357, 380, 101, 383, 355,
	410, 389, 420, 116, 427, 118, 394, 0, 154, 127,
	402, 0, 0, 382, 412, 384, 406, 377, 401, 347,
	393, 422, 369, 398, 423, 0, 0, 0, 79, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 0, 396,
	417, 367, 397, 399, 336, 395, 0, 340, 343, 428,
	415, 362, 363, 0, 0, 0, 0, 0, 0, 0,
	381, 385, 403, 375, 0, 0, 0, 0, 0, 0,
	1083, 0, 360, 0, 392, 0, 0, 0, 344, 341,
	0, 0, 379, 0, 0, 0, 346, 0, 361, 404,
	0, 335, 407, 413, 376, 200, 416, 374, 373, 419,
	141, 0, 157, 107, 115, 82, 88, 0, 106, 133,
	146, 150, 411, 358, 366, 97, 364, 148, 137, 169,
	391, 138, 147, 119, 161, 142, 168, 201, 176, 159,
	175, 83, 158, 167, 95, 151, 85, 165, 156, 125,
	111, 112, 84, 0, 145, 100, 104, 99, 134, 162,
	163, 98, 184, 89, 174, 87, 90, 173, 132, 160,
	166, 126, 123, 86, 164, 124, 122, 114, 102, 108,
	139, 121, 140, 109, 129, 128, 130, 0, 339, 0,
	155, 171, 185, 92, 354, 414, 177, 178, 179, 180,
	181, 0, 0, 93, 105, 131, 91, 110, 152, 113,
	120, 144, 183, 136, 149, 96, 170, 153, 350, 353,
	348, 349, 387, 388, 424, 425, 426, 405, 345, 0,
	351, 352, 0, 409, 390, 81, 0, 117, 182, 143,
	103, 172, 418, 408, 0, 378, 421, 356, 370, 429,
	371, 372, 400, 342, 386, 135, 368, 0, 359, 337,
	365, 338, 357, 380, 101, 383, 355, 410, 389, 420,
	116, 427, 118, 394, 0, 154, 127, 402, 0, 0,
	382, 412, 384, 406, 377, 401, 347, 393, 422, 369,
	398, 423, 0, 0, 0, 255, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 0, 396, 417, 367, 397,
	399, 336, 395, 0, 340, 343, 428, 415, 362, 363,
	0, 0, 0, 0, 0, 0, 0, 381, 385, 403,
	375, 0, 0, 0, 0, 0, 0, 741, 0, 360,
	0, 392, 0, 0, 0, 344, 341, 0, 0, 379,
	0, 0, 0, 346, 0, 361, 404, 0, 335, 407,
	413, 376, 200, 416, 374, 373, 419, 141, 0, 157,
	107, 115, 82, 88, 0, 106, 133, 146, 150, 411,
	358, 366, 97, 364, 148, 137, 169, 391, 138, 147,
	119, 161, 142, 168, 201, 176, 159, 175, 83, 158,
	167, 95, 151, 85, 165, 156, 125, 111, 112, 84,
	0, 145, 100, 104, 99, 134, 162, 163, 98, 184,
	89, 174, 87, 90, 173, 132, 160, 166, 126, 123,
	86, 164, 124, 122, 114, 102, 108, 139, 121, 140,
	109, 129, 128, 130, 0, 339, 0, 155, 171, 185,
	92, 354, 414, 177, 178, 179, 180, 181, 0, 0,
	93, 105, 131, 91, 110, 152, 113, 120, 144, 183,
	136, 149, 96, 170, 153, 350, 353, 348, 349, 387,
	388, 424, 425, 426, 405, 345, 0, 351, 352, 0,
	409, 390, 81, 0, 117, 182, 143, 103, 172, 418,
	408, 0, 378, 421, 356, 370, 429, 371, 372, 400,
	342, 386, 135, 368, 0, 359, 337, 365, 338, 357,
	380, 101, 383, 355, 410, 389, 420, 116, 427, 118,
	394, 0, 154, 127, 402, 0, 0, 382, 412, 384,
	406, 377, 401, 347, 393, 422, 369, 398, 423, 0,
	0, 0, 79, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 0, 396, 417, 367, 397, 399, 336, 395,
	0, 340, 343, 428, 415, 362, 363, 0, 0, 0,
	0, 0, 0, 0, 381, 385, 403, 375, 0, 0,
	0, 0, 0, 0, 0, 0, 360, 0, 392, 0,
	0, 0, 344, 341, 0, 0, 379, 0, 0, 0,
	346, 0, 361, 404, 0, 335, 407, 413, 376, 200,
	416, 374, 373, 419, 141, 0, 157, 107, 115, 82,
	88, 0, 106, 133, 146, 150, 411, 358, 366, 97,
	364, 148, 137, 169, 391, 138, 147, 119, 161, 142,
	168, 201, 176, 159, 175, 83, 158, 167, 95, 151,
	85, 165, 156, 125, 111, 112, 84, 0, 145, 100,
	104, 99, 134, 162, 163, 98, 184, 89, 174, 87,
	90, 173, 132, 160, 166, 126, 123, 86, 164, 124,
	122, 114, 102, 108, 139, 121, 140, 109, 129, 128,
	130, 0, 339, 0, 155, 171, 185, 92, 354, 414,
	177, 178, 179, 180, 181, 0, 0, 93, 105, 131,
	91, 110, 152, 113, 120, 144, 183, 136, 149, 96,
	170, 153, 350, 353, 348, 349, 387, 388, 424, 425,
	426, 405, 345, 0, 351, 352, 0, 409, 390, 81,
	0, 117, 182, 143, 103, 172, 418, 408, 0, 378,
	421, 356, 370, 429, 371, 372, 400, 342, 386, 135,
	368, 0, 359, 337, 365, 338, 357, 380, 101, 383,
	355, 410, 389, 420, 116, 427, 118, 394, 0, 154,
	127, 402, 0, 0, 382, 412, 384, 406, 377, 401,
	347, 393, 422, 369, 398, 423, 0, 0, 0, 255,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 0,
	396, 417, 367, 397, 399, 336, 395, 0, 340, 343,
	428, 415, 362, 363, 0, 0, 0, 0, 0, 0,
	0, 381, 385, 403, 375, 0, 0, 0, 0, 0,
	0, 0, 0, 360, 0, 392, 0, 0, 0, 344,
	341, 0, 0, 379, 0, 0, 0, 346, 0, 361,
	404, 0, 335, 407, 413, 376, 200, 416, 374, 373,
	419, 141, 0, 157, 107, 115, 82, 88, 0, 106,
	133, 146, 150, 411, 358, 366, 97, 364, 148, 137,
	169, 391, 138, 147, 119, 161, 142, 168, 201, 176,
	159, 175, 83, 158, 167, 95, 151, 85, 165, 156,
	125, 111, 112, 84, 0, 145, 100, 104, 99, 134,
	162, 163, 98, 184, 89, 174, 87, 90, 173, 132,
	160, 166, 126, 123, 86, 164, 124, 122, 114, 102,
	108, 139, 121, 140, 109, 129, 128, 130, 0, 339,
	0, 155, 171, 185, 92, 354, 414, 177, 178, 179,
	180, 181, 0, 0, 93, 105, 131, 91, 110, 152,
	113, 120, 144, 183, 136, 149, 96, 170, 153, 350,
	353, 348, 349, 387, 388, 424, 425, 426, 405, 345,
	0, 351, 352, 0, 409, 390, 81, 0, 117, 182,
	143, 103, 172, 418, 408, 0, 378, 421, 356, 370,
	429, 371, 372, 400, 342, 386, 135, 368, 0, 359,
	337, 365, 338, 357, 380, 101, 383, 355, 410, 389,
	420, 116, 427, 118, 394, 0, 154, 127, 402, 0,
	0, 382, 412, 384, 406, 377, 401, 347, 393, 422,
	369, 398, 423, 0, 0, 0, 79, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 0, 396, 417, 367,
	397, 399, 336, 395, 0, 340, 343, 428, 415, 362,
	363, 0, 0, 0, 0, 0, 0, 0, 381, 385,
	403, 375, 0, 0, 0, 0, 0, 0, 0, 0,
	360, 0, 392, 0, 0, 0, 344, 341, 0, 0,
	379, 0, 0, 0, 346, 0, 361, 404, 0, 335,
	407, 413, 376, 200, 416, 374, 373, 419, 141, 0,
	157, 107, 115, 82, 88, 0, 106, 133, 146, 150,
	411, 358, 366, 97, 364, 148, 137, 169, 391, 138,
	147, 119, 161, 142, 168, 201, 176, 159, 175, 83,
	158, 167, 95, 151, 85, 165, 156, 125, 111, 112,
	84, 0, 145, 100, 104, 99, 134, 162, 163, 98,
	184, 89, 174, 87, 333, 173, 132, 160, 166, 126,
	123, 86, 164, 124, 122, 114, 102, 108, 139, 121,
	140, 109, 129, 128, 130, 0, 339, 0, 155, 171,
	185, 92, 354, 414, 177, 178, 179, 180, 181, 0,
	0, 93, 105, 334, 332, 110, 152, 113, 120, 144,
	183, 136, 149, 96, 170, 153, 350, 353, 348, 349,
	387, 388, 424, 425, 426, 405, 345, 0, 351, 352,
	0, 409, 390, 81, 0, 117, 182, 143, 103, 172,
	418, 408, 0, 378, 421, 356, 370, 429, 371, 372,
	400, 342, 386, 135, 368, 0, 359, 337, 365, 338,
	357, 380, 101, 383, 355, 410, 389, 420, 116, 427,
	118, 394, 0, 154, 127, 402, 0, 0, 382, 412,
	384, 406, 377, 401, 347, 393, 422, 369, 398, 423,
	0, 0, 0, 198, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 0, 396, 417, 367, 397, 399, 336,
	395, 0, 340, 343, 428, 415, 362, 363, 0, 0,
	0, 0, 0, 0, 0, 381, 385, 403, 375, 0,
	0, 0, 0, 0, 0, 0, 0, 360, 0, 392,
	0, 0, 0, 344, 341, 0, 0, 379, 0, 0,
	0, 346, 0, 361, 404, 0, 335, 407, 413, 376,
	200, 416, 374, 373, 419, 141, 0, 157, 107, 115,
	82, 88, 0, 106, 133, 146, 150, 411, 358, 366,
	97, 364, 148, 137, 169, 391, 138, 147, 119, 161,
	142, 168, 201, 176, 159, 175, 83, 158, 167, 95,
	151, 85, 165, 156, 125, 111, 112, 84, 0, 145,
	100, 104, 99, 134, 162, 163, 98, 184, 89, 174,
	87, 90, 173, 132, 160, 166, 126, 123, 86, 164,
	124, 122, 114, 102, 108, 139, 121, 140, 109, 129,
	128, 130, 0, 339, 0, 155, 171, 185, 92, 354,
	414, 177, 178, 179, 180, 181, 0, 0, 93, 105,
	131, 91, 110, 152, 113, 120, 144, 183, 136, 149,
	96, 170, 153, 350, 353, 348, 349, 387, 388, 424,
	425, 426, 405, 345, 0, 351, 352, 0, 409, 390,
	81, 0, 117, 182, 143, 103, 172, 418, 408, 0,
	378, 421, 356, 370, 429, 371, 372, 400, 342, 386,
	135, 368, 0, 359, 337, 365, 338, 357, 380, 101,
	383, 355, 410, 389, 420, 116, 427, 118, 394, 0,
	154, 127, 402, 0, 0, 382, 412, 384, 406, 377,
	401, 347, 393, 422, 369, 398, 423, 0, 0, 0,
	79, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	0, 396, 417, 367, 397, 399, 336, 395, 0, 340,
	343, 428, 415, 362, 363, 0, 0, 0, 0, 0,
	0, 0, 381, 385, 403, 375, 0, 0, 0, 0,
	0, 0, 0, 0, 360, 0, 392, 0, 0, 0,
	344, 341, 0, 0, 379, 0, 0, 0, 346, 0,
	361, 404, 0, 335, 407, 413, 376, 200, 416, 374,
	373, 419, 141, 0, 157, 107, 115, 82, 88, 0,
	106, 133, 146, 150, 411, 358, 366, 97, 364, 148,
	137, 169, 391, 138, 147, 119, 161, 142, 168, 201,
	176, 159, 175, 83, 158, 615, 95, 151, 85, 165,
	156, 125, 111, 112, 84, 0, 145, 100, 104, 99,
	134, 162, 163, 98, 184, 89, 174, 87, 333, 173,
	132, 160, 166, 126, 123, 86, 164, 124, 122, 114,
	102, 108, 139, 121, 140, 109, 129, 128, 130, 0,
	339, 0, 155, 171, 185, 92, 354, 414, 177, 178,
	179, 180, 181, 0, 0, 93, 105, 334, 332, 110,
	152, 113, 120, 144, 183, 136, 149, 96, 170, 153,
	350, 353, 348, 349, 387, 388, 424, 425, 426, 405,
	345, 0, 351, 352, 0, 409, 390, 81, 0, 117,
	182, 143, 103, 172, 418, 408, 0, 378, 421, 356,
	370, 429, 371, 372, 400, 342, 386, 135, 368, 0,
	359, 337, 365, 338, 357, 380, 101, 383, 355, 410,
	389, 420, 116, 427, 118, 394, 0, 154, 127, 402,
	0, 0, 382, 412, 384, 406, 377, 401, 347, 393,
	422, 369, 398, 423, 0, 0, 0, 79, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 0, 396, 417,
	367, 397, 399, 336, 395, 0, 340, 343, 428, 415,
	362, 363, 0, 0, 0, 0, 0, 0, 0, 381,
	385, 403, 375, 0, 0, 0, 0, 0, 0, 0,
	0, 360, 0, 392, 0, 0, 0, 344, 341, 0,
	0, 379, 0, 0, 0, 346, 0, 361, 404, 0,
	335, 407, 413, 376, 200, 416, 374, 373, 419, 141,
	0, 157, 107, 115, 82, 88, 0, 106, 133, 146,
	150, 411, 358, 366, 97, 364, 148, 137, 169, 391,
	138, 147, 119, 161, 142, 168, 201, 176, 159, 175,
	83, 158, 324, 95, 151, 85, 165, 156, 125, 111,
	112, 84, 0, 145, 100, 104, 99, 134, 162, 163,
	98, 184, 89, 174, 87, 333, 173, 132, 160, 166,
	126, 123, 86, 164, 124, 122, 114, 102, 108, 139,
	121, 140, 109, 129, 128, 130, 0, 339, 0, 155,
	171, 185, 92, 354, 414, 177, 178, 179, 180, 181,
	0, 0, 93, 105, 334, 332, 327, 326, 113, 120,
	144, 183, 136, 149, 96, 170, 153, 350, 353, 348,
	349, 387, 388, 424, 425, 426, 405, 345, 0, 351,
	352, 0, 409, 390, 81, 0, 117, 182, 143, 103,
	172, 135, 0, 0, 0, 0, 257, 0, 0, 0,
	101, 0, 254, 0, 0, 0, 116, 297, 118, 0,
	0, 154, 127, 0, 0, 0, 0, 0, 288, 289,
	0, 0, 0, 0, 0, 0, 840, 0, 52, 0,
	0, 255, 276, 275, 278, 279, 280, 281, 0, 0,
	94, 277, 282, 283, 284, 841, 0, 0, 252, 269,
	0, 296, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 266, 267, 0, 0, 0, 0, 308, 0, 268,
	0, 0, 263, 264, 265, 270, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 200, 0,
	0, 306, 0, 141, 0, 157, 107, 115, 82, 88,
	0, 106, 133, 146, 150, 0, 0, 0, 97, 0,
	148, 137, 169, 0, 138, 147, 119, 161, 142, 168,
	201, 176, 159, 175, 83, 158, 167, 95, 151, 85,
	165, 156, 125, 111, 112, 84, 0, 145, 100, 104,
	99, 134, 162, 163, 98, 184, 89, 174, 87, 90,
	173, 132, 160, 166, 126, 123, 86, 164, 124, 122,
	114, 102, 108, 139, 121, 140, 109, 129, 128, 130,
	0, 0, 0, 155, 171, 185, 92, 0, 0, 177,
	178, 179, 180, 181, 0, 0, 93, 105, 131, 91,
	110, 152, 113, 120, 144, 183, 136, 149, 96, 170,
	153, 298, 307, 304, 305, 302, 303, 301, 300, 299,
	309, 290, 291, 292, 293, 295, 0, 294, 81, 0,
	117, 182, 143, 103, 172, 135, 0, 0, 777, 0,
	257, 0, 0, 0, 101, 0, 254, 0, 0, 0,
	116, 297, 118, 0, 0, 154, 127, 0, 0, 0,
	0, 0, 288, 289, 0, 0, 0, 0, 0, 0,
	0, 0, 52, 0, 0, 255, 276, 275, 278, 279,
	280, 281, 0, 0, 94, 277, 282, 283, 284, 0,
	0, 0, 252, 269, 0, 296, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 267, 248, 0, 0,
	0, 308, 0, 268, 0, 0, 263, 264, 265, 270,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 200, 0, 0, 306, 0, 141, 0, 157,
	107, 115, 82, 88, 0, 106, 133, 146, 150, 0,
	0, 0, 97, 0, 148, 137, 169, 0, 138, 147,
	119, 161, 142, 168, 201, 176, 159, 175, 83, 158,
	167, 95, 151, 85, 165, 156, 125, 111, 112, 84,
	0, 145, 100, 104, 99, 134, 162, 163, 98, 184,
	89, 174, 87, 90, 173, 132, 160, 166, 126, 123,
	86, 164, 124, 122, 114, 102, 108, 139, 121, 140,
	109, 129, 128, 130, 0, 0, 0, 155, 171, 185,
	92, 0, 0, 177, 178, 179, 180, 181, 0, 0,
	93, 105, 131, 91, 110, 152, 113, 120, 144, 183,
	136, 149, 96, 170, 153, 298, 307, 304, 305, 302,
	303, 301, 300, 299, 309, 290, 291, 292, 293, 295,
	0, 294, 81, 0, 117, 182, 143, 103, 172, 135,
	0, 0, 0, 0, 257, 0, 0, 0, 101, 0,
	254, 0, 0, 0, 116, 297, 118, 0, 0, 154,
	127, 0, 0, 0, 0, 0, 288, 289, 0, 0,
	0, 0, 0, 0, 0, 0, 52, 0, 484, 255,
	276, 275, 278, 279, 280, 281, 0, 0, 94, 277,
	282, 283, 284, 0, 0, 0, 252, 269, 0, 296,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 266,
	267, 0, 0, 0, 0, 308, 0, 268, 0, 0,
	263, 264, 265, 270, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 200, 0, 0, 306,
	0, 141, 0, 157, 107, 115, 82, 88, 0, 106,
	133, 146, 150, 0, 0, 0, 97, 0, 148, 137,
	169, 0, 138, 147, 119, 161, 142, 168, 201, 176,
	159, 175, 83, 158, 167, 95, 151, 85, 165, 156,
	125, 111, 112, 84, 0, 145, 100, 104, 99, 134,
	162, 163, 98, 184, 89, 174, 87, 90, 173, 132,
	160, 166, 126, 123, 86, 164, 124, 122, 114, 102,
	108, 139, 121, 140, 109, 129, 128, 130, 0, 0,
	0, 155, 171, 185, 92, 0, 0, 177, 178, 179,
	180, 181, 0, 0, 93, 105, 131, 91, 110, 152,
	113, 120, 144, 183, 136, 149, 96, 170, 153, 298,
	307, 304, 305, 302, 303, 301, 300, 299, 309, 290,
	291, 292, 293, 295, 0, 294, 81, 0, 117, 182,
	143, 103, 172, 135, 0, 0, 0, 0, 257, 0,
	0, 0, 101, 0, 254, 0, 0, 0, 116, 297,
	118, 0, 0, 154, 127, 0, 0, 0, 0, 0,
	288, 289, 0, 0, 0, 0, 0, 0, 0, 0,
	52, 0, 0, 255, 276, 275, 278, 279, 280, 281,
	0, 0, 94, 277, 282, 283, 284, 0, 0, 0,
	252, 269, 0, 296, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 266, 267, 248, 0, 0, 0, 308,
	0, 268, 0, 0, 263, 264, 265, 270, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	200, 0, 0, 306, 0, 141, 0, 157, 107, 115,
	82, 88, 0, 106, 133, 146, 150, 0, 0, 0,
	97, 0, 148, 137, 169, 0, 138, 147, 119, 161,
	142, 168, 201, 176, 159, 175, 83, 158, 167, 95,
	151, 85, 165, 156, 125, 111, 112, 84, 0, 145,
	100, 104, 99, 134, 162, 163, 98, 184, 89, 174,
	87, 90, 173, 132, 160, 166, 126, 123, 86, 164,
	124, 122, 114, 102, 108, 139, 121, 140, 109, 129,
	128, 130, 0, 0, 0, 155, 171, 185, 92, 0,
	0, 177, 178, 179, 180, 181, 0, 0, 93, 105,
	131, 91, 110, 152, 113, 120, 144, 183, 136, 149,
	96, 170, 153, 298, 307, 304, 305, 302, 303, 301,
	300, 299, 309, 290, 291, 292, 293, 295, 23, 294,
	81, 0, 117, 182, 143, 103, 172, 0, 0, 0,
	135, 0, 0, 0, 0, 257, 0, 0, 0, 101,
	0, 254, 0, 0, 0, 116, 297, 118, 0, 0,
	154, 127, 0, 0, 0, 0, 0, 288, 289, 0,
	0, 0, 0, 0, 0, 0, 0, 52, 0, 0,
	255, 276, 275, 278, 279, 280, 281, 0, 0, 94,
	277, 282, 283, 284, 0, 0, 0, 252, 269, 0,
	296, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	266, 267, 0, 0, 0, 0, 308, 0, 268, 0,
	0, 263, 264, 265, 270, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 200, 0, 0,
	306, 0, 141, 0, 157, 107, 115, 82, 88, 0,
	106, 133, 146, 150, 0, 0, 0, 97, 0, 148,
	137, 169, 0, 138, 147, 119, 161, 142, 168, 201,
	176, 159, 175, 83, 158, 167, 95, 151, 85, 165,
	156, 125, 111, 112, 84, 0, 145, 100, 104, 99,
	134, 162, 163, 98, 184, 89, 174, 87, 90, 173,
	132, 160, 166, 126, 123, 86, 164, 124, 122, 114,
	102, 108, 139, 121, 140, 109, 129, 128, 130, 0,
	0, 0, 155, 171, 185, 92, 0, 0, 177, 178,
	179, 180, 181, 0, 0, 93, 105, 131, 91, 110,
	152, 113, 120, 144, 183, 136, 149, 96, 170, 153,
	298, 307, 304, 305, 302, 303, 301, 300, 299, 309,
	290, 291, 292, 293, 295, 0, 294, 81, 0, 117,
	182, 143, 103, 172, 135, 0, 0, 0, 0, 257,
	0, 0, 0, 101, 0, 254, 0, 0, 0, 116,
	297, 118, 0, 0, 154, 127, 0, 0, 0, 0,
	0, 288, 289, 0, 0, 0, 0, 0, 0, 0,
	0, 52, 0, 0, 255, 276, 275, 278, 279, 280,
	281, 0, 0, 94, 277, 282, 283, 284, 0, 0,
	0, 252, 269, 0, 296, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 266, 267, 0, 0, 0, 0,
	308, 0, 268, 0, 0, 263, 264, 265, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 200, 0, 0, 306, 0, 141, 0, 157, 107,
	115, 82, 88, 0, 106, 133, 146, 150, 0, 0,
	0, 97, 0, 148, 137, 169, 0, 138, 147, 119,
	161, 142, 168, 201, 176, 159, 175, 83, 158, 167,
	95, 151, 85, 165, 156, 125, 111, 112, 84, 0,
	145, 100, 104, 99, 134, 162, 163, 98, 184, 89,
	174, 87, 90, 173, 132, 160, 166, 126, 123, 86,
	164, 124, 122, 114, 102, 108, 139, 121, 140, 109,
	129, 128, 130, 0, 0, 0, 155, 171, 185, 92,
	0, 0, 177, 178, 179, 180, 181, 0, 0, 93,
	105, 131, 91, 110, 152, 113, 120, 144, 183, 136,
	149, 96, 170, 153, 298, 307, 304, 305, 302, 303,
	301, 300, 299, 309, 290, 291, 292, 293, 295, 135,
	294, 81, 0, 117, 182, 143, 103, 172, 101, 0,
	0, 0, 0, 0, 116, 297, 118, 0, 0, 154,
	127, 0, 0, 0, 0, 0, 288, 289, 0, 0,
	0, 0, 0, 0, 0, 0, 52, 0, 0, 255,
	276, 275, 278, 279, 280, 281, 0, 0, 94, 277,
	282, 283, 284, 0, 0, 0, 0, 269, 0, 296,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 266,
	267, 0, 0, 0, 0, 308, 0, 268, 0, 0,
	263, 264, 265, 270, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 200, 0, 0, 306,
	0, 141, 0, 157, 107, 115, 82, 88, 0, 106,
	133, 146, 150, 0, 0, 0, 97, 0, 148, 137,
	169, 1363, 138, 147, 119, 161, 142, 168, 201, 176,
	159, 175, 83, 158, 167, 95, 151, 85, 165, 156,
	125, 111, 112, 84, 0, 145, 100, 104, 99, 134,
	162, 163, 98, 184, 89, 174, 87, 90, 173, 132,
	160, 166, 126, 123, 86, 164, 124, 122, 114, 102,
	108, 139, 121, 140, 109, 129, 128, 130, 0, 0,
	0, 155, 171, 185, 92, 0, 0, 177, 178, 179,
	180, 181, 0, 0, 93, 105, 131, 91, 110, 152,
	113, 120, 144, 183, 136, 149, 96, 170, 153, 298,
	307, 304, 305, 302, 303, 301, 300, 299, 309, 290,
	291, 292, 293, 295, 135, 294, 81, 0, 117, 182,
	143, 103, 172, 101, 0, 0, 0, 0, 0, 116,
	297, 118, 0, 0, 154, 127, 0, 0, 0, 0,
	0, 288, 289, 0, 0, 0, 0, 0, 0, 0,
	0, 52, 0, 0, 255, 276, 275, 278, 279, 280,
	281, 0, 0, 94, 277, 282, 283, 284, 0, 0,
	0, 0, 269, 0, 296, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 266, 267, 0, 0, 0, 0,
	308, 0, 268, 0, 0, 263, 264, 265, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 200, 0, 0, 306, 0, 141, 0, 157, 107,
	115, 82, 88, 0, 106, 133, 146, 150, 0, 0,
	0, 97, 0, 148, 137, 169, 0, 138, 147, 119,
	161, 142, 168, 201, 176, 159, 175, 83, 158, 167,
	95, 151, 85, 165, 156, 125, 111, 112, 84, 0,
	145, 100, 104, 99, 134, 162, 163, 98, 184, 89,
	174, 87, 90, 173, 132, 160, 166, 126, 123, 86,
	164, 124, 122, 114, 102, 108, 139, 121, 140, 109,
	129, 128, 130, 0, 0, 0, 155, 171, 185, 92,
	0, 0, 177, 178, 179, 180, 181, 0, 0, 93,
	105, 131, 91, 110, 152, 113, 120, 144, 183, 136,
	149, 96, 170, 153, 298, 307, 304, 305, 302, 303,
	301, 300, 299, 309, 290, 291, 292, 293, 295, 135,
	294, 81, 0, 117, 182, 143, 103, 172, 101, 0,
	0, 0, 0, 0, 116, 0, 118, 0, 0, 154,
	127, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 79,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 519, 518, 528, 529, 521,
	522, 523, 524, 525, 526, 527, 520, 0, 0, 530,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 200, 0, 0, 0,
	0, 141, 0, 157, 107, 115, 82, 88, 0, 106,
	133, 146, 150, 0, 0, 0, 97, 0, 148, 137,
	169, 0, 138, 147, 119, 161, 142, 168, 201, 176,
	159, 175, 83, 158, 167, 95, 151, 85, 165, 156,
	125, 111, 112, 84, 0, 145, 100, 104, 99, 134,
	162, 163, 98, 184, 89, 174, 87, 90, 173, 132,
	160, 166, 126, 123, 86, 164, 124, 122, 114, 102,
	108, 139, 121, 140, 109, 129, 128, 130, 0, 0,
	0, 155, 171, 185, 92, 0, 0, 177, 178, 179,
	180, 181, 0, 0, 93, 105, 131, 91, 110, 152,
	113, 120, 144, 183, 136, 149, 96, 170, 153, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 135, 0,
	0, 0, 507, 0, 0, 0, 81, 101, 117, 182,
	143, 103, 172, 116, 0, 118, 0, 0, 154, 127,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 79, 0,
	509, 0, 0, 0, 0, 0, 0, 94, 0, 0,
	0, 0, 0, 504, 503, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	505, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 200, 0, 0, 0, 0,
	141, 0, 157, 107, 115, 82, 88, 0, 106, 133,
	146, 150, 0, 0, 0, 97, 0, 148, 137, 169,
	0, 138, 147, 119, 161, 142, 168, 201, 176, 159,
	175, 83, 158, 167, 95, 151, 85, 165, 156, 125,
	111, 112, 84, 0, 145, 100, 104, 99, 134, 162,
	163, 98, 184, 89, 174, 87, 90, 173, 132, 160,
	166, 126, 123, 86, 164, 124, 122, 114, 102, 108,
	139, 121, 140, 109, 129, 128, 130, 0, 0, 0,
	155, 171, 185, 92, 0, 0, 177, 178, 179, 180,
	181, 0, 0, 93, 105, 131, 91, 110, 152, 113,
	120, 144, 183, 136, 149, 96, 170, 153, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 135, 0, 0,
	0, 604, 0, 0, 0, 81, 101, 117, 182, 143,
	103, 172, 116, 0, 118, 0, 0, 154, 127, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 198, 0, 606,
	0, 0, 0, 0, 0, 0, 94, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 200, 0, 0, 0, 0, 141,
	0, 157, 107, 115, 82, 88, 0, 106, 133, 146,
	150, 0, 0, 0, 97, 0, 148, 137, 169, 0,
	138, 147, 119, 161, 142, 168, 201, 176, 159, 175,
	83, 158, 167, 95, 151, 85, 165, 156, 125, 111,
	112, 84, 0, 145, 100, 104, 99, 134, 162, 163,
	98, 184, 89, 174, 87, 90, 173, 132, 160, 166,
	126, 123, 86, 164, 124, 122, 114, 102, 108, 139,
	121, 140, 109, 129, 128, 130, 0, 0, 0, 155,
	171, 185, 92, 0, 0, 177, 178, 179, 180, 181,
	0, 0, 93, 105, 131, 91, 110, 152, 113, 120,
	144, 183, 136, 149, 96, 170, 153, 0, 0, 0,
	23, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 135, 0, 81, 0, 117, 182, 143, 103,
	172, 101, 0, 0, 0, 0, 0, 116, 0, 118,
	0, 0, 154, 127, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 52,
	0, 0, 79, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 200,
	0, 0, 0, 0, 141, 0, 157, 107, 115, 82,
	88, 0, 106, 133, 146, 150, 0, 0, 0, 97,
	0, 148, 137, 169, 0, 138, 147, 119, 161, 142,
	168, 201, 176, 159, 175, 83, 158, 167, 95, 151,
	85, 165, 156, 125, 111, 112, 84, 0, 145, 100,
	104, 99, 134, 162, 163, 98, 184, 89, 174, 87,
	90, 173, 132, 160, 166, 126, 123, 86, 164, 124,
	122, 114, 102, 108, 139, 121, 140, 109, 129, 128,
	130, 0, 0, 0, 155, 171, 185, 92, 0, 0,
	177, 178, 179, 180, 181, 0, 0, 93, 105, 131,
	91, 110, 152, 113, 120, 144, 183, 136, 149, 96,
	170, 153, 0, 0, 0, 23, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 135, 0, 81,
	0, 117, 182, 143, 103, 172, 101, 0, 0, 0,
	0, 0, 116, 0, 118, 0, 0, 154, 127, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 52, 0, 0, 198, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 200, 0, 0, 0, 0, 141,
	0, 157, 107, 115, 82, 88, 0, 106, 133, 146,
	150, 0, 0, 0, 97, 0, 148, 137, 169, 0,
	138, 147, 119, 161, 142, 168, 201, 176, 159, 175,
	83, 158, 167, 95, 151, 85, 165, 156, 125, 111,
	112, 84, 0, 145, 100, 104, 99, 134, 162, 163,
	98, 184, 89, 174, 87, 90, 173, 132, 160, 166,
	126, 123, 86, 164, 124, 122, 114, 102, 108, 139,
	121, 140, 109, 129, 128, 130, 0, 0, 0, 155,
	171, 185, 92, 0, 0, 177, 178, 179, 180, 181,
	0, 0, 93, 105, 131, 91, 110, 152, 113, 120,
	144, 183, 136, 149, 96, 170, 153, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 135, 0, 0, 0,
	0, 0, 0, 0, 81, 101, 117, 182, 143, 103,
	172, 116, 0, 118, 0, 0, 154, 127, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 79, 0, 0, 727,
	0, 0, 728, 0, 0, 94, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 200, 0, 0, 0, 0, 141, 0,
	157, 107, 115, 82, 88, 0, 106, 133, 146, 150,
	0, 0, 0, 97, 0, 148, 137, 169, 0, 138,
	147, 119, 161, 142, 168, 201, 176, 159, 175, 83,
	158, 167, 95, 151, 85, 165, 156, 125, 111, 112,
	84, 0, 145, 100, 104, 99, 134, 162, 163, 98,
	184, 89, 174, 87, 90, 173, 132, 160, 166, 126,
	123, 86, 164, 124, 122, 114, 102, 108, 139, 121,
	140, 109, 129, 128, 130, 0, 0, 0, 155, 171,
	185, 92, 0, 0, 177, 178, 179, 180, 181, 0,
	0, 93, 105, 131, 91, 110, 152, 113, 120, 144,
	183, 136, 149, 96, 170, 153, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 135, 0, 81, 0, 117, 182, 143, 103, 172,
	101, 0, 624, 0, 0, 0, 116, 0, 118, 0,
	0, 154, 127, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 79, 0, 623, 0, 0, 0, 0, 0, 0,
	94, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 200, 0,
	0, 0, 0, 141, 0, 157, 107, 115, 82, 88,
	0, 106, 133, 146, 150, 0, 0, 0, 97, 0,
	148, 137, 169, 0, 138, 147, 119, 161, 142, 168,
	201, 176, 159, 175, 83, 158, 167, 95, 151, 85,
	165, 156, 125, 111, 112, 84, 0, 145, 100, 104,
	99, 134, 162, 163, 98, 184, 89, 174, 87, 90,
	173, 132, 160, 166, 126, 123, 86, 164, 124, 122,
	114, 102, 108, 139, 121, 140, 109, 129, 128, 130,
	0, 0, 0, 155, 171, 185, 92, 0, 0, 177,
	178, 179, 180, 181, 0, 0, 93, 105, 131, 91,
	110, 152, 113, 120, 144, 183, 136, 149, 96, 170,
	153, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	135, 0, 0, 0, 604, 0, 0, 0, 81, 101,
	117, 182, 143, 103, 172, 116, 0, 118, 0, 0,
	154, 127, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	198, 0, 606, 0, 0, 0, 0, 0, 0, 94,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 200, 0, 0,
	0, 0, 141, 0, 157, 107, 115, 82, 88, 0,
	106, 133, 146, 150, 0, 0, 0, 97, 0, 148,
	137, 169, 0, 602, 147, 119, 161, 142, 168, 201,
	176, 159, 175, 83, 158, 167, 95, 151, 85, 165,
	156, 125, 111, 112, 84, 0, 145, 100, 104, 99,
	134, 162, 163, 98, 184, 89, 174, 87, 90, 173,
	132, 160, 166, 126, 123, 86, 164, 124, 122, 114,
	102, 108, 139, 121, 140, 109, 129, 128, 130, 0,
	0, 0, 155, 171, 185, 92, 0, 0, 177, 178,
	179, 180, 181, 0, 0, 93, 105, 131, 91, 110,
	152, 113, 120, 144, 183, 136, 149, 96, 170, 153,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 135,
	0, 0, 0, 0, 0, 0, 0, 81, 101, 117,
	182, 143, 103, 172, 116, 0, 118, 0, 0, 154,
	127, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 52, 0, 0, 198,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 200, 0, 0, 0,
	0, 141, 0, 157, 107, 115, 82, 88, 0, 106,
	133, 146, 150, 0, 0, 0, 97, 0, 148, 137,
	169, 0, 138, 147, 119, 161, 142, 168, 201, 176,
	159, 175, 83, 158, 167, 95, 151, 85, 165, 156,
	125, 111, 112, 84, 0, 145, 100, 104, 99, 134,
	162, 163, 98, 184, 89, 174, 87, 90, 173, 132,
	160, 166, 126, 123, 86, 164, 124, 122, 114, 102,
	108, 139, 121, 140, 109, 129, 128, 130, 0, 0,
	0, 155, 171, 185, 92, 0, 0, 177, 178, 179,
	180, 181, 0, 0, 93, 105, 131, 91, 110, 152,
	113, 120, 144, 183, 136, 149, 96, 170, 153, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 135, 0,
	0, 0, 0, 0, 0, 0, 81, 101, 117, 182,
	143, 103, 172, 116, 0, 118, 0, 0, 154, 127,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 198, 0,
	606, 0, 0, 0, 0, 0, 0, 94, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 200, 0, 0, 0, 0,
	141, 0, 157, 107, 115, 82, 88, 0, 106, 133,
	146, 150, 0, 0, 0, 97, 0, 148, 137, 169,
	0, 138, 147, 119, 161, 142, 168, 201, 176, 159,
	175, 83, 158, 167, 95, 151, 85, 165, 156, 125,
	111, 112, 84, 0, 145, 100, 104, 99, 134, 162,
	163, 98, 184, 89, 174, 87, 90, 173, 132, 160,
	166, 126, 123, 86, 164, 124, 122, 114, 102, 108,
	139, 121, 140, 109, 129, 128, 130, 0, 0, 0,
	155, 171, 185, 92, 0, 0, 177, 178, 179, 180,
	181, 0, 0, 93, 105, 131, 91, 110, 152, 113,
	120, 144, 183, 136, 149, 96, 170, 153, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 135, 0, 0,
	0, 0, 0, 0, 0, 81, 101, 117, 182, 143,
	103, 172, 116, 0, 118, 0, 0, 154, 127, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 79, 0, 509,
	0, 0, 0, 0, 0, 0, 94, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 200, 0, 0, 0, 0, 141,
	0, 157, 107, 115, 82, 88, 0, 106, 133, 146,
	150, 0, 0, 0, 97, 0, 148, 137, 169, 0,
	138, 147, 119, 161, 142, 168, 201, 176, 159, 175,
	83, 158, 167, 95, 151, 85, 165, 156, 125, 111,
	112, 84, 0, 145, 100, 104, 99, 134, 162, 163,
	98, 184, 89, 174, 87, 90, 173, 132, 160, 166,
	126, 123, 86, 164, 124, 122, 114, 102, 108, 139,
	121, 140, 109, 129, 128, 130, 0, 0, 0, 155,
	171, 185, 92, 0, 0, 177, 178, 179, 180, 181,
	0, 0, 93, 105, 131, 91, 110, 152, 113, 120,
	144, 183, 136, 149, 96, 170, 153, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 135, 81, 0, 117, 182, 143, 103,
	172, 582, 101, 0, 0, 0, 0, 0, 116, 0,
	118, 0, 0, 154, 127, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 198, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	200, 0, 0, 0, 0, 141, 0, 157, 107, 115,
	82, 88, 0, 106, 133, 146, 150, 0, 0, 0,
	97, 0, 148, 137, 169, 0, 138, 147, 119, 161,
	142, 168, 201, 176, 159, 175, 83, 158, 167, 95,
	151, 85, 165, 156, 125, 111, 112, 84, 0, 145,
	100, 104, 99, 134, 162, 163, 98, 184, 89, 174,
	87, 90, 173, 132, 160, 166, 126, 123, 86, 164,
	124, 122, 114, 102, 108, 139, 121, 140, 109, 129,
	128, 130, 0, 0, 0, 155, 171, 185, 92, 0,
	0, 177, 178, 179, 180, 181, 0, 0, 93, 105,
	131, 91, 110, 152, 113, 120, 144, 183, 136, 149,
	96, 170, 153, 0, 0, 319, 0, 0, 0, 0,
	0, 0, 135, 0, 0, 0, 0, 0, 0, 0,
	81, 101, 117, 182, 143, 103, 172, 116, 0, 118,
	0, 0, 154, 127, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 198, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 200,
	0, 0, 0, 0, 141, 0, 157, 107, 115, 82,
	88, 0, 106, 133, 146, 150, 0, 0, 0, 97,
	0, 148, 137, 169, 0, 138, 147, 119, 161, 142,
	168, 201, 176, 159, 175, 83, 158, 167, 95, 151,
	85, 165, 156, 125, 111, 112, 84, 0, 145, 100,
	104, 99, 134, 162, 163, 98, 184, 89, 174, 87,
	90, 173, 132, 160, 166, 126, 123, 86, 164, 124,
	122, 114, 102, 108, 139, 121, 140, 109, 129, 128,
	130, 0, 0, 0, 155, 171, 185, 92, 0, 0,
	177, 178, 179, 180, 181, 0, 0, 93, 105, 131,
	91, 110, 152, 113, 120, 144, 183, 136, 149, 96,
	170, 153, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 135, 0, 0, 0, 0, 0, 0, 0, 81,
	101, 117, 182, 143, 103, 172, 116, 0, 118, 0,
	0, 154, 127, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 198, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 195, 0, 200, 0,
	0, 0, 0, 141, 0, 157, 107, 115, 82, 88,
	0, 106, 133, 146, 150, 0, 0, 0, 97, 0,
	148, 137, 169, 0, 138, 147, 119, 161, 142, 168,
	201, 176, 159, 175, 83, 158, 167, 95, 151, 85,
	165, 156, 125, 111, 112, 84, 0, 145, 100, 104,
	99, 134, 162, 163, 98, 184, 89, 174, 87, 90,
	173, 132, 160, 166, 126, 123, 86, 164, 124, 122,
	114, 102, 108, 139, 121, 140, 109, 129, 128, 130,
	0, 0, 0, 155, 171, 185, 92, 0, 0, 177,
	178, 179, 180, 181, 0, 0, 93, 105, 131, 91,
	110, 152, 113, 120, 144, 183, 136, 149, 96, 170,
	153, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	135, 0, 0, 0, 0, 0, 0, 0, 81, 101,
	117, 182, 143, 103, 172, 116, 0, 118, 0, 0,
	154, 127, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	79, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 200, 0, 0,
	0, 0, 141, 0, 157, 107, 115, 82, 88, 0,
	106, 133, 146, 150, 0, 0, 0, 97, 0, 148,
	137, 169, 0, 138, 147, 119, 161, 142, 168, 201,
	176, 159, 175, 83, 158, 167, 95, 151, 85, 165,
	156, 125, 111, 112, 84, 0, 145, 100, 104, 99,
	134, 162, 163, 98, 184, 89, 174, 87, 90, 173,
	132, 160, 166, 126, 123, 86, 164, 124, 122, 114,
	102, 108, 139, 121, 140, 109, 129, 128, 130, 0,
	0, 0, 155, 171, 185, 92, 0, 0, 177, 178,
	179, 180, 181, 0, 0, 93, 105, 131, 91, 110,
	152, 113, 120, 144, 183, 136, 149, 96, 170, 153,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 135,
	0, 0, 0, 0, 0, 0, 0, 81, 101, 117,
	182, 143, 103, 172, 116, 0, 118, 0, 0, 154,
	127, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 198,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 200, 0, 0, 0,
	0, 141, 0, 157, 107, 115, 82, 88, 0, 106,
	133, 146, 150, 0, 0, 0, 97, 0, 148, 137,
	169, 0, 138, 147, 119, 161, 142, 168, 201, 176,
	159, 175, 83, 158, 167, 95, 151, 85, 165, 156,
	125, 111, 112, 84, 0, 145, 100, 104, 99, 134,
	162, 163, 98, 184, 89, 174, 87, 90, 173, 132,
	160, 166, 126, 123, 86, 164, 124, 122, 114, 102,
	108, 139, 121, 140, 109, 129, 128, 130, 0, 0,
	0, 155, 171, 185, 92, 0, 0, 177, 178, 179,
	180, 181, 0, 0, 93, 105, 131, 91, 110, 152,
	113, 120, 144, 183, 136, 149, 96, 170, 153, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 135, 0,
	0, 0, 0, 0, 0, 0, 81, 101, 117, 182,
	143, 103, 172, 116, 0, 118, 0, 0, 154, 127,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 255, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 200, 0, 0, 0, 0,
	141, 0, 157, 107, 115, 82, 88, 0, 106, 133,
	146, 150, 0, 0, 0, 97, 0, 148, 137, 169,
	0, 138, 147, 119, 161, 142, 168, 201, 176, 159,
	175, 83, 158, 167, 95, 151, 85, 165, 156, 125,
	111, 112, 84, 0, 145, 100, 104, 99, 134, 162,
	163, 98, 184, 89, 174, 87, 90, 173, 132, 160,
	166, 126, 123, 86, 164, 124, 122, 114, 102, 108,
	139, 121, 140, 109, 129, 128, 130, 0, 0, 0,
	155, 171, 185, 92, 0, 0, 177, 178, 179, 180,
	181, 0, 0, 93, 105, 131, 91, 110, 152, 113,
	120, 144, 183, 136, 149, 96, 170, 153, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 81, 0, 117, 182, 143,
	103, 172,
}
var yyPact = [...]int{

	1447, -1000, -171, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 891, 935, -1000, -1000, -1000, -1000, -1000, -1000, 221,
	2124, 77, 100, 5, 10363, 99, 1541, 10821, -1000, 9,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -67, -68, 707,
	-1000, -1000, -1000, -1000, -1000, 890, 897, 714, 884, 784,
	-1000, 6165, 67, 9211, 10134, 5189, -1000, -1000, 234, 10821,
	94, 10821, -140, 10592, 61, 61, 61, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 97, 10821, -1000, 10821,
	57, 517, 57, 57, 57, 10821, -1000, 143, -1000, -1000,
	-1000, -1000, 10821, 511, 815, 75, 3133, 3133, 3133, 3133,
	14, 3133, -56, 737, 905, -1000, -1000, -1000, -1000, -1000,
	3133, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 421, 832, 6656, 6656, 891, -1000, 707,
	-1000, -1000, -1000, 843, -1000, -1000, 298, 911, -1000, 7590,
	142, -1000, 6656, 716, 654, -1000, -1000, 654, -1000, -1000,
	120, -1000, -1000, 7126, 7126, 7126, 7126, 7126, 7126, 7126,
	7126, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 654, -1000, 6412, 654, 654,
	654, 654, 654, 654, 654, 654, 6656, 654, 654, 654,
	654, 654, 654, 654, 654, 654, 654, 654, 654, 654,
	9905, 673, 695, -1000, -1000, -1000, 866, 8289, 8982, 10821,
	586, -1000, 670, 4932, -89, -1000, -1000, -1000, 225, 8753,
	-1000, -1000, -1000, 814, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	610, 10821, -1000, 2347, -1000, 503, 3133, 80, 721, 502,
	252, 500, 10821, 10821, 3133, 73, 10821, 864, 735, 10821,
	493, 479, -1000, 4675, -1000, 3133, 3133, 3133, 3133, 3133,
	3133, 3133, 3133, -1000, -1000, -1000, -1000, -1000, -1000, 3133,
	3133, -1000, 909, 258, -1000, -1000, -1000, -1000, 10821, 6656,
	-1000, -1000, -1000, -1000, -1000, -1000, 925, 178, 518, 140,
	672, -1000, 530, 890, 421, 784, 8518, 876, 727, -1000,
	-1000, 10821, -1000, 6656, 6656, 371, -1000, 9669, -1000, -1000,
	3647, 180, 7126, 306, 224, 7126, 7126, 7126, 7126, 7126,
	7126, 7126, 7126, 7126, 7126, 7126, 7126, 7126, 7126, 7126,
	391, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 474,
	-1000, 707, 504, 504, 160, 160, 160, 160, 160, 160,
	160, 7361, 5677, 421, 596, 275, 6412, 6165, 6165, 6656,
	6656, 11050, 11050, 6165, 876, 242, 275, 11050, -1000, 421,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 6165, 6165, 6165,
	6165, 29, 10821, -1000, 11050, 9211, 9211, 9211, 9211, 9211,
	-1000, 779, 755, -1000, 780, 749, 788, 10821, -1000, 593,
	8289, 177, 654, -1000, 9440, -1000, -1000, 29, 567, 9211,
	10821, -1000, -1000, 4418, 670, -89, 662, -1000, -87, -94,
	5433, 153, -1000, -1000, -1000, -1000, 2876, 199, 537, 263,
	-51, -1000, -1000, -1000, 688, -1000, 688, 688, 688, 688,
	-17, -17, -17, -17, -1000, -1000, -1000, -1000, -1000, 719,
	718, -1000, 688, 688, 688, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 717, 717, 717, 704, 704, 722, -1000, 10821, -160,
	464, 3133, 863, 3133, -1000, 74, -1000, 10821, -1000, -1000,
	10821, 3133, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 10821, 331, 10821,
	10821, -1000, 275, -1000, 801, 6656, 6656, 4161, 6656, -1000,
	-1000, -1000, 832, -1000, 876, 889, -1000, 808, 807, 727,
	6165, -1000, -1000, 180, 272, -1000, -1000, 395, -1000, -1000,
	-1000, -1000, 139, 654, -1000, 1718, -1000, -1000, -1000, -1000,
	306, 7126, 7126, 7126, 416, 1718, 1676, 757, 1749, 160,
	425, 425, 154, 154, 154, 154, 154, 326, 326, -1000,
	-1000, -1000, 421, -1000, -1000, -1000, 421, 6165, 665, -1000,
	-1000, 6656, -1000, 421, 573, 573, 362, 280, 667, -1000,
	136, 598, 573, 6165, 279, -1000, 6656, 421, -1000, 573,
	421, 573, 573, 664, 654, -1000, 681, -1000, 204, 695,
	713, 732, 1268, -1000, -1000, -1000, -1000, 752, -1000, 751,
	-1000, -1000, -1000, -1000, -1000, 92, 90, 87, 10592, -1000,
	904, 9211, 668, -1000, -1000, 662, -89, -100, -1000, -1000,
	-1000, -1000, 275, -1000, 414, 661, 2619, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 710, 451, -1000, 853, 173, 209,
	449, 850, -1000, -1000, -1000, 817, -1000, 270, -63, -1000,
	-1000, 360, -17, -17, -1000, -1000, 153, 813, 153, 153,
	153, 413, 413, -1000, -1000, -1000, -1000, 346, -1000, -1000,
	-1000, 322, -1000, 731, 10592, 3133, -1000, 3904, -1000, -1000,
	-1000, -1000, -1000, -1000, 282, 148, 226, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 28, -1000,
	3133, -1000, 258, -1000, 409, 6656, -1000, -1000, 799, 275,
	275, 132, -1000, -1000, 10821, -1000, -1000, -1000, -1000, 6165,
	591, -1000, -1000, -1000, 3390, 6165, -1000, 416, 1718, 653,
	-1000, 7126, 7126, -1000, -1000, 573, 6165, 275, -1000, -1000,
	-1000, 36, 391, 36, 7126, 7126, 4161, 7126, 7126, -153,
	600, 231, -1000, 6656, 210, -1000, -1000, -1000, -1000, -1000,
	729, 11050, 654, -1000, 8054, 10592, 891, 11050, 6656, 6656,
	-1000, -1000, 6656, 709, -1000, 6656, -1000, -1000, -1000, 654,
	654, 654, 528, -1000, 891, 668, -1000, -1000, -1000, -96,
	-112, -1000, -1000, -1000, 2876, -1000, 2876, 10592, 45, -1000,
	449, 449, -1000, -1000, -1000, 708, 728, 96, -1000, -1000,
	-1000, 525, 153, 153, -1000, 200, -1000, -1000, -1000, 562,
	-1000, 556, 659, 550, 10821, -1000, -1000, 650, -1000, 191,
	-1000, -1000, 10592, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 10592, 10821, -1000, -1000, -1000,
	-1000, -1000, 10592, -1000, 331, -1000, 275, -1000, 3904, -1000,
	591, 904, 9211, -1000, -1000, 421, -1000, 7126, 1718, 1718,
	-1000, -1000, 421, 688, 688, -1000, 688, 704, -1000, 688,
	0, 688, -1, 421, 421, 1606, 1286, -1000, 1448, 933,
	654, -149, -1000, 275, 6656, -1000, 857, 646, 641, -1000,
	-1000, 5921, 421, 543, 128, 528, 890, -1000, 275, 275,
	275, 10592, 275, 10592, 10592, 10592, 7819, 10592, 890, -1000,
	-1000, -1000, -1000, 2619, -1000, 483, -1000, 688, -1000, -1000,
	-1000, 10592, -47, 924, -1000, -1000, -1000, -1000, 679, -1000,
	-1000, -1000, -1000, -1000, -1000, -17, 408, -17, 312, -1000,
	308, 3133, 3904, 2876, -1000, 677, -1000, -1000, -1000, -1000,
	859, -1000, 904, 902, 648, -1000, 1718, -1000, -1000, 105,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 7126,
	7126, -1000, 7126, 7126, 7126, 421, 393, 275, 848, -1000,
	654, -1000, -1000, 652, 10592, 10592, -1000, -1000, 478, -1000,
	447, 447, 447, 177, -1000, -1000, 130, 10592, -1000, 442,
	159, -1000, -130, 520, 153, -1000, 153, 484, 448, -1000,
	-1000, -1000, 10592, 654, 902, 900, 894, -1000, -1000, 867,
	867, 867, 867, 17, -1000, -1000, 920, -1000, 654, -1000,
	707, 119, -1000, 10592, -1000, -1000, -1000, -1000, -1000, 130,
	-1000, 397, 190, 388, -1000, 42, 292, 847, -1000, 842,
	676, -1000, -1000, -1000, -1000, -1000, 438, 27, 900, -1000,
	6656, 6656, -1000, -1000, -1000, -1000, 421, 50, -164, 11050,
	641, 421, 10592, -1000, -1000, -1000, 305, -1000, -1000, 10821,
	-1000, 378, -1000, -1000, 428, 721, 427, -1000, 10592, 891,
	275, 608, -1000, 798, -158, -167, 569, -1000, -1000, -1000,
	675, -1000, -1000, -160, -1000, 27, 806, 890, -1000, 796,
	-1000, 10592, -1000, -1000, 24, -1000, -162, 420, 21, -165,
	726, 654, -168, 724, -1000, 918, 6891, -1000, -1000, 916,
	206, 206, 867, 421, -1000, -1000, -1000, 51, 339, -1000,
	-1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1191, 23, 579, 1189, 1188, 1186, 1184, 1182, 1181,
	1180, 1179, 1178, 1176, 1168, 1166, 1165, 1164, 1163, 1161,
	1160, 1159, 1157, 1155, 126, 1154, 1153, 1150, 83, 56,
	82, 1148, 1147, 46, 58, 47, 44, 1123, 32, 41,
	71, 81, 1145, 59, 1143, 1133, 90, 1131, 68, 1126,
	1125, 987, 1114, 1112, 16, 17, 1111, 1110, 1108, 1107,
	101, 1011, 1106, 1105, 1103, 1100, 1097, 1095, 55, 10,
	26, 36, 18, 1094, 45, 8, 1093, 54, 1092, 1091,
	11, 15, 5, 1090, 61, 1089, 12, 60, 1084, 6,
	75, 40, 28, 9, 85, 69, 1082, 37, 63, 57,
	1081, 1080, 417, 1075, 1074, 50, 1072, 1070, 34, 162,
	405, 1068, 1065, 1054, 1051, 42, 0, 659, 889, 88,
	1050, 1049, 1048, 1429, 84, 76, 25, 1047, 33, 30,
	43, 1046, 1040, 48, 1039, 1024, 1021, 1020, 1016, 1014,
	1013, 423, 1005, 1004, 1003, 19, 22, 1002, 1000, 62,
	29, 999, 997, 995, 53, 67, 988, 984, 52, 21,
	981, 980, 979, 978, 977, 49, 27, 974, 14, 960,
	13, 959, 39, 958, 3, 956, 20, 954, 4, 953,
	7, 51, 1, 950, 2, 943, 942, 86, 146, 941,
	938, 97,
}
var yyR1 = [...]int{

	0, 185, 186, 186, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 6, 3, 4,
	4, 5, 5, 7, 7, 27, 27, 8, 9, 9,
	9, 189, 189, 46, 46, 90, 90, 10, 10, 10,
	10, 95, 95, 99, 99, 99, 100, 100, 100, 100,
	131, 131, 11, 11, 11, 11, 11, 11, 11, 11,
	180, 180, 179, 178, 178, 177, 177, 176, 16, 161,
	163, 163, 162, 162, 162, 162, 155, 134, 134, 134,
	134, 137, 137, 135, 135, 135, 135, 135, 135, 135,
	136, 136, 136, 136, 136, 138, 138, 138, 138, 138,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 140, 140, 140, 140, 140,
	140, 140, 140, 154, 154, 141, 141, 149, 149, 150,
	150, 150, 147, 147, 148, 148, 151, 151, 151, 142,
	142, 142, 142, 142, 142, 142, 142, 144, 144, 144,
	152, 152, 145, 145, 145, 146, 146, 146, 153, 153,
	153, 153, 153, 143, 143, 156, 156, 171, 171, 170,
	170, 170, 160, 160, 167, 167, 167, 167, 167, 158,
	158, 159, 159, 169, 169, 168, 157, 157, 172, 172,
	172, 172, 183, 184, 182, 182, 182, 182, 182, 164,
	164, 164, 165, 165, 165, 166, 166, 166, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 181, 181, 181,
	181, 181, 181, 181, 181, 181, 181, 181, 175, 173,
	173, 174, 174, 13, 14, 14, 14, 14, 14, 15,
	15, 17, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 106,
	106, 104, 104, 107, 107, 105, 105, 105, 108, 108,
	108, 132, 132, 132, 19, 19, 21, 21, 22, 23,
	20, 20, 20, 20, 20, 20, 20, 190, 24, 25,
	25, 26, 26, 26, 30, 30, 30, 28, 28, 29,
	29, 35, 35, 34, 34, 36, 36, 36, 36, 120,
	120, 120, 119, 119, 38, 38, 39, 39, 40, 40,
	41, 41, 41, 41, 53, 53, 89, 89, 91, 91,
	42, 42, 42, 42, 43, 43, 44, 44, 45, 45,
	127, 127, 126, 126, 126, 125, 125, 47, 47, 47,
	49, 48, 48, 48, 48, 50, 50, 52, 52, 51,
	51, 54, 54, 54, 54, 55, 55, 37, 37, 37,
	37, 37, 37, 37, 103, 103, 57, 57, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 67, 67,
	67, 67, 67, 67, 58, 58, 58, 58, 58, 58,
	58, 33, 33, 68, 68, 68, 74, 69, 69, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 65, 65, 65, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 64,
	64, 64, 64, 64, 64, 64, 64, 191, 191, 66,
	66, 66, 66, 31, 31, 31, 31, 31, 130, 130,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 78, 78, 32, 32, 76, 76, 77,
	79, 79, 75, 75, 75, 60, 60, 60, 60, 60,
	60, 60, 60, 62, 62, 62, 80, 80, 81, 81,
	82, 82, 83, 83, 84, 85, 85, 85, 86, 86,
	86, 86, 87, 87, 87, 59, 59, 59, 59, 59,
	59, 88, 88, 88, 88, 92, 92, 70, 70, 72,
	72, 71, 73, 93, 93, 97, 94, 94, 98, 98,
	98, 98, 96, 96, 96, 122, 122, 122, 101, 101,
	109, 109, 110, 110, 102, 102, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 112, 112, 112, 113,
	113, 114, 114, 114, 121, 121, 117, 117, 118, 118,
	123, 123, 124, 124, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 187, 188, 128, 129,
	129, 129,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 4, 6, 7, 13, 5, 10, 1,
	3, 1, 3, 7, 8, 1, 1, 8, 8, 7,
	6, 1, 1, 1, 3, 0, 4, 3, 4, 5,
	4, 1, 3, 3, 2, 2, 2, 2, 2, 1,
	1, 1, 2, 2, 8, 4, 6, 5, 5, 5,
	0, 2, 1, 0, 2, 1, 3, 3, 4, 4,
	2, 4, 1, 3, 3, 3, 8, 3, 1, 1,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 2, 2, 2, 1,
	4, 4, 2, 2, 3, 3, 3, 3, 1, 1,
	1, 1, 1, 6, 6, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 3, 0, 5, 0,
	3, 5, 0, 1, 0, 1, 0, 1, 2, 0,
	2, 2, 2, 2, 2, 4, 2, 0, 3, 5,
	0, 1, 0, 3, 3, 0, 2, 2, 0, 2,
	1, 2, 1, 0, 2, 5, 4, 1, 2, 2,
	3, 2, 0, 1, 2, 3, 3, 2, 2, 1,
	1, 0, 1, 1, 3, 2, 3, 1, 10, 11,
	11, 12, 3, 3, 1, 1, 2, 2, 2, 0,
	1, 3, 1, 2, 3, 1, 1, 1, 6, 7,
	7, 12, 7, 7, 7, 4, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 7, 1,
	3, 8, 8, 5, 4, 6, 5, 4, 4, 3,
	2, 3, 4, 4, 4, 4, 4, 4, 4, 4,
	3, 3, 3, 3, 4, 3, 7, 5, 4, 2,
	2, 4, 4, 2, 2, 2, 2, 2, 3, 1,
	1, 0, 1, 1, 1, 0, 2, 2, 0, 2,
	2, 0, 1, 1, 2, 1, 1, 2, 1, 1,
	2, 2, 2, 2, 2, 3, 3, 0, 2, 0,
	2, 1, 2, 2, 0, 1, 1, 0, 1, 0,
	1, 0, 1, 1, 3, 1, 2, 3, 5, 0,
	1, 2, 1, 1, 0, 2, 1, 3, 1, 1,
	1, 3, 1, 3, 3, 7, 1, 3, 1, 3,
	4, 4, 4, 3, 2, 4, 0, 1, 0, 2,
	0, 1, 0, 1, 2, 1, 1, 1, 2, 2,
	1, 2, 3, 2, 3, 2, 2, 2, 1, 1,
	3, 0, 5, 5, 5, 0, 2, 1, 3, 3,
	2, 3, 1, 2, 0, 3, 1, 1, 3, 3,
	4, 4, 5, 3, 4, 5, 6, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 0, 2, 1, 1, 1, 3, 1, 3, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 2, 2, 2, 2, 2, 3, 1, 1, 1,
	1, 4, 5, 6, 4, 4, 6, 6, 6, 6,
	8, 8, 6, 8, 8, 9, 7, 5, 4, 2,
	2, 2, 2, 2, 2, 2, 2, 0, 2, 4,
	4, 4, 4, 0, 3, 4, 7, 3, 1, 1,
	2, 3, 3, 1, 2, 2, 1, 2, 1, 2,
	2, 1, 2, 0, 1, 0, 2, 1, 2, 4,
	0, 2, 1, 3, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 0, 3, 0, 2,
	0, 3, 1, 3, 2, 0, 1, 1, 0, 2,
	4, 4, 0, 2, 4, 2, 1, 3, 5, 4,
	6, 1, 3, 3, 5, 0, 5, 1, 3, 1,
	2, 3, 1, 1, 3, 3, 1, 3, 3, 3,
	3, 3, 1, 2, 1, 1, 1, 1, 1, 1,
	0, 2, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 1, 1,
	1, 0, 1, 1, 0, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
	1, 1,
}
var yyChk = [...]int{

	-1000, -185, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 30, -16,
	116, 117, 119, 118, 149, 120, 142, 51, 161, 162,
	164, 165, 25, 143, 144, 147, 148, 31, 32, -187,
	8, 247, 55, -186, 262, -82, 15, -26, 5, -24,
	-190, -24, -24, -24, -24, -24, -161, -163, 55, 91,
	-114, 125, 73, 157, 239, 122, 123, 129, -117, 58,
	-116, 255, 135, 161, 172, 166, 193, 185, 136, 183,
	186, 226, 213, 223, 67, 164, 235, 145, 181, 177,
	175, 27, 198, 260, 176, 224, 138, 133, 199, 203,
	227, 170, 171, 229, 197, 134, 33, 257, 35, 153,
	230, 201, 196, 192, 195, 169, 191, 39, 205, 204,
	206, 225, 188, 139, 178, 18, 233, 148, 151, 200,
	202, 130, 155, 259, 231, 174, 140, 152, 147, 234,
	141, 165, 228, 237, 38, 210, 168, 132, 162, 159,
	189, 154, 179, 180, 194, 167, 190, 163, 156, 149,
	236, 211, 261, 187, 184, 160, 158, 216, 217, 218,
	219, 220, 258, 232, 182, 212, -102, 125, 127, 123,
	123, 124, 125, 239, 122, 123, -51, -123, 58, -116,
	125, 157, 123, 109, 186, 116, 214, 124, 33, 155,
	-132, 123, -104, 158, 213, 216, 217, 218, 220, 219,
	58, 228, 227, 221, -123, 163, -128, -128, -128, -128,
	-128, 215, 215, -2, -86, 17, 16, -5, -3, -187,
	6, 20, 21, -30, 41, 42, -25, -36, 100, -37,
	-123, -56, 75, -61, 29, 58, -116, 23, -60, -57,
	-75, -73, -74, 109, 110, 111, 98, 99, 106, 76,
	112, -65, -63, -64, -66, 60, 59, 68, 61, 62,
	63, 64, 69, 70, 71, -117, -71, -187, 45, 46,
	248, 249, 250, 251, 254, 252, 78, 34, 238, 246,
	245, 244, 242, 243, 240, 241, 128, 239, 104, 247,
	-102, -39, -40, -41, -42, -53, -74, -187, -51, 11,
	-46, -51, -94, -131, 163, -98, 228, 227, -118, -96,
	-117, -115, 226, 186, 225, 121, 74, 22, 24, 208,
	77, 109, 16, 78, 108, 248, 116, 49, 240, 241,
	238, 250, 251, 239, 214, 29, 10, 25, 143, 21,
	102, 118, 81, 82, 146, 23, 144, 71, 19, 52,
	11, 13, 14, 128, 127, 93, 124, 47, 8, 112,
	26, 90, 43, 28, 45, 91, 17, 242, 243, 31,
	254, 150, 104, 50, 36, 75, 69, 72, 53, 73,
	15, 48, 40, 92, 119, 247, 46, 122, 6, 253,
	30, 142, 44, 123, 215, 80, 126, 70, 5, 129,
	32, 9, 51, 54, 244, 245, 246, 34, 79, 12,
	-162, 91, -155, 58, -51, 124, -51, 247, -117, -110,
	128, -110, -110, 123, -51, -51, -109, 128, 58, -109,
	-109, -109, -51, 113, -51, 58, 30, 239, 58, 155,
	123, 156, 125, -129, -187, -118, -129, -129, -129, 159,
	160, -129, -107, -106, 223, 224, 215, 222, 53, 12,
	-129, -128, -128, -188, 57, -87, 19, 31, -37, -123,
	-83, -84, -37, -82, -2, -24, 36, 40, -28, 21,
	66, 11, -120, 74, 73, 90, -119, 22, -117, 60,
	113, -37, -58, 93, 75, 91, 92, 77, 95, 94,
	105, 98, 99, 100, 101, 102, 103, 104, 96, 97,
	108, 83, 84, 85, 86, 87, 88, 89, -103, -187,
	-74, -187, 114, 115, -61, -61, -61, -61, -61, -61,
	-61, -61, -187, -2, -69, -37, -187, -187, -187, -187,
	-187, -187, -187, -187, -187, -78, -37, -187, -191, -187,
	-191, -191, -191, -191, -191, -191, -191, -187, -187, -187,
	-187, -52, 26, -51, 30, 56, -47, -49, -48, -50,
	43, 47, 49, 44, 45, 46, 50, -127, 22, -39,
	-187, -126, 151, -125, 22, -123, 60, -51, -46, -189,
	56, 11, 54, 56, -94, 163, -95, -99, 229, 231,
	83, -122, -117, 60, 29, 30, 57, 56, -51, -134,
	-137, -139, -138, -140, -135, -136, 183, 184, 109, 187,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	30, 145, 179, 180, 181, 182, 199, 200, 201, 202,
	203, 204, 205, 206, 166, 167, 168, 169, 170, 171,
	172, 174, 175, 176, 177, 178, 58, -129, 125, -180,
	54, 58, 75, 58, -51, -51, -129, 126, -51, 23,
	53, -51, 58, 58, -124, -123, -115, -129, -129, -129,
	-129, -129, -129, -129, -129, -129, -129, 11, -105, 11,
	93, -51, -37, 9, 93, 56, 18, 113, 56, -85,
	24, 25, -86, -188, -30, -62, -117, 61, 64, -28,
	-29, 44, -51, -37, -37, -67, 69, 75, 70, 71,
	-119, 100, -124, -118, -115, -61, -68, -71, -74, 65,
	93, 91, 92, 77, -61, -61, -61, -61, -61, -61,
	-61, -61, -61, -61, -61, -61, -61, -61, -61, -130,
	58, 60, 58, -60, -60, -117, -35, 21, -34, -36,
	-188, 56, -188, -2, -34, -34, -37, -37, -75, -117,
	-123, -75, -34, -28, -76, -77, 79, -75, -188, -34,
	-35, -34, -34, -90, 151, -51, -93, -97, -75, -40,
	-41, -41, -40, -41, 43, 43, 43, 48, 43, 48,
	43, -48, -123, -188, -54, 51, 127, 52, -187, -125,
	-90, 54, -39, -51, -98, -95, 56, 230, 232, 233,
	53, 72, -37, -146, 108, -164, -165, -166, -118, 60,
	61, -155, -156, -157, -167, 137, -172, 130, 132, 129,
	-158, 138, 124, 28, 57, -151, 69, 75, -147, 211,
	-141, 55, -141, -141, -141, -141, -145, 186, -145, -145,
	-145, 55, 55, -141, -141, -141, -149, 55, -149, -149,
	-150, 55, -150, -121, 54, -51, -178, 258, -179, 58,
	-129, 23, -129, -111, 121, 118, 119, -175, 117, 208,
	186, 67, 29, 15, 248, 151, 261, 58, 152, -51,
	-51, -129, -51, -108, 91, 12, -123, -123, 38, -37,
	-37, -124, -84, -87, -101, 19, 11, 34, 34, -29,
	-34, 69, 70, 71, 113, -187, -68, -61, -61, -61,
	-33, 146, 74, -188, -188, -34, 56, -37, -188, -188,
	-188, 56, 54, 22, 56, 11, 113, 56, 11, -188,
	-34, -79, -77, 81, -37, -188, -188, -188, -188, -188,
	-59, 30, 34, -2, -187, -187, -55, 56, 12, 83,
	-44, -43, 53, 54, -45, 53, -43, 43, 43, 124,
	124, 124, -91, -117, -55, -39, -55, -99, -100, 234,
	231, 237, 58, 60, 56, -166, 83, 55, 58, 28,
	-158, -158, -159, 58, -159, 28, -142, 29, 69, -148,
	212, 61, -145, -145, -146, 30, -146, -146, -146, -154,
	60, -154, 61, 61, 53, -117, -129, -177, -176, -118,
	-128, -181, 157, 131, 137, 138, 133, 58, 124, 28,
	130, 132, 151, 129, -181, 157, -112, -113, 126, 22,
	124, 28, 151, -129, -105, 60, -37, 39, 113, -51,
	-34, -38, 11, 100, -118, -35, -33, 74, -61, -61,
	-188, -36, -133, 109, 183, 145, 181, 177, 197, 188,
	210, 179, 211, -130, -133, -61, -61, -118, -61, -61,
	255, -82, 82, -37, 80, -92, 53, -93, -70, -72,
	-71, -187, -2, -88, -117, -91, -82, -97, -37, -37,
	-37, 55, -37, -187, -187, -187, -188, 56, -82, -55,
	231, 235, 236, -165, -166, -169, -168, -117, -172, -159,
	-159, 55, -144, 53, 60, 61, 62, 69, 238, 68,
	57, -146, -146, 58, 109, 57, 56, 57, 56, 57,
	56, -51, 56, 83, -128, -117, -128, -117, -51, -128,
	-117, -108, -38, -55, -39, -188, -61, -188, -141, -141,
	-141, -150, -141, 171, -141, 171, -188, -188, -188, 56,
	19, -188, 56, 19, -187, -32, 253, -37, 27, -92,
	56, -188, -188, -188, 56, 113, -188, -86, -89, -117,
	-89, -89, -89, -126, -117, -86, 57, 56, -141, -89,
	-152, 208, 9, 55, -145, 60, -145, 61, 61, -129,
	-176, -166, 55, 26, -55, -80, 13, -145, 58, -61,
	-61, -61, -61, -61, -188, 60, 28, -72, 34, -2,
	-187, -117, -117, 56, 57, -188, -188, -188, -54, -171,
	-170, 54, 134, 67, -168, 57, -153, 130, 28, 129,
	238, 57, -146, -146, 57, 57, -89, -187, -80, -81,
	14, 16, -188, -188, -188, -188, -31, 93, 258, 9,
	-70, -2, 113, -117, -170, 58, -160, 83, 60, 140,
	-143, 67, 28, 28, 55, 57, -173, -174, 151, -81,
	-37, -69, -188, 256, 50, 259, -93, -188, -117, 61,
	-51, 60, 57, -180, -188, 56, -117, -82, 39, 257,
	260, 55, -178, -174, 34, -86, 39, -89, 153, 258,
	57, 154, 259, -183, -184, 53, -187, 260, -184, 53,
	10, 9, -61, 150, -182, 141, 136, 139, 30, -182,
	-188, -188, 135, 29, 69,
}
var yyDef = [...]int{

	22, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 540, 0, 307, 307, 307, 307, 307, 307, 0,
	611, 594, 0, 0, 0, 0, -2, 295, 296, 0,
	298, 299, 828, 828, 828, 828, 828, 0, 0, 0,
	35, 36, 826, 1, 3, 548, 0, 0, 311, 314,
	309, 0, 594, 0, 0, 0, 62, 63, 0, 0,
	0, 814, 0, 815, 592, 592, 592, 612, 613, 616,
	617, 719, 720, 721, 722, 723, 724, 725, 726, 727,
	728, 729, 730, 731, 732, 733, 734, 735, 736, 737,
	738, 739, 740, 741, 742, 743, 744, 745, 746, 747,
	748, 749, 750, 751, 752, 753, 754, 755, 756, 757,
	758, 759, 760, 761, 762, 763, 764, 765, 766, 767,
	768, 769, 770, 771, 772, 773, 774, 775, 776, 777,
	778, 779, 780, 781, 782, 783, 784, 785, 786, 787,
	788, 789, 790, 791, 792, 793, 794, 795, 796, 797,
	798, 799, 800, 801, 802, 803, 804, 805, 806, 807,
	808, 809, 810, 811, 812, 813, 816, 817, 818, 819,
	820, 821, 822, 823, 824, 825, 0, 0, 595, 0,
	590, 0, 590, 590, 590, 0, 250, 379, 620, 621,
	814, 815, 0, 0, 0, 0, 829, 829, 829, 829,
	0, 829, 0, 269, 270, 273, 274, 275, 276, 277,
	829, 292, 293, 282, 294, 297, 300, 301, 302, 303,
	304, 828, 828, 29, 552, 0, 0, 540, 31, 0,
	307, 312, 313, 317, 315, 316, 308, 0, 325, 329,
	0, 387, 0, 392, 394, -2, -2, 0, 429, 430,
	431, 432, 433, 0, 0, 0, 0, 0, 0, 0,
	0, 457, 458, 459, 460, 525, 526, 527, 528, 529,
	530, 531, 532, 396, 397, 522, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 513, 0, 487, 487,
	487, 487, 487, 487, 487, 487, 0, 0, 0, 0,
	0, 0, 336, 338, 339, 340, -2, 0, 362, 0,
	0, 43, 47, 0, 805, 576, -2, -2, 0, 0,
	618, 619, -2, 728, -2, 624, 625, 626, 627, 628,
	629, 630, 631, 632, 633, 634, 635, 636, 637, 638,
	639, 640, 641, 642, 643, 644, 645, 646, 647, 648,
	649, 650, 651, 652, 653, 654, 655, 656, 657, 658,
	659, 660, 661, 662, 663, 664, 665, 666, 667, 668,
	669, 670, 671, 672, 673, 674, 675, 676, 677, 678,
	679, 680, 681, 682, 683, 684, 685, 686, 687, 688,
	689, 690, 691, 692, 693, 694, 695, 696, 697, 698,
	699, 700, 701, 702, 703, 704, 705, 706, 707, 708,
	709, 710, 711, 712, 713, 714, 715, 716, 717, 718,
	0, 0, 82, 0, 80, 0, 829, 0, 70, 0,
	0, 0, 0, 0, 829, 0, 0, 0, 0, 0,
	0, 0, 249, 0, 251, 829, 829, 829, 829, 829,
	829, 829, 829, 260, 830, 831, 261, 262, 263, 829,
	829, 265, 0, 285, 283, 284, 279, 280, 0, 0,
	278, 305, 306, 30, 827, 23, 0, 0, 549, 0,
	541, 542, 545, 548, 29, 314, 0, 317, 319, 318,
	310, 0, 326, 0, 0, 0, 330, 0, 332, 333,
	0, 390, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 414, 415, 416, 417, 418, 419, 420, 393, 0,
	407, 0, 0, 0, 449, 450, 451, 452, 453, 454,
	455, 0, 321, 29, 0, 427, 0, 0, 0, 0,
	0, 0, 0, 0, 317, 0, 514, 0, 479, 0,
	480, 481, 482, 483, 484, 485, 486, 0, 321, 0,
	0, 45, 0, 378, 0, 0, 0, 0, 0, 0,
	367, 0, 0, 370, 0, 0, 0, 0, 361, 0,
	0, 381, 776, 363, 0, 365, 366, -2, 0, 0,
	0, 41, 42, 0, 48, 805, 50, 51, 0, 0,
	0, 165, 585, 586, 587, 583, 209, 0, 0, 146,
	142, 88, 89, 90, 135, 92, 135, 135, 135, 135,
	162, 162, 162, 162, 118, 119, 120, 121, 122, 0,
	0, 105, 135, 135, 135, 109, 125, 126, 127, 128,
	129, 130, 131, 132, 93, 94, 95, 96, 97, 98,
	99, 137, 137, 137, 139, 139, 614, 65, 0, 73,
	0, 829, 0, 829, 78, 0, 225, 0, 244, 591,
	0, 829, 247, 248, 380, 622, 623, 252, 253, 254,
	255, 256, 257, 258, 259, 264, 268, 0, 288, 0,
	0, 272, 271, 553, 0, 0, 0, 0, 0, 544,
	546, 547, 552, 32, 317, 0, 533, 0, 0, 319,
	0, 320, 27, 388, 389, 391, 408, 0, 410, 412,
	331, 327, 0, 523, -2, 398, 399, 423, 424, 425,
	0, 0, 0, 0, 421, 403, 0, 434, 435, 436,
	437, 438, 439, 440, 441, 442, 443, 444, 445, 448,
	498, 499, 0, 446, 447, 456, 0, 0, 322, 323,
	426, 0, 571, 29, 0, 0, 0, 0, 0, 522,
	0, 0, 0, 0, 520, 517, 0, 0, 488, 0,
	0, 0, 0, 0, 0, 377, 385, 573, 0, 337,
	356, 358, 0, 353, 368, 369, 371, 0, 373, 0,
	375, 376, 341, 343, 344, 0, 0, 0, 0, 364,
	385, 0, 385, 44, 577, 49, 0, 0, 54, 55,
	578, 579, 580, 581, 0, 79, 210, 212, 215, 216,
	217, 83, 84, 85, 0, 0, 197, 0, 0, 191,
	191, 0, 189, 190, 81, 149, 147, 0, 144, 143,
	91, 0, 162, 162, 112, 113, 165, 0, 165, 165,
	165, 0, 0, 106, 107, 108, 100, 0, 101, 102,
	103, 0, 104, 0, 0, 829, 67, 0, 71, 72,
	68, 593, 69, 828, 0, 0, 606, 226, 596, 597,
	598, 599, 600, 601, 602, 603, 604, 605, 0, 243,
	829, 246, 285, 267, 0, 0, 286, 287, 0, 550,
	551, 0, 543, 24, 0, 588, 589, 534, 535, 0,
	334, 409, 411, 413, 0, 321, 400, 421, 404, 0,
	401, 0, 0, 395, 461, 0, 0, 428, -2, 464,
	465, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	540, 0, 518, 0, 0, 478, 489, 490, 491, 492,
	565, 0, 0, -2, 0, 0, 540, 0, 0, 0,
	350, 357, 0, 0, 351, 0, 352, 372, 374, 0,
	0, 0, 0, 348, 540, 385, 40, 52, 53, 0,
	0, 59, 166, 167, 0, 213, 0, 0, 0, 184,
	191, 191, 187, 192, 188, 0, 157, 0, 148, 87,
	145, 0, 165, 165, 114, 0, 115, 116, 117, 0,
	133, 0, 0, 0, 0, 615, 66, 74, 75, 0,
	218, 828, 0, 227, 228, 229, 230, 231, 232, 233,
	234, 235, 236, 237, 828, 0, 0, 828, 607, 608,
	609, 610, 0, 245, 288, 289, 290, 554, 0, 25,
	334, 385, 0, 328, 524, 0, 402, 0, 422, 405,
	462, 324, 0, 135, 135, 503, 135, 139, 506, 135,
	508, 135, 511, 0, 0, 0, 0, 523, 0, 0,
	0, 515, 477, 521, 0, 33, 0, 565, 555, 567,
	569, 0, 29, 0, 561, 0, 548, 574, 386, 575,
	354, 0, 359, 0, 0, 0, 362, 0, 548, 39,
	56, 57, 58, 211, 214, 0, 193, 135, 196, 185,
	186, 0, 160, 0, 150, 151, 152, 153, 154, 156,
	136, 110, 111, 163, 164, 162, 0, 162, 0, 140,
	0, 829, 0, 0, 219, 0, 220, 222, 223, 224,
	0, 266, 385, 536, 335, 463, 406, 466, 500, 162,
	504, 505, 507, 509, 510, 512, 468, 467, 469, 0,
	0, 472, 0, 0, 0, 0, 0, 519, 0, 34,
	0, 570, -2, 0, 0, 0, 46, 37, 0, 346,
	0, 0, 0, 381, 349, 38, 176, 0, 195, 0,
	168, 161, 0, 0, 165, 134, 165, 0, 0, 64,
	76, 77, 0, 0, 536, 538, 0, 501, 502, 0,
	0, 0, 0, 493, 476, 516, 0, 568, 0, -2,
	0, 563, 562, 0, 355, 382, 383, 384, 345, 175,
	177, 0, 182, 0, 194, 0, 173, 0, 170, 172,
	158, 155, 123, 124, 138, 141, 0, 0, 538, 28,
	0, 0, 470, 471, 473, 474, 0, 0, 0, 0,
	558, 29, 0, 347, 178, 179, 0, 183, 181, 0,
	86, 0, 169, 171, 0, 70, 0, 239, 0, 540,
	539, 537, 475, 0, 0, 0, 566, -2, 564, 180,
	0, 174, 159, 73, 238, 0, 0, 548, 494, 0,
	497, 0, 221, 240, 0, 26, 495, 0, 0, 0,
	198, 0, 0, 199, 200, 0, 0, 496, 201, 0,
	0, 0, 0, 0, 202, 204, 205, 0, 0, 203,
	241, 242, 206, 207, 208,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 76, 3, 3, 3, 103, 95, 3,
	55, 57, 100, 98, 56, 99, 113, 101, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 262,
	84, 83, 85, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 105, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 94, 3, 106,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 77, 78, 79, 80, 81, 82, 86, 87, 88,
	89, 90, 91, 92, 93, 96, 97, 102, 104, 107,
	108, 109, 110, 111, 112, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:313
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:318
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:319
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:323
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:344
		{
			setParseTree(yylex, nil)
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:350
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:358
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 25:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:362
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 26:
		yyDollar = yyS[yypt-13 : yypt+1]
//line sql.y:366
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, ShardPartial: true, Distinct: yyDollar[5].str, Hints: yyDollar[6].str, SelectExprs: yyDollar[7].selectExprs, From: yyDollar[8].tableExprs, Where: NewWhere(WhereStr, yyDollar[9].expr), GroupBy: GroupBy(yyDollar[10].exprs), Having: NewWhere(HavingStr, yyDollar[11].expr), OrderBy: yyDollar[12].orderBy, Limit: yyDollar[13].limit}
		}
	case 27:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:372
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 28:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:379
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:385
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:389
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:395
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:399
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 33:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:406
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:418
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:430
		{
			yyVAL.str = InsertStr
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:434
		{
			yyVAL.str = ReplaceStr
		}
	case 37:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:440
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 38:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:446
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 39:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:450
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:454
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:459
		{
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:460
		{
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:464
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:468
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 45:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:473
		{
			yyVAL.partitions = nil
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:477
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:483
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:487
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:491
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:495
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:501
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:505
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:511
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:515
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:519
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:525
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:529
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:533
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:537
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:543
		{
			yyVAL.str = SessionStr
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:547
		{
			yyVAL.str = GlobalStr
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:553
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:558
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 64:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:564
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 65:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:569
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 66:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:573
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:577
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:585
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 69:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:589
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:594
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:598
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:604
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 73:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:609
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:614
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:620
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:625
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:631
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:637
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:644
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:651
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:655
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:661
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:666
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:670
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:674
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 86:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:680
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:691
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:702
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:707
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:713
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:717
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:721
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:725
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:729
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:733
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:737
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:743
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:749
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:755
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:761
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:767
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:775
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:779
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:783
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:787
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:791
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:797
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 111:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:801
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:805
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:809
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:813
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:817
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:821
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:825
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:829
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:833
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:837
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:841
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:845
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:849
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 124:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:854
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:860
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:864
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:868
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:872
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:876
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:880
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:884
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:888
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:894
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:899
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 135:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:904
		{
			yyVAL.optVal = nil
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:908
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:913
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 138:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:917
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:925
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:929
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 141:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:935
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 142:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:943
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:947
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 144:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:952
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:956
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:962
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:966
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:970
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:975
		{
			yyVAL.optVal = nil
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:979
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:983
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:987
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:991
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:995
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:999
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1003
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1008
		{
			yyVAL.optVal = nil
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1012
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1016
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1021
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1025
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1030
		{
			yyVAL.str = ""
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1034
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1038
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1043
		{
			yyVAL.str = ""
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1047
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1051
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1056
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1060
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1064
		{
			yyVAL.colKeyOpt = colKey
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1068
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1072
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1077
		{
			yyVAL.optVal = nil
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1081
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 175:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1087
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 176:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1091
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1097
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1101
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1107
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1111
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1116
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 182:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1122
		{
			yyVAL.str = ""
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1126
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1132
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1136
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1140
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1144
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1148
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1154
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1158
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 191:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1163
		{
			yyVAL.str = ""
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1167
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1173
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1177
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1183
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1189
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1193
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 198:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1200
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 199:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1204
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 200:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1208
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 201:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1212
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1218
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1224
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1230
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1234
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1238
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1242
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1246
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 209:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1251
		{
			yyVAL.str = ""
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1255
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1259
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1267
		{
			yyVAL.str = yyDollar[1].str
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1271
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1275
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1281
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1285
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1289
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 218:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1295
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 219:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1299
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 220:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1303
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 221:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1307
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 222:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1320
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 223:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1330
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 224:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1335
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 225:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1340
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 226:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1344
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 238:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1363
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1369
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1373
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 241:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1379
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 242:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1383
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 243:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1389
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 244:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1395
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 245:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1403
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 246:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1408
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1416
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1420
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1426
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1430
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1435
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1441
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1445
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1449
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1454
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1458
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1462
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1466
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1470
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1474
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1478
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1482
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1486
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1490
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1494
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1498
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 267:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1503
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1513
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1517
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1521
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1525
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1531
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1535
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1539
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1543
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1547
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1551
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1561
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1567
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1571
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 281:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1577
		{
			yyVAL.str = ""
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1581
		{
			yyVAL.str = "full "
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1587
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1591
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 285:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1597
		{
			yyVAL.str = ""
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1601
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1605
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 288:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1611
		{
			yyVAL.showFilter = nil
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1615
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1619
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 291:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1625
		{
			yyVAL.str = ""
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1629
		{
			yyVAL.str = SessionStr
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1633
		{
			yyVAL.str = GlobalStr
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1639
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1643
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1649
		{
			yyVAL.statement = &Begin{}
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1653
		{
			yyVAL.statement = &Begin{}
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1659
		{
			yyVAL.statement = &Commit{}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1665
		{
			yyVAL.statement = &Rollback{}
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1671
		{
			yyVAL.statement = &OtherRead{}
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1675
		{
			yyVAL.statement = &OtherRead{}
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1679
		{
			yyVAL.statement = &OtherRead{}
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1683
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1687
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1691
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1695
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1700
		{
			setAllowComments(yylex, true)
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1704
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 309:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1710
		{
			yyVAL.bytes2 = nil
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1714
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1720
		{
			yyVAL.str = UnionStr
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1724
		{
			yyVAL.str = UnionAllStr
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1728
		{
			yyVAL.str = UnionDistinctStr
		}
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1733
		{
			yyVAL.str = ""
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1737
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1741
		{
			yyVAL.str = SQLCacheStr
		}
	case 317:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1746
		{
			yyVAL.str = ""
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1750
		{
			yyVAL.str = DistinctStr
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1755
		{
			yyVAL.str = ""
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1759
		{
			yyVAL.str = StraightJoinHint
		}
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1764
		{
			yyVAL.selectExprs = nil
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1768
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1774
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1778
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1784
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1788
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1792
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 328:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1796
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1801
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1805
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1809
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1816
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 334:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1821
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1825
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1831
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1835
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1845
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1849
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1853
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1859
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1865
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 345:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1869
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1875
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1879
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1885
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1889
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 350:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1902
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 351:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1906
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 352:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1910
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1914
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1920
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 355:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1922
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 356:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1926
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1928
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 358:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1932
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1934
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 360:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1937
		{
			yyVAL.empty = struct{}{}
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1939
		{
			yyVAL.empty = struct{}{}
		}
	case 362:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1942
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1946
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1950
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1957
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1963
		{
			yyVAL.str = JoinStr
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1967
		{
			yyVAL.str = JoinStr
		}
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1971
		{
			yyVAL.str = JoinStr
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1977
		{
			yyVAL.str = StraightJoinStr
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1983
		{
			yyVAL.str = LeftJoinStr
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1987
		{
			yyVAL.str = LeftJoinStr
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1991
		{
			yyVAL.str = RightJoinStr
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1995
		{
			yyVAL.str = RightJoinStr
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2001
		{
			yyVAL.str = NaturalJoinStr
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2005
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2015
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2019
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2025
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2029
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 381:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2034
		{
			yyVAL.indexHints = nil
		}
	case 382:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2038
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 383:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2042
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 384:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2046
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 385:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2051
		{
			yyVAL.expr = nil
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2055
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2061
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2065
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2069
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2073
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2077
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2081
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2085
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 394:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2091
		{
			yyVAL.str = ""
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2095
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2101
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2105
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2111
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2115
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 400:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2119
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 401:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2123
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 402:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2127
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2131
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 404:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2135
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 405:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2139
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 406:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2143
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2147
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2153
		{
			yyVAL.str = IsNullStr
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2157
		{
			yyVAL.str = IsNotNullStr
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2161
		{
			yyVAL.str = IsTrueStr
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2165
		{
			yyVAL.str = IsNotTrueStr
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2169
		{
			yyVAL.str = IsFalseStr
		}
	case 413:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2173
		{
			yyVAL.str = IsNotFalseStr
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2179
		{
			yyVAL.str = EqualStr
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2183
		{
			yyVAL.str = LessThanStr
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2187
		{
			yyVAL.str = GreaterThanStr
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2191
		{
			yyVAL.str = LessEqualStr
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2195
		{
			yyVAL.str = GreaterEqualStr
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2199
		{
			yyVAL.str = NotEqualStr
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2203
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 421:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2208
		{
			yyVAL.expr = nil
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2212
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2218
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2222
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2226
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2232
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2238
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2242
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2248
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2252
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2256
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2260
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2264
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2268
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2272
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2276
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2280
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2284
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2288
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2292
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2296
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2300
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2304
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2308
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2312
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2316
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2320
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2324
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2328
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2332
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2336
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2340
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2348
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2362
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2366
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2370
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 461:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2388
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 462:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2392
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 463:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2396
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 464:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2406
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 465:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2410
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 466:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2414
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 467:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2418
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 468:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2422
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 469:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2426
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 470:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2430
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 471:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2434
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 472:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2438
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 473:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2442
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 474:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2446
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 475:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2450
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 476:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2454
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 477:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2458
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 478:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2462
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2472
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2476
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2480
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2484
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2489
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2494
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2499
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2504
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 489:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2518
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 490:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2522
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 491:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2526
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 492:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2530
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 493:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2536
		{
			yyVAL.str = ""
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2540
		{
			yyVAL.str = BooleanModeStr
		}
	case 495:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2544
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 496:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2548
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2552
		{
			yyVAL.str = QueryExpansionStr
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2558
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2562
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2568
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2572
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2576
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2580
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2584
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2588
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2594
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2598
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2602
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2606
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2610
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2614
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2618
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 513:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2623
		{
			yyVAL.expr = nil
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2627
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 515:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2632
		{
			yyVAL.str = string("")
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2636
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2642
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2646
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 519:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2652
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 520:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2657
		{
			yyVAL.expr = nil
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2661
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2667
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2671
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 524:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2675
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2681
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2685
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2689
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2693
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2697
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2701
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2705
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2709
		{
			yyVAL.expr = &NullVal{}
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2715
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2724
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2728
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 536:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2733
		{
			yyVAL.exprs = nil
		}
	case 537:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2737
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 538:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2742
		{
			yyVAL.expr = nil
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2746
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 540:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2751
		{
			yyVAL.orderBy = nil
		}
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2755
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2761
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2765
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2771
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 545:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2776
		{
			yyVAL.str = AscScr
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2780
		{
			yyVAL.str = AscScr
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2784
		{
			yyVAL.str = DescScr
		}
	case 548:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2789
		{
			yyVAL.limit = nil
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2793
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 550:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2797
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 551:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2801
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 552:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2806
		{
			yyVAL.str = ""
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2810
		{
			yyVAL.str = ForUpdateStr
		}
	case 554:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2814
		{
			yyVAL.str = ShareModeStr
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2827
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2831
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2835
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 558:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2840
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 559:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2844
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 560:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2848
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2855
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2859
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 563:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2863
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 564:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2867
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 565:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2872
		{
			yyVAL.updateExprs = nil
		}
	case 566:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2876
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2882
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2886
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2892
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2896
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2902
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2908
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2918
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2922
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2928
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2934
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2938
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2944
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2948
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2952
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2956
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 583:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2963
		{
			yyVAL.bytes = []byte("charset")
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2970
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2974
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2978
		{
			yyVAL.expr = &Default{}
		}
	case 590:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2987
		{
			yyVAL.byt = 0
		}
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2989
		{
			yyVAL.byt = 1
		}
	case 592:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2992
		{
			yyVAL.empty = struct{}{}
		}
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2994
		{
			yyVAL.empty = struct{}{}
		}
	case 594:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2997
		{
			yyVAL.str = ""
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2999
		{
			yyVAL.str = IgnoreStr
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3003
		{
			yyVAL.empty = struct{}{}
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3005
		{
			yyVAL.empty = struct{}{}
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3007
		{
			yyVAL.empty = struct{}{}
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3009
		{
			yyVAL.empty = struct{}{}
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3011
		{
			yyVAL.empty = struct{}{}
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3013
		{
			yyVAL.empty = struct{}{}
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3015
		{
			yyVAL.empty = struct{}{}
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3017
		{
			yyVAL.empty = struct{}{}
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3019
		{
			yyVAL.empty = struct{}{}
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3021
		{
			yyVAL.empty = struct{}{}
		}
	case 606:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3024
		{
			yyVAL.empty = struct{}{}
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3026
		{
			yyVAL.empty = struct{}{}
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3028
		{
			yyVAL.empty = struct{}{}
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3032
		{
			yyVAL.empty = struct{}{}
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3034
		{
			yyVAL.empty = struct{}{}
		}
	case 611:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3037
		{
			yyVAL.empty = struct{}{}
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3039
		{
			yyVAL.empty = struct{}{}
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3041
		{
			yyVAL.empty = struct{}{}
		}
	case 614:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3044
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 615:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3046
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3050
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3054
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3061
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3067
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3071
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3078
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3306
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3315
		{
			decNesting(yylex)
		}
	case 828:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3320
		{
			forceEOF(yylex)
		}
	case 829:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3325
		{
			forceEOF(yylex)
		}
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3329
		{
			forceEOF(yylex)
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3333
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
