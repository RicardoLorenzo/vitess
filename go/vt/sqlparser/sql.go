//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:50
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	setVal            SetVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	updateExpr        *UpdateExpr
	colIdent          ColIdent
	colIdents         []ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALL = 57361
const DISTINCT = 57362
const AS = 57363
const EXISTS = 57364
const ASC = 57365
const DESC = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const VALUES = 57373
const LAST_INSERT_ID = 57374
const NEXT = 57375
const VALUE = 57376
const SHARE = 57377
const MODE = 57378
const SQL_NO_CACHE = 57379
const SQL_CACHE = 57380
const JOIN = 57381
const STRAIGHT_JOIN = 57382
const LEFT = 57383
const RIGHT = 57384
const INNER = 57385
const OUTER = 57386
const CROSS = 57387
const NATURAL = 57388
const USE = 57389
const FORCE = 57390
const ON = 57391
const OFF = 57392
const ID = 57393
const HEX = 57394
const STRING = 57395
const INTEGRAL = 57396
const FLOAT = 57397
const HEXNUM = 57398
const VALUE_ARG = 57399
const LIST_ARG = 57400
const COMMENT = 57401
const COMMENT_KEYWORD = 57402
const BIT_LITERAL = 57403
const NULL = 57404
const TRUE = 57405
const FALSE = 57406
const OR = 57407
const AND = 57408
const NOT = 57409
const BETWEEN = 57410
const CASE = 57411
const WHEN = 57412
const THEN = 57413
const ELSE = 57414
const END = 57415
const LE = 57416
const GE = 57417
const NE = 57418
const NULL_SAFE_EQUAL = 57419
const IS = 57420
const LIKE = 57421
const REGEXP = 57422
const IN = 57423
const SHIFT_LEFT = 57424
const SHIFT_RIGHT = 57425
const DIV = 57426
const MOD = 57427
const UNARY = 57428
const COLLATE = 57429
const BINARY = 57430
const INTERVAL = 57431
const JSON_EXTRACT_OP = 57432
const JSON_UNQUOTE_EXTRACT_OP = 57433
const CREATE = 57434
const ALTER = 57435
const DROP = 57436
const RENAME = 57437
const ANALYZE = 57438
const TABLE = 57439
const INDEX = 57440
const VIEW = 57441
const TO = 57442
const IGNORE = 57443
const IF = 57444
const UNIQUE = 57445
const USING = 57446
const PRIMARY = 57447
const SHOW = 57448
const DESCRIBE = 57449
const EXPLAIN = 57450
const DATE = 57451
const ESCAPE = 57452
const REPAIR = 57453
const OPTIMIZE = 57454
const TRUNCATE = 57455
const MAXVALUE = 57456
const PARTITION = 57457
const REORGANIZE = 57458
const LESS = 57459
const THAN = 57460
const BIT = 57461
const TINYINT = 57462
const SMALLINT = 57463
const MEDIUMINT = 57464
const INT = 57465
const INTEGER = 57466
const BIGINT = 57467
const INTNUM = 57468
const REAL = 57469
const DOUBLE = 57470
const FLOAT_TYPE = 57471
const DECIMAL = 57472
const NUMERIC = 57473
const TIME = 57474
const TIMESTAMP = 57475
const DATETIME = 57476
const YEAR = 57477
const CHAR = 57478
const VARCHAR = 57479
const BOOL = 57480
const CHARACTER = 57481
const VARBINARY = 57482
const NCHAR = 57483
const TEXT = 57484
const TINYTEXT = 57485
const MEDIUMTEXT = 57486
const LONGTEXT = 57487
const BLOB = 57488
const TINYBLOB = 57489
const MEDIUMBLOB = 57490
const LONGBLOB = 57491
const JSON = 57492
const ENUM = 57493
const NULLX = 57494
const AUTO_INCREMENT = 57495
const APPROXNUM = 57496
const SIGNED = 57497
const UNSIGNED = 57498
const ZEROFILL = 57499
const DATABASES = 57500
const TABLES = 57501
const VITESS_KEYSPACES = 57502
const VITESS_SHARDS = 57503
const VSCHEMA_TABLES = 57504
const NAMES = 57505
const CHARSET = 57506
const CURRENT_TIMESTAMP = 57507
const DATABASE = 57508
const CURRENT_DATE = 57509
const CURRENT_TIME = 57510
const LOCALTIME = 57511
const LOCALTIMESTAMP = 57512
const UTC_DATE = 57513
const UTC_TIME = 57514
const UTC_TIMESTAMP = 57515
const REPLACE = 57516
const CONVERT = 57517
const CAST = 57518
const GROUP_CONCAT = 57519
const SEPARATOR = 57520
const MATCH = 57521
const AGAINST = 57522
const BOOLEAN = 57523
const LANGUAGE = 57524
const WITH = 57525
const QUERY = 57526
const EXPANSION = 57527
const UNUSED = 57528

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"OFF",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"USING",
	"PRIMARY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VSCHEMA_TABLES",
	"NAMES",
	"CHARSET",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 21,
	-2, 4,
	-1, 264,
	78, 560,
	106, 560,
	-2, 38,
	-1, 266,
	78, 582,
	106, 582,
	-2, 40,
	-1, 271,
	106, 460,
	-2, 456,
	-1, 272,
	106, 461,
	-2, 457,
	-1, 542,
	5, 21,
	-2, 407,
	-1, 584,
	106, 463,
	-2, 459,
	-1, 739,
	5, 22,
	-2, 285,
	-1, 830,
	5, 22,
	-2, 408,
	-1, 904,
	5, 21,
	-2, 410,
	-1, 971,
	5, 22,
	-2, 411,
}

const yyPrivate = 57344

const yyLast = 7645

var yyAct = [...]int{

	329, 37, 976, 290, 328, 847, 501, 545, 725, 909,
	610, 378, 3, 440, 377, 623, 726, 682, 881, 303,
	236, 800, 442, 692, 587, 689, 763, 792, 546, 586,
	722, 395, 272, 583, 43, 659, 596, 572, 37, 706,
	229, 357, 351, 292, 301, 274, 241, 267, 245, 235,
	42, 256, 619, 366, 1003, 994, 1000, 62, 381, 989,
	998, 134, 135, 228, 993, 250, 988, 894, 941, 278,
	47, 759, 268, 230, 231, 232, 233, 234, 251, 603,
	252, 639, 851, 228, 228, 963, 611, 936, 882, 228,
	49, 50, 51, 52, 934, 637, 979, 468, 467, 477,
	478, 470, 471, 472, 473, 474, 475, 476, 469, 997,
	884, 479, 305, 995, 977, 513, 284, 783, 598, 918,
	627, 643, 809, 389, 565, 567, 780, 298, 285, 280,
	636, 886, 782, 890, 125, 885, 126, 883, 456, 455,
	126, 598, 888, 448, 691, 275, 443, 604, 128, 129,
	130, 887, 742, 741, 740, 457, 889, 891, 228, 276,
	228, 281, 131, 255, 228, 388, 127, 948, 753, 491,
	492, 926, 833, 289, 804, 746, 860, 633, 638, 631,
	472, 473, 474, 475, 476, 469, 500, 611, 479, 399,
	385, 810, 764, 469, 454, 566, 479, 479, 734, 641,
	644, 666, 456, 455, 457, 455, 597, 896, 980, 528,
	529, 595, 919, 594, 917, 664, 665, 663, 987, 457,
	781, 457, 779, 635, 326, 398, 861, 707, 707, 597,
	816, 694, 445, 811, 390, 757, 955, 634, 359, 456,
	455, 922, 37, 652, 654, 655, 898, 287, 653, 60,
	921, 459, 772, 354, 456, 455, 457, 379, 771, 640,
	477, 478, 470, 471, 472, 473, 474, 475, 476, 469,
	642, 457, 479, 683, 353, 684, 974, 269, 441, 600,
	456, 455, 228, 441, 601, 392, 458, 760, 40, 228,
	228, 966, 228, 291, 920, 62, 447, 457, 662, 770,
	488, 490, 456, 455, 785, 786, 787, 852, 853, 854,
	62, 859, 228, 355, 228, 62, 855, 228, 849, 457,
	228, 984, 291, 950, 291, 914, 913, 499, 798, 291,
	503, 504, 505, 506, 507, 508, 509, 754, 512, 514,
	514, 514, 514, 514, 514, 514, 514, 522, 523, 524,
	525, 866, 865, 368, 371, 372, 373, 369, 531, 370,
	374, 543, 685, 736, 439, 256, 256, 256, 256, 255,
	863, 862, 542, 286, 530, 832, 291, 697, 291, 959,
	379, 561, 562, 547, 364, 291, 401, 400, 256, 62,
	275, 563, 958, 856, 228, 697, 733, 228, 228, 228,
	228, 573, 574, 723, 532, 828, 733, 364, 228, 825,
	864, 798, 228, 489, 747, 228, 268, 571, 228, 569,
	228, 228, 582, 588, 612, 613, 614, 18, 559, 526,
	44, 584, 576, 62, 493, 494, 495, 496, 497, 498,
	363, 568, 364, 548, 577, 550, 549, 591, 551, 18,
	540, 798, 541, 441, 625, 515, 516, 517, 518, 519,
	520, 521, 573, 364, 18, 396, 647, 660, 798, 295,
	352, 40, 40, 605, 903, 242, 228, 255, 255, 255,
	255, 228, 624, 750, 228, 62, 620, 394, 621, 622,
	615, 37, 255, 54, 40, 773, 735, 124, 723, 451,
	255, 538, 394, 733, 503, 698, 16, 394, 996, 40,
	368, 371, 372, 373, 369, 563, 370, 374, 709, 556,
	40, 554, 738, 696, 557, 558, 555, 372, 373, 460,
	737, 62, 584, 553, 552, 992, 686, 687, 246, 247,
	784, 648, 728, 991, 37, 62, 727, 249, 724, 711,
	358, 704, 240, 720, 719, 729, 606, 607, 608, 609,
	547, 502, 765, 356, 397, 293, 756, 739, 511, 714,
	957, 616, 617, 618, 715, 661, 62, 294, 956, 901,
	751, 534, 826, 732, 924, 629, 450, 376, 269, 658,
	243, 244, 667, 668, 669, 670, 671, 672, 673, 674,
	675, 676, 677, 678, 679, 680, 681, 743, 358, 588,
	237, 748, 745, 969, 718, 238, 44, 761, 762, 62,
	968, 269, 717, 944, 394, 394, 573, 945, 453, 441,
	578, 46, 752, 48, 387, 41, 1, 632, 975, 766,
	767, 768, 775, 846, 593, 585, 273, 53, 592, 699,
	700, 769, 916, 703, 317, 316, 319, 320, 321, 322,
	62, 62, 850, 318, 323, 599, 758, 710, 660, 712,
	713, 776, 602, 954, 755, 404, 405, 394, 403, 407,
	406, 402, 721, 132, 375, 380, 391, 649, 650, 795,
	656, 657, 799, 796, 626, 55, 778, 805, 777, 788,
	630, 279, 487, 807, 808, 716, 262, 812, 263, 730,
	527, 350, 818, 967, 819, 820, 821, 822, 943, 814,
	510, 705, 304, 688, 651, 394, 315, 62, 312, 314,
	313, 533, 829, 830, 831, 502, 539, 708, 701, 702,
	461, 839, 840, 841, 579, 815, 302, 296, 564, 228,
	254, 360, 367, 547, 365, 827, 260, 253, 352, 824,
	940, 978, 835, 537, 842, 269, 19, 834, 731, 843,
	588, 45, 588, 248, 845, 15, 661, 844, 14, 62,
	62, 13, 62, 62, 12, 23, 11, 10, 857, 858,
	9, 8, 789, 790, 791, 7, 6, 5, 4, 239,
	17, 875, 2, 0, 0, 744, 228, 0, 0, 0,
	228, 394, 0, 0, 0, 0, 62, 871, 0, 869,
	0, 0, 876, 877, 0, 0, 256, 696, 892, 728,
	893, 880, 905, 727, 62, 797, 584, 0, 879, 0,
	900, 0, 0, 904, 0, 902, 0, 0, 895, 813,
	911, 912, 774, 394, 0, 908, 0, 0, 228, 0,
	0, 0, 899, 0, 0, 62, 62, 588, 441, 748,
	0, 0, 62, 62, 62, 0, 0, 62, 0, 0,
	0, 923, 0, 327, 927, 928, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 939, 937, 938, 0, 0,
	62, 0, 932, 0, 728, 0, 37, 0, 727, 0,
	0, 0, 946, 949, 226, 951, 952, 947, 0, 802,
	953, 873, 874, 0, 0, 960, 0, 0, 257, 806,
	0, 0, 0, 0, 258, 258, 270, 0, 255, 817,
	258, 962, 0, 0, 965, 0, 0, 62, 0, 843,
	0, 971, 0, 970, 0, 0, 0, 0, 269, 62,
	502, 0, 0, 0, 0, 547, 836, 837, 838, 0,
	0, 394, 394, 0, 394, 848, 982, 0, 0, 983,
	261, 62, 986, 62, 0, 277, 0, 990, 0, 0,
	0, 0, 0, 0, 0, 0, 915, 0, 999, 0,
	925, 18, 38, 20, 21, 1004, 1005, 0, 870, 258,
	62, 258, 0, 0, 0, 258, 0, 0, 0, 31,
	0, 0, 0, 0, 22, 0, 802, 0, 0, 394,
	929, 930, 0, 931, 0, 0, 933, 0, 935, 0,
	0, 0, 30, 0, 0, 0, 40, 0, 897, 0,
	0, 0, 0, 0, 282, 0, 283, 906, 907, 0,
	288, 0, 0, 0, 910, 910, 910, 964, 0, 394,
	0, 468, 467, 477, 478, 470, 471, 472, 473, 474,
	475, 476, 469, 0, 0, 479, 0, 0, 0, 0,
	0, 0, 394, 470, 471, 472, 473, 474, 475, 476,
	469, 0, 0, 479, 24, 25, 27, 26, 28, 793,
	0, 0, 0, 0, 0, 0, 0, 0, 29, 32,
	33, 0, 0, 34, 35, 36, 0, 1001, 0, 0,
	942, 0, 0, 258, 0, 0, 0, 0, 0, 848,
	258, 383, 0, 258, 0, 0, 0, 0, 0, 0,
	0, 394, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 0, 258, 0, 0, 258, 0,
	269, 258, 0, 972, 0, 973, 0, 0, 362, 0,
	0, 0, 0, 0, 0, 0, 39, 0, 386, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	981, 502, 985, 0, 0, 0, 0, 0, 444, 463,
	446, 466, 0, 449, 0, 0, 452, 480, 481, 482,
	483, 484, 485, 486, 0, 464, 465, 462, 468, 467,
	477, 478, 470, 471, 472, 473, 474, 475, 476, 469,
	0, 0, 479, 0, 0, 258, 0, 270, 258, 258,
	258, 258, 0, 0, 0, 291, 0, 0, 0, 560,
	0, 0, 0, 258, 0, 0, 383, 0, 0, 570,
	0, 258, 258, 0, 0, 0, 0, 0, 0, 0,
	270, 0, 0, 570, 0, 0, 0, 0, 0, 0,
	544, 468, 467, 477, 478, 470, 471, 472, 473, 474,
	475, 476, 469, 0, 0, 479, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 872, 575, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 0, 0,
	0, 0, 258, 0, 0, 258, 468, 467, 477, 478,
	470, 471, 472, 473, 474, 475, 476, 469, 0, 0,
	479, 0, 0, 0, 0, 0, 95, 0, 0, 0,
	0, 0, 0, 0, 0, 76, 0, 0, 0, 0,
	0, 84, 628, 0, 103, 91, 0, 645, 0, 0,
	646, 0, 0, 695, 570, 0, 0, 0, 695, 695,
	0, 0, 695, 61, 0, 0, 0, 0, 0, 0,
	0, 0, 71, 0, 0, 0, 695, 695, 695, 695,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 695, 0, 794, 270, 0, 0, 0, 468, 467,
	477, 478, 470, 471, 472, 473, 474, 475, 476, 469,
	0, 0, 479, 468, 467, 477, 478, 470, 471, 472,
	473, 474, 475, 476, 469, 225, 0, 479, 0, 0,
	0, 98, 0, 0, 0, 72, 0, 102, 96, 113,
	0, 97, 101, 85, 107, 65, 111, 105, 89, 80,
	81, 64, 0, 100, 75, 79, 74, 94, 108, 109,
	73, 122, 68, 117, 67, 69, 116, 93, 106, 112,
	90, 87, 66, 110, 88, 86, 82, 77, 0, 0,
	0, 104, 114, 123, 0, 0, 118, 119, 120, 92,
	70, 0, 410, 468, 467, 477, 478, 470, 471, 472,
	473, 474, 475, 476, 469, 0, 63, 479, 83, 121,
	99, 78, 115, 0, 422, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 427, 428, 429, 430, 431, 432,
	433, 0, 434, 435, 436, 437, 438, 423, 424, 425,
	426, 408, 409, 0, 695, 411, 0, 412, 413, 414,
	415, 416, 417, 418, 419, 420, 421, 0, 695, 467,
	477, 478, 470, 471, 472, 473, 474, 475, 476, 469,
	258, 0, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 823, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 0, 0,
	0, 258, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 695, 0, 0, 0, 0, 0, 570, 695,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 867, 0, 0, 0, 868, 0, 0, 258,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 204, 176, 216, 154, 168, 224, 169, 170,
	198, 142, 184, 95, 166, 0, 157, 137, 163, 138,
	155, 178, 76, 181, 153, 206, 187, 222, 84, 192,
	0, 103, 91, 0, 0, 180, 208, 182, 203, 175,
	199, 147, 191, 217, 167, 196, 195, 0, 0, 0,
	61, 0, 589, 590, 0, 0, 0, 0, 0, 71,
	0, 194, 213, 165, 197, 136, 193, 0, 140, 143,
	223, 211, 160, 161, 749, 0, 0, 0, 0, 0,
	0, 179, 183, 200, 173, 0, 0, 0, 0, 0,
	0, 0, 0, 158, 0, 190, 0, 0, 0, 144,
	141, 177, 0, 0, 0, 146, 0, 159, 201, 270,
	209, 174, 225, 212, 172, 171, 215, 218, 98, 207,
	156, 164, 72, 162, 102, 96, 113, 189, 97, 101,
	85, 107, 65, 111, 105, 89, 80, 81, 64, 0,
	100, 75, 79, 74, 94, 108, 109, 73, 122, 68,
	117, 67, 69, 116, 93, 106, 112, 90, 87, 66,
	110, 88, 86, 82, 77, 0, 139, 0, 104, 114,
	123, 152, 210, 118, 119, 120, 92, 70, 150, 151,
	148, 149, 185, 186, 219, 220, 221, 202, 145, 0,
	0, 205, 188, 63, 0, 83, 121, 99, 78, 115,
	214, 204, 176, 216, 154, 168, 224, 169, 170, 198,
	142, 184, 95, 166, 0, 157, 137, 163, 138, 155,
	178, 76, 181, 153, 206, 187, 222, 84, 192, 0,
	103, 91, 0, 0, 180, 208, 182, 203, 175, 199,
	147, 191, 217, 167, 196, 195, 0, 0, 0, 61,
	0, 589, 590, 0, 0, 0, 0, 0, 71, 0,
	194, 213, 165, 197, 136, 193, 0, 140, 143, 223,
	211, 160, 161, 0, 0, 0, 0, 0, 0, 0,
	179, 183, 200, 173, 0, 0, 0, 0, 0, 0,
	0, 0, 158, 0, 190, 0, 0, 0, 144, 141,
	177, 0, 0, 0, 146, 0, 159, 201, 0, 209,
	174, 225, 212, 172, 171, 215, 218, 98, 207, 156,
	164, 72, 162, 102, 96, 113, 189, 97, 101, 85,
	107, 65, 111, 105, 89, 80, 81, 64, 0, 100,
	75, 79, 74, 94, 108, 109, 73, 122, 68, 117,
	67, 69, 116, 93, 106, 112, 90, 87, 66, 110,
	88, 86, 82, 77, 0, 139, 0, 104, 114, 123,
	152, 210, 118, 119, 120, 92, 70, 150, 151, 148,
	149, 185, 186, 219, 220, 221, 202, 145, 0, 0,
	205, 188, 63, 0, 83, 121, 99, 78, 115, 214,
	204, 176, 216, 154, 168, 224, 169, 170, 198, 142,
	184, 95, 166, 0, 157, 137, 163, 138, 155, 178,
	76, 181, 153, 206, 187, 222, 84, 192, 0, 103,
	91, 0, 0, 180, 208, 182, 203, 175, 199, 147,
	191, 217, 167, 196, 195, 0, 0, 0, 61, 0,
	0, 0, 0, 0, 0, 0, 0, 71, 0, 194,
	213, 165, 197, 136, 193, 0, 140, 143, 223, 211,
	160, 161, 0, 0, 0, 0, 0, 0, 0, 179,
	183, 200, 173, 0, 0, 0, 0, 0, 0, 961,
	0, 158, 0, 190, 0, 0, 0, 144, 141, 177,
	0, 0, 0, 146, 0, 159, 201, 0, 209, 174,
	225, 212, 172, 171, 215, 218, 98, 207, 156, 164,
	72, 162, 102, 96, 113, 189, 97, 101, 85, 107,
	65, 111, 105, 89, 80, 81, 64, 0, 100, 75,
	79, 74, 94, 108, 109, 73, 122, 68, 117, 67,
	69, 116, 93, 106, 112, 90, 87, 66, 110, 88,
	86, 82, 77, 0, 139, 0, 104, 114, 123, 152,
	210, 118, 119, 120, 92, 70, 150, 151, 148, 149,
	185, 186, 219, 220, 221, 202, 145, 0, 0, 205,
	188, 63, 0, 83, 121, 99, 78, 115, 214, 204,
	176, 216, 154, 168, 224, 169, 170, 198, 142, 184,
	95, 166, 0, 157, 137, 163, 138, 155, 178, 76,
	181, 153, 206, 187, 222, 84, 192, 0, 103, 91,
	0, 0, 180, 208, 182, 203, 175, 199, 147, 191,
	217, 167, 196, 195, 40, 0, 0, 61, 0, 0,
	0, 0, 0, 0, 0, 0, 71, 0, 194, 213,
	165, 197, 136, 193, 0, 140, 143, 223, 211, 160,
	161, 0, 0, 0, 0, 0, 0, 0, 179, 183,
	200, 173, 0, 0, 0, 0, 0, 0, 0, 0,
	158, 0, 190, 0, 0, 0, 144, 141, 177, 0,
	0, 0, 146, 0, 159, 201, 0, 209, 174, 225,
	212, 172, 171, 215, 218, 98, 207, 156, 164, 72,
	162, 102, 96, 113, 189, 97, 101, 85, 107, 65,
	111, 105, 89, 80, 81, 64, 0, 100, 75, 79,
	74, 94, 108, 109, 73, 122, 68, 117, 67, 69,
	116, 93, 106, 112, 90, 87, 66, 110, 88, 86,
	82, 77, 0, 139, 0, 104, 114, 123, 152, 210,
	118, 119, 120, 92, 70, 150, 151, 148, 149, 185,
	186, 219, 220, 221, 202, 145, 0, 0, 205, 188,
	63, 0, 83, 121, 99, 78, 115, 214, 204, 176,
	216, 154, 168, 224, 169, 170, 198, 142, 184, 95,
	166, 0, 157, 137, 163, 138, 155, 178, 76, 181,
	153, 206, 187, 222, 84, 192, 0, 103, 91, 0,
	0, 180, 208, 182, 203, 175, 199, 147, 191, 217,
	167, 196, 195, 0, 0, 0, 271, 0, 0, 0,
	0, 0, 0, 0, 0, 71, 0, 194, 213, 165,
	197, 136, 193, 0, 140, 143, 223, 211, 160, 161,
	0, 0, 0, 0, 0, 0, 0, 179, 183, 200,
	173, 0, 0, 0, 0, 0, 0, 878, 0, 158,
	0, 190, 0, 0, 0, 144, 141, 177, 0, 0,
	0, 146, 0, 159, 201, 0, 209, 174, 225, 212,
	172, 171, 215, 218, 98, 207, 156, 164, 72, 162,
	102, 96, 113, 189, 97, 101, 85, 107, 65, 111,
	105, 89, 80, 81, 64, 0, 100, 75, 79, 74,
	94, 108, 109, 73, 122, 68, 117, 67, 69, 116,
	93, 106, 112, 90, 87, 66, 110, 88, 86, 82,
	77, 0, 139, 0, 104, 114, 123, 152, 210, 118,
	119, 120, 92, 70, 150, 151, 148, 149, 185, 186,
	219, 220, 221, 202, 145, 0, 0, 205, 188, 63,
	0, 83, 121, 99, 78, 115, 214, 204, 176, 216,
	154, 168, 224, 169, 170, 198, 142, 184, 95, 166,
	0, 157, 137, 163, 138, 155, 178, 76, 181, 153,
	206, 187, 222, 84, 192, 0, 103, 91, 0, 0,
	180, 208, 182, 203, 175, 199, 147, 191, 217, 167,
	196, 195, 0, 0, 0, 61, 0, 393, 0, 0,
	0, 0, 0, 0, 71, 0, 194, 213, 165, 197,
	136, 193, 0, 140, 143, 223, 211, 160, 161, 0,
	0, 0, 0, 0, 0, 0, 179, 183, 200, 173,
	0, 0, 0, 0, 0, 0, 0, 0, 158, 0,
	190, 0, 0, 0, 144, 141, 177, 0, 0, 0,
	146, 0, 159, 201, 0, 209, 174, 225, 212, 172,
	171, 215, 218, 98, 207, 156, 164, 72, 162, 102,
	96, 113, 189, 97, 101, 85, 107, 65, 111, 105,
	89, 80, 81, 64, 0, 100, 75, 79, 74, 94,
	108, 109, 73, 122, 68, 117, 67, 69, 116, 93,
	106, 112, 90, 87, 66, 110, 88, 86, 82, 77,
	0, 139, 0, 104, 114, 123, 152, 210, 118, 119,
	120, 92, 70, 150, 151, 148, 149, 185, 186, 219,
	220, 221, 202, 145, 0, 0, 205, 188, 63, 0,
	83, 121, 99, 78, 115, 214, 204, 176, 216, 154,
	168, 224, 169, 170, 198, 142, 184, 95, 166, 0,
	157, 137, 163, 138, 155, 178, 76, 181, 153, 206,
	187, 222, 84, 192, 0, 103, 91, 0, 0, 180,
	208, 182, 203, 175, 199, 147, 191, 217, 167, 196,
	195, 0, 0, 0, 61, 0, 0, 0, 0, 0,
	0, 0, 0, 71, 0, 194, 213, 165, 197, 136,
	193, 0, 140, 143, 223, 211, 160, 161, 0, 0,
	0, 0, 0, 0, 0, 179, 183, 200, 173, 0,
	0, 0, 0, 0, 0, 0, 0, 158, 0, 190,
	0, 0, 0, 144, 141, 177, 0, 0, 0, 146,
	0, 159, 201, 0, 209, 174, 225, 212, 172, 171,
	215, 218, 98, 207, 156, 164, 72, 162, 102, 96,
	113, 189, 97, 101, 85, 107, 65, 111, 105, 89,
	80, 81, 64, 0, 100, 75, 79, 74, 94, 108,
	109, 73, 122, 68, 117, 67, 69, 116, 93, 106,
	112, 90, 87, 66, 110, 88, 86, 82, 77, 0,
	139, 0, 104, 114, 123, 152, 210, 118, 119, 120,
	92, 70, 150, 151, 148, 149, 185, 186, 219, 220,
	221, 202, 145, 0, 0, 205, 188, 63, 0, 83,
	121, 99, 78, 115, 214, 204, 176, 216, 154, 168,
	224, 169, 170, 198, 142, 184, 95, 166, 0, 157,
	137, 163, 138, 155, 178, 76, 181, 153, 206, 187,
	222, 84, 192, 0, 103, 91, 0, 0, 180, 208,
	182, 203, 175, 199, 147, 191, 217, 167, 196, 195,
	0, 0, 0, 271, 0, 0, 0, 0, 0, 0,
	0, 0, 71, 0, 194, 213, 165, 197, 136, 193,
	0, 140, 143, 223, 211, 160, 161, 0, 0, 0,
	0, 0, 0, 0, 179, 183, 200, 173, 0, 0,
	0, 0, 0, 0, 0, 0, 158, 0, 190, 0,
	0, 0, 144, 141, 177, 0, 0, 0, 146, 0,
	159, 201, 0, 209, 174, 225, 212, 172, 171, 215,
	218, 98, 207, 156, 164, 72, 162, 102, 96, 113,
	189, 97, 101, 85, 107, 65, 111, 105, 89, 80,
	81, 64, 0, 100, 75, 79, 74, 94, 108, 109,
	73, 122, 68, 117, 67, 69, 116, 93, 106, 112,
	90, 87, 66, 110, 88, 86, 82, 77, 0, 139,
	0, 104, 114, 123, 152, 210, 118, 119, 120, 92,
	70, 150, 151, 148, 149, 185, 186, 219, 220, 221,
	202, 145, 0, 0, 205, 188, 63, 0, 83, 121,
	99, 78, 115, 214, 204, 176, 216, 154, 168, 224,
	169, 170, 198, 142, 184, 95, 166, 0, 157, 137,
	163, 138, 155, 178, 76, 181, 153, 206, 187, 222,
	84, 192, 0, 103, 91, 0, 0, 180, 208, 182,
	203, 175, 199, 147, 191, 217, 167, 196, 195, 0,
	0, 0, 227, 0, 0, 0, 0, 0, 0, 0,
	0, 71, 0, 194, 213, 165, 197, 136, 193, 0,
	140, 143, 223, 211, 160, 161, 0, 0, 0, 0,
	0, 0, 0, 179, 183, 200, 173, 0, 0, 0,
	0, 0, 0, 0, 0, 158, 0, 190, 0, 0,
	0, 144, 141, 177, 0, 0, 0, 146, 0, 159,
	201, 0, 209, 174, 225, 212, 172, 171, 215, 218,
	98, 207, 156, 164, 72, 162, 102, 96, 113, 189,
	97, 101, 85, 107, 65, 111, 105, 89, 80, 81,
	64, 0, 100, 75, 79, 74, 94, 108, 109, 73,
	122, 68, 117, 67, 69, 116, 93, 106, 112, 90,
	87, 66, 110, 88, 86, 82, 77, 0, 139, 0,
	104, 114, 123, 152, 210, 118, 119, 120, 92, 70,
	150, 151, 148, 149, 185, 186, 219, 220, 221, 202,
	145, 0, 0, 205, 188, 63, 0, 83, 121, 99,
	78, 115, 214, 204, 176, 216, 154, 168, 224, 169,
	170, 198, 142, 184, 95, 166, 0, 157, 137, 163,
	138, 155, 178, 76, 181, 153, 206, 187, 222, 84,
	192, 0, 103, 91, 0, 0, 180, 208, 182, 203,
	175, 199, 147, 191, 217, 167, 196, 195, 0, 0,
	0, 133, 0, 0, 0, 0, 0, 0, 0, 0,
	71, 0, 194, 213, 165, 197, 136, 193, 0, 140,
	143, 223, 211, 160, 161, 0, 0, 0, 0, 0,
	0, 0, 179, 183, 200, 173, 0, 0, 0, 0,
	0, 0, 0, 0, 158, 0, 190, 0, 0, 0,
	144, 141, 177, 0, 0, 0, 146, 0, 159, 201,
	0, 209, 174, 225, 212, 172, 171, 215, 218, 98,
	207, 156, 164, 72, 162, 102, 96, 113, 189, 97,
	101, 85, 107, 65, 111, 105, 89, 80, 81, 64,
	0, 100, 75, 79, 74, 94, 108, 109, 73, 122,
	68, 117, 67, 69, 116, 93, 106, 112, 90, 87,
	66, 110, 88, 86, 82, 77, 0, 139, 0, 104,
	114, 123, 152, 210, 118, 119, 120, 92, 70, 150,
	151, 148, 149, 185, 186, 219, 220, 221, 202, 145,
	0, 0, 205, 188, 63, 0, 83, 121, 99, 78,
	115, 95, 0, 0, 690, 0, 300, 0, 0, 0,
	76, 0, 299, 0, 0, 337, 84, 0, 0, 103,
	91, 0, 0, 0, 0, 330, 331, 0, 0, 0,
	0, 0, 0, 0, 0, 40, 0, 0, 271, 317,
	316, 319, 320, 321, 322, 0, 0, 71, 318, 323,
	324, 325, 0, 0, 297, 310, 0, 336, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 307, 308, 693,
	0, 0, 0, 348, 0, 309, 0, 0, 306, 311,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	225, 0, 0, 346, 0, 0, 98, 0, 0, 0,
	72, 0, 102, 96, 113, 0, 97, 101, 85, 107,
	65, 111, 105, 89, 80, 81, 64, 0, 100, 75,
	79, 74, 94, 108, 109, 73, 122, 68, 117, 67,
	69, 116, 93, 106, 112, 90, 87, 66, 110, 88,
	86, 82, 77, 0, 0, 0, 104, 114, 123, 0,
	0, 118, 119, 120, 92, 70, 338, 347, 344, 345,
	342, 343, 341, 340, 339, 349, 332, 333, 335, 0,
	334, 63, 0, 83, 121, 99, 78, 115, 95, 0,
	0, 0, 0, 300, 0, 0, 0, 76, 0, 299,
	0, 0, 337, 84, 0, 0, 103, 91, 0, 0,
	0, 0, 330, 331, 0, 0, 0, 0, 0, 0,
	580, 581, 40, 0, 0, 271, 317, 316, 319, 320,
	321, 322, 0, 0, 71, 318, 323, 324, 325, 0,
	0, 297, 310, 0, 336, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 307, 308, 0, 0, 0, 0,
	348, 0, 309, 0, 0, 306, 311, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 225, 0, 0,
	346, 0, 0, 98, 0, 0, 0, 72, 0, 102,
	96, 113, 0, 97, 101, 85, 107, 65, 111, 105,
	89, 80, 81, 64, 0, 100, 75, 79, 74, 94,
	108, 109, 73, 122, 68, 117, 67, 69, 116, 93,
	106, 112, 90, 87, 66, 110, 88, 86, 82, 77,
	0, 0, 0, 104, 114, 123, 0, 0, 118, 119,
	120, 92, 70, 338, 347, 344, 345, 342, 343, 341,
	340, 339, 349, 332, 333, 335, 0, 334, 63, 0,
	83, 121, 99, 78, 115, 95, 0, 0, 0, 0,
	300, 0, 0, 0, 76, 0, 299, 0, 0, 337,
	84, 0, 0, 103, 91, 0, 0, 0, 0, 330,
	331, 0, 0, 0, 0, 0, 0, 0, 0, 40,
	0, 0, 271, 317, 316, 319, 320, 321, 322, 0,
	0, 71, 318, 323, 324, 325, 0, 0, 297, 310,
	0, 336, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 307, 308, 693, 0, 0, 0, 348, 0, 309,
	0, 0, 306, 311, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 225, 0, 0, 346, 0, 0,
	98, 0, 0, 0, 72, 0, 102, 96, 113, 0,
	97, 101, 85, 107, 65, 111, 105, 89, 80, 81,
	64, 0, 100, 75, 79, 74, 94, 108, 109, 73,
	122, 68, 117, 67, 69, 116, 93, 106, 112, 90,
	87, 66, 110, 88, 86, 82, 77, 0, 0, 0,
	104, 114, 123, 0, 0, 118, 119, 120, 92, 70,
	338, 347, 344, 345, 342, 343, 341, 340, 339, 349,
	332, 333, 335, 0, 334, 63, 0, 83, 121, 99,
	78, 115, 95, 0, 0, 0, 0, 300, 0, 0,
	0, 76, 0, 299, 0, 0, 337, 84, 0, 0,
	103, 91, 0, 0, 0, 0, 330, 331, 0, 0,
	0, 0, 0, 0, 0, 0, 40, 0, 291, 271,
	317, 316, 319, 320, 321, 322, 0, 0, 71, 318,
	323, 324, 325, 0, 0, 297, 310, 0, 336, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 307, 308,
	0, 0, 0, 0, 348, 0, 309, 0, 0, 306,
	311, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 225, 0, 0, 346, 0, 0, 98, 0, 0,
	0, 72, 0, 102, 96, 113, 0, 97, 101, 85,
	107, 65, 111, 105, 89, 80, 81, 64, 0, 100,
	75, 79, 74, 94, 108, 109, 73, 122, 68, 117,
	67, 69, 116, 93, 106, 112, 90, 87, 66, 110,
	88, 86, 82, 77, 0, 0, 0, 104, 114, 123,
	0, 0, 118, 119, 120, 92, 70, 338, 347, 344,
	345, 342, 343, 341, 340, 339, 349, 332, 333, 335,
	18, 334, 63, 0, 83, 121, 99, 78, 115, 0,
	0, 95, 0, 0, 0, 0, 300, 0, 0, 0,
	76, 0, 299, 0, 0, 337, 84, 0, 0, 103,
	91, 0, 0, 0, 0, 330, 331, 0, 0, 0,
	0, 0, 0, 0, 0, 40, 0, 0, 271, 317,
	316, 319, 320, 321, 322, 0, 0, 71, 318, 323,
	324, 325, 0, 0, 297, 310, 0, 336, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 307, 308, 0,
	0, 0, 0, 348, 0, 309, 0, 0, 306, 311,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	225, 0, 0, 346, 0, 0, 98, 0, 0, 0,
	72, 0, 102, 96, 113, 0, 97, 101, 85, 107,
	65, 111, 105, 89, 80, 81, 64, 0, 100, 75,
	79, 74, 94, 108, 109, 73, 122, 68, 117, 67,
	69, 116, 93, 106, 112, 90, 87, 66, 110, 88,
	86, 82, 77, 0, 0, 0, 104, 114, 123, 0,
	0, 118, 119, 120, 92, 70, 338, 347, 344, 345,
	342, 343, 341, 340, 339, 349, 332, 333, 335, 0,
	334, 63, 0, 83, 121, 99, 78, 115, 95, 0,
	0, 0, 0, 300, 0, 0, 0, 76, 0, 299,
	0, 0, 337, 84, 0, 0, 103, 91, 0, 0,
	0, 0, 330, 331, 0, 0, 0, 0, 0, 0,
	0, 0, 40, 0, 0, 271, 317, 316, 319, 320,
	321, 322, 0, 0, 71, 318, 323, 324, 325, 0,
	0, 297, 310, 0, 336, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 307, 308, 0, 0, 0, 0,
	348, 0, 309, 0, 0, 306, 311, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 225, 0, 0,
	346, 0, 0, 98, 0, 0, 0, 72, 0, 102,
	96, 113, 0, 97, 101, 85, 107, 65, 111, 105,
	89, 80, 81, 64, 0, 100, 75, 79, 74, 94,
	108, 109, 73, 122, 68, 117, 67, 69, 116, 93,
	106, 112, 90, 87, 66, 110, 88, 86, 82, 77,
	0, 0, 0, 104, 114, 123, 0, 0, 118, 119,
	120, 92, 70, 338, 347, 344, 345, 342, 343, 341,
	340, 339, 349, 332, 333, 335, 95, 334, 63, 0,
	83, 121, 99, 78, 115, 76, 0, 0, 0, 0,
	337, 84, 0, 0, 103, 91, 0, 0, 0, 0,
	330, 331, 0, 0, 0, 0, 0, 0, 0, 0,
	40, 0, 0, 271, 317, 316, 319, 320, 321, 322,
	0, 0, 71, 318, 323, 324, 325, 0, 0, 0,
	310, 0, 336, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 307, 308, 0, 0, 0, 0, 348, 0,
	309, 0, 0, 306, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 225, 0, 0, 346, 0,
	0, 98, 0, 0, 0, 72, 0, 102, 96, 113,
	1002, 97, 101, 85, 107, 65, 111, 105, 89, 80,
	81, 64, 0, 100, 75, 79, 74, 94, 108, 109,
	73, 122, 68, 117, 67, 69, 116, 93, 106, 112,
	90, 87, 66, 110, 88, 86, 82, 77, 0, 0,
	0, 104, 114, 123, 0, 0, 118, 119, 120, 92,
	70, 338, 347, 344, 345, 342, 343, 341, 340, 339,
	349, 332, 333, 335, 95, 334, 63, 0, 83, 121,
	99, 78, 115, 76, 0, 0, 0, 0, 337, 84,
	0, 0, 103, 91, 0, 0, 0, 0, 330, 331,
	0, 0, 0, 0, 0, 0, 0, 0, 40, 0,
	0, 271, 317, 316, 319, 320, 321, 322, 0, 0,
	71, 318, 323, 324, 325, 0, 0, 0, 310, 0,
	336, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	307, 308, 0, 0, 0, 0, 348, 0, 309, 0,
	0, 306, 311, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 225, 0, 0, 346, 0, 0, 98,
	0, 0, 0, 72, 0, 102, 96, 113, 0, 97,
	101, 85, 107, 65, 111, 105, 89, 80, 81, 64,
	0, 100, 75, 79, 74, 94, 108, 109, 73, 122,
	68, 117, 67, 69, 116, 93, 106, 112, 90, 87,
	66, 110, 88, 86, 82, 77, 0, 0, 0, 104,
	114, 123, 0, 0, 118, 119, 120, 92, 70, 338,
	347, 344, 345, 342, 343, 341, 340, 339, 349, 332,
	333, 335, 0, 334, 63, 0, 83, 121, 99, 78,
	115, 95, 0, 0, 0, 801, 0, 0, 0, 0,
	76, 0, 0, 0, 0, 0, 84, 0, 0, 103,
	91, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 61, 0,
	803, 0, 0, 0, 0, 0, 0, 71, 0, 0,
	0, 0, 456, 455, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 457,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	225, 0, 0, 0, 0, 0, 98, 0, 0, 0,
	72, 0, 102, 96, 113, 0, 97, 101, 85, 107,
	65, 111, 105, 89, 80, 81, 64, 0, 100, 75,
	79, 74, 94, 108, 109, 73, 122, 68, 117, 67,
	69, 116, 93, 106, 112, 90, 87, 66, 110, 88,
	86, 82, 77, 0, 0, 0, 104, 114, 123, 95,
	0, 118, 119, 120, 92, 70, 0, 0, 76, 0,
	0, 0, 0, 0, 84, 0, 0, 103, 91, 0,
	0, 63, 0, 83, 121, 99, 78, 115, 0, 0,
	0, 0, 0, 0, 0, 0, 61, 0, 0, 0,
	0, 0, 0, 0, 0, 71, 0, 0, 0, 0,
	57, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 58, 0, 56, 0,
	0, 0, 59, 0, 98, 0, 0, 0, 72, 0,
	102, 96, 113, 0, 97, 101, 85, 107, 65, 111,
	105, 89, 80, 81, 64, 0, 100, 75, 79, 74,
	94, 108, 109, 73, 122, 68, 117, 67, 69, 116,
	93, 106, 112, 90, 87, 66, 110, 88, 86, 82,
	77, 0, 0, 0, 104, 114, 123, 0, 0, 118,
	119, 120, 92, 70, 0, 0, 18, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 95, 0, 63,
	0, 83, 121, 99, 78, 115, 76, 0, 0, 0,
	0, 0, 84, 0, 0, 103, 91, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 40, 0, 0, 61, 0, 0, 0, 0, 0,
	0, 0, 0, 71, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 225, 0, 0, 0,
	0, 0, 98, 0, 0, 0, 72, 0, 102, 96,
	113, 0, 97, 101, 85, 107, 65, 111, 105, 89,
	80, 81, 64, 0, 100, 75, 79, 74, 94, 108,
	109, 73, 122, 68, 117, 67, 69, 116, 93, 106,
	112, 90, 87, 66, 110, 88, 86, 82, 77, 0,
	0, 0, 104, 114, 123, 0, 0, 118, 119, 120,
	92, 70, 0, 0, 18, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 95, 0, 63, 0, 83,
	121, 99, 78, 115, 76, 0, 0, 0, 0, 0,
	84, 0, 0, 103, 91, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 40,
	0, 0, 227, 0, 0, 0, 0, 0, 0, 0,
	0, 71, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 225, 0, 0, 0, 0, 0,
	98, 0, 0, 0, 72, 0, 102, 96, 113, 0,
	97, 101, 85, 107, 65, 111, 105, 89, 80, 81,
	64, 0, 100, 75, 79, 74, 94, 108, 109, 73,
	122, 68, 117, 67, 69, 116, 93, 106, 112, 90,
	87, 66, 110, 88, 86, 82, 77, 0, 0, 0,
	104, 114, 123, 95, 0, 118, 119, 120, 92, 70,
	0, 0, 76, 0, 0, 0, 0, 0, 84, 0,
	0, 103, 91, 0, 0, 63, 0, 83, 121, 99,
	78, 115, 0, 0, 0, 0, 0, 0, 0, 0,
	61, 0, 0, 535, 0, 0, 536, 0, 0, 71,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 225, 0, 0, 0, 0, 0, 98, 0,
	0, 0, 72, 0, 102, 96, 113, 0, 97, 101,
	85, 107, 65, 111, 105, 89, 80, 81, 64, 0,
	100, 75, 79, 74, 94, 108, 109, 73, 122, 68,
	117, 67, 69, 116, 93, 106, 112, 90, 87, 66,
	110, 88, 86, 82, 77, 0, 0, 0, 104, 114,
	123, 0, 0, 118, 119, 120, 92, 70, 0, 0,
	0, 0, 0, 0, 0, 95, 0, 0, 0, 382,
	0, 0, 0, 63, 76, 83, 121, 99, 78, 115,
	84, 0, 0, 103, 91, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 0, 384, 0, 0, 0, 0, 0,
	0, 71, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 225, 0, 0, 0, 0, 0,
	98, 0, 0, 0, 72, 0, 102, 96, 113, 0,
	97, 101, 85, 107, 65, 111, 105, 89, 80, 81,
	64, 0, 100, 75, 79, 74, 94, 108, 109, 73,
	122, 68, 117, 67, 69, 116, 93, 106, 112, 90,
	87, 66, 110, 88, 86, 82, 77, 0, 0, 0,
	104, 114, 123, 95, 0, 118, 119, 120, 92, 70,
	0, 0, 76, 0, 0, 0, 0, 0, 84, 0,
	0, 103, 91, 0, 0, 63, 0, 83, 121, 99,
	78, 115, 0, 0, 0, 0, 0, 40, 0, 0,
	227, 0, 0, 0, 0, 0, 0, 0, 0, 71,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 225, 0, 0, 0, 0, 0, 98, 0,
	0, 0, 72, 0, 102, 96, 113, 0, 97, 101,
	85, 107, 65, 111, 105, 89, 80, 81, 64, 0,
	100, 75, 79, 74, 94, 108, 109, 73, 122, 68,
	117, 67, 69, 116, 93, 106, 112, 90, 87, 66,
	110, 88, 86, 82, 77, 0, 0, 0, 104, 114,
	123, 95, 0, 118, 119, 120, 92, 70, 0, 0,
	76, 0, 0, 0, 0, 0, 84, 0, 0, 103,
	91, 0, 0, 63, 0, 83, 121, 99, 78, 115,
	0, 0, 0, 0, 0, 0, 0, 0, 61, 0,
	803, 0, 0, 0, 0, 0, 0, 71, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	225, 0, 0, 0, 0, 0, 98, 0, 0, 0,
	72, 0, 102, 96, 113, 0, 97, 101, 85, 107,
	65, 111, 105, 89, 80, 81, 64, 0, 100, 75,
	79, 74, 94, 108, 109, 73, 122, 68, 117, 67,
	69, 116, 93, 106, 112, 90, 87, 66, 110, 88,
	86, 82, 77, 0, 0, 0, 104, 114, 123, 95,
	0, 118, 119, 120, 92, 70, 0, 0, 76, 0,
	0, 0, 0, 0, 84, 0, 0, 103, 91, 0,
	0, 63, 0, 83, 121, 99, 78, 115, 0, 0,
	0, 0, 0, 0, 0, 0, 227, 0, 384, 0,
	0, 0, 0, 0, 0, 71, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 225, 0,
	0, 0, 0, 0, 98, 0, 0, 0, 72, 0,
	102, 96, 113, 0, 97, 101, 85, 107, 65, 111,
	105, 89, 80, 81, 64, 0, 100, 75, 79, 74,
	94, 108, 109, 73, 122, 68, 117, 67, 69, 116,
	93, 106, 112, 90, 87, 66, 110, 88, 86, 82,
	77, 0, 0, 0, 104, 114, 123, 95, 0, 118,
	119, 120, 92, 70, 0, 361, 76, 0, 0, 0,
	0, 0, 84, 0, 0, 103, 91, 0, 0, 63,
	0, 83, 121, 99, 78, 115, 0, 0, 0, 0,
	0, 0, 0, 0, 227, 0, 0, 0, 0, 0,
	0, 0, 0, 71, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 225, 0, 0, 0,
	0, 0, 98, 0, 0, 0, 72, 0, 102, 96,
	113, 0, 97, 101, 85, 107, 65, 111, 105, 89,
	80, 81, 64, 0, 100, 75, 79, 74, 94, 108,
	109, 73, 122, 68, 117, 67, 69, 116, 93, 106,
	112, 90, 87, 66, 110, 88, 86, 82, 77, 259,
	0, 0, 104, 114, 123, 0, 95, 118, 119, 120,
	92, 70, 0, 0, 0, 76, 0, 0, 0, 0,
	0, 84, 0, 0, 103, 91, 0, 63, 0, 83,
	121, 99, 78, 115, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 227, 0, 0, 0, 0, 0, 0,
	0, 0, 71, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 225, 0, 0, 0, 0,
	0, 98, 0, 0, 0, 72, 0, 102, 96, 113,
	0, 97, 101, 85, 107, 65, 111, 105, 89, 80,
	81, 64, 0, 100, 75, 79, 74, 94, 108, 109,
	73, 122, 68, 117, 67, 69, 116, 93, 106, 112,
	90, 87, 66, 110, 88, 86, 82, 77, 0, 0,
	0, 104, 114, 123, 95, 0, 118, 119, 120, 92,
	70, 0, 0, 76, 0, 0, 0, 0, 0, 84,
	0, 0, 103, 91, 0, 0, 63, 0, 83, 121,
	99, 78, 115, 0, 0, 0, 0, 0, 0, 0,
	0, 61, 0, 0, 0, 0, 0, 0, 0, 0,
	71, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 225, 0, 0, 0, 0, 0, 98,
	0, 0, 0, 72, 0, 102, 96, 113, 0, 97,
	101, 85, 107, 65, 111, 105, 89, 80, 81, 64,
	0, 100, 75, 79, 74, 94, 108, 109, 73, 122,
	68, 117, 67, 69, 116, 93, 106, 112, 90, 87,
	66, 110, 88, 86, 82, 77, 0, 0, 0, 104,
	114, 123, 95, 0, 118, 119, 120, 92, 70, 0,
	0, 76, 0, 0, 0, 0, 0, 84, 0, 0,
	103, 91, 0, 0, 63, 0, 83, 121, 99, 78,
	115, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	0, 0, 0, 0, 0, 0, 0, 0, 71, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 225, 0, 0, 0, 0, 0, 98, 0, 0,
	0, 72, 0, 102, 96, 113, 0, 97, 101, 85,
	107, 65, 111, 105, 89, 80, 81, 64, 0, 100,
	75, 79, 74, 94, 108, 109, 73, 122, 68, 117,
	67, 69, 116, 93, 106, 112, 90, 87, 66, 110,
	88, 86, 82, 77, 0, 0, 0, 104, 114, 123,
	95, 0, 118, 119, 120, 92, 70, 0, 0, 76,
	0, 0, 0, 0, 0, 84, 0, 0, 103, 91,
	0, 0, 63, 0, 83, 121, 99, 78, 115, 0,
	0, 0, 0, 0, 0, 0, 0, 227, 0, 0,
	0, 0, 0, 0, 0, 0, 71, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 225,
	0, 0, 0, 0, 0, 98, 0, 0, 0, 72,
	0, 102, 96, 113, 0, 97, 101, 85, 107, 65,
	111, 105, 89, 80, 81, 64, 0, 100, 75, 79,
	74, 94, 108, 109, 73, 122, 68, 117, 67, 69,
	116, 93, 106, 112, 90, 87, 66, 110, 88, 86,
	82, 77, 0, 0, 0, 104, 114, 123, 95, 0,
	118, 119, 120, 92, 70, 0, 0, 76, 0, 0,
	0, 0, 0, 84, 0, 0, 103, 91, 0, 0,
	63, 0, 83, 121, 99, 78, 115, 0, 0, 0,
	0, 0, 0, 0, 0, 271, 0, 0, 0, 0,
	0, 0, 0, 0, 71, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 225, 0, 0,
	0, 0, 0, 98, 0, 0, 0, 72, 0, 102,
	96, 113, 0, 97, 101, 85, 107, 65, 111, 105,
	89, 80, 81, 64, 0, 100, 75, 79, 74, 94,
	108, 109, 73, 122, 68, 117, 67, 265, 116, 93,
	106, 112, 90, 87, 66, 110, 88, 86, 82, 77,
	0, 0, 0, 104, 114, 123, 0, 0, 118, 119,
	120, 266, 264, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 63, 0,
	83, 121, 99, 78, 115,
}
var yyPact = [...]int{

	995, -1000, -154, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 602, 626, -1000, -1000,
	-1000, -1000, -1000, 442, 5332, 18, 52, 34, 48, 3507,
	7283, -1000, -1000, -1000, -1000, -1000, -1000, 458, -1000, -1000,
	-1000, -1000, -1000, 594, 600, 469, 571, 501, -1000, 22,
	6176, 6809, 7441, -1000, 336, 44, 7283, -122, 10, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 47, 7283, -1000, 7283, 9, 319,
	9, 7283, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 240, 547, 4631, 4631, 602,
	-1000, 458, -1000, -1000, -1000, 530, -1000, -1000, 176, 6650,
	411, 471, -1000, -1000, -1000, 566, 5688, 6018, 84, 7283,
	113, -1000, 2711, 413, -1000, 535, -1000, -1000, 147, -1000,
	83, -1000, -1000, 334, -1000, 1418, 310, 2313, 30, 7283,
	162, 7283, 2313, 26, 7283, 564, 450, 7283, -1000, -1000,
	-1000, -1000, -1000, 620, 106, 234, -1000, 4631, 1139, 420,
	420, -1000, -1000, 62, -1000, -1000, 4987, 4987, 4987, 4987,
	4987, 4987, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 420, 80, -1000, 4444,
	420, 420, 420, 420, 420, 420, 4631, 420, 420, 420,
	420, 420, 420, 420, 420, 420, 420, 420, 420, 420,
	377, -1000, 186, 594, 240, 501, 5846, 461, -1000, -1000,
	421, 7283, -1000, 7125, 6176, 6176, 6176, 6176, -1000, 495,
	494, -1000, 482, 480, 486, 7283, -1000, 332, 240, 5688,
	77, -1000, 6492, -1000, -1000, 3308, 615, 6176, 7283, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 7125, -1000, 3881, 3109,
	1915, 91, 214, -94, -1000, -1000, 422, -1000, 422, 422,
	422, 422, -70, -70, -70, -70, -1000, -1000, -1000, -1000,
	-1000, 439, -1000, 422, 422, 422, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 435, 435, 435, 431, 431, -1,
	-1000, -1000, -1000, 7283, -1000, 563, 67, -1000, 7283, -1000,
	-1000, 7283, 2313, -1000, 506, 4631, 4631, 178, 4631, 4631,
	119, 4987, 237, 129, 4987, 4987, 4987, 4987, 4987, 4987,
	4987, 4987, 4987, 4987, 4987, 4987, 4987, 4987, 4987, 219,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 308, -1000,
	458, 599, 599, 94, 94, 94, 94, 94, 1339, 3694,
	3109, 325, 134, 4444, 4068, 4068, 4631, 4631, 4068, 588,
	153, 134, 6967, -1000, 240, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 4068, 4068, 4068, 4068, 4631, -1000, -1000, -1000,
	547, -1000, 588, 604, -1000, 523, 522, 4068, -1000, 449,
	7125, 420, -1000, 5510, -1000, 451, -1000, 120, 471, 447,
	314, -1000, -1000, -1000, -1000, 491, -1000, 483, -1000, -1000,
	-1000, -1000, -1000, 240, -1000, 39, 38, 37, -1000, -1000,
	-1000, -1000, 602, 4631, 390, -1000, -1000, -1000, 134, -1000,
	-1000, -1000, -1000, 69, -1000, 362, 1716, -1000, -1000, -1000,
	-1000, -1000, -1000, 432, 553, 114, 283, -1000, -1000, 538,
	-1000, 170, -103, -1000, -1000, 230, -70, -70, -1000, -1000,
	89, 533, 89, 89, 89, 243, -1000, -1000, -1000, -1000,
	201, -1000, -1000, -1000, 195, -1000, 446, 6967, 2313, -1000,
	-1000, 105, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -15, -1000, -1000, -1000, 504, 119,
	136, -1000, -1000, 239, -1000, -1000, 134, 134, 1434, -1000,
	-1000, -1000, -1000, 237, 4987, 4987, 4987, 982, 1434, 1354,
	169, 1499, 94, 85, 85, 93, 93, 93, 93, 93,
	1000, 1000, -1000, -1000, -1000, 240, -1000, -1000, -1000, 240,
	4068, 359, -1000, -1000, 5174, 68, 420, 4631, -1000, 276,
	276, 70, 212, 276, 4068, 154, -1000, 4631, 240, -1000,
	276, 240, 276, 276, -1000, -1000, 7283, -1000, -1000, -1000,
	-1000, 399, -1000, 556, 354, 353, -1000, -1000, 4255, 240,
	323, 66, 602, 7125, 4631, 4631, 4631, -1000, -1000, -1000,
	420, 420, 420, 594, 134, -1000, 2910, 1915, -1000, 1915,
	6967, -1000, 264, -1000, -1000, -88, 251, -1000, -1000, -1000,
	340, 89, 89, -1000, 257, 122, -1000, -1000, -1000, 318,
	-1000, 358, 299, 7283, -1000, -1000, -1000, 7283, -1000, -1000,
	-1000, -1000, -1000, 6967, -1000, -1000, -1000, -1000, -1000, 982,
	1434, 1247, -1000, 4987, 4987, -1000, -1000, 276, 4068, -1000,
	-1000, 6334, -1000, -1000, 2512, 4068, 134, -1000, -1000, -16,
	219, -16, -130, 416, 130, -1000, 4631, 171, -1000, -1000,
	-1000, -1000, -1000, -1000, 615, 6176, 552, -1000, 420, -1000,
	-1000, 443, 6967, 6967, 594, -1000, 134, 134, 134, 6967,
	6967, 6967, -1000, -1000, 1716, -1000, 273, -1000, 422, -1000,
	92, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 238, 193, -1000, 184, 2313, -1000, -1000,
	559, -1000, 4987, 1434, 1434, -1000, -1000, -1000, -1000, 65,
	240, 240, 422, 422, -1000, 422, 431, -1000, 422, -47,
	422, -54, 240, 240, 420, -127, -1000, 134, 4631, 611,
	355, 619, -1000, 420, -1000, 458, 61, -1000, -1000, 271,
	-1000, 271, 271, -1000, 6967, -1000, 173, 551, -1000, 543,
	-1000, 339, 326, -1000, 420, 1434, 2114, -1000, -1000, -1000,
	31, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 4987,
	240, 235, 134, 607, 598, 7125, 353, 240, 6967, -1000,
	6967, -1000, -1000, -1000, -1000, 220, -1000, -1000, -1000, -1000,
	-18, -1000, -1000, -1000, 8, -1000, -1000, -1000, 4631, 4631,
	344, -1000, -1000, -1000, -1000, 269, -1000, 6967, 240, 20,
	-142, 134, 343, -1000, -18, 512, -1000, 499, -135, -147,
	-1000, -21, -1000, 472, -1000, -26, -140, 420, -145, 4809,
	-148, 1202, 240, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 802, 11, 506, 800, 799, 798, 797, 796, 795,
	791, 790, 787, 786, 785, 784, 781, 778, 775, 70,
	773, 771, 766, 41, 763, 48, 761, 760, 27, 144,
	25, 23, 231, 759, 14, 78, 80, 757, 756, 754,
	53, 752, 928, 751, 750, 748, 9, 37, 747, 746,
	744, 740, 736, 44, 127, 731, 730, 729, 728, 726,
	724, 35, 6, 8, 4, 16, 722, 112, 19, 721,
	39, 720, 719, 718, 713, 34, 711, 42, 710, 20,
	43, 709, 30, 7, 708, 706, 28, 47, 705, 497,
	702, 116, 701, 700, 698, 696, 695, 694, 31, 32,
	224, 22, 21, 692, 686, 883, 33, 58, 685, 684,
	40, 13, 17, 18, 683, 681, 680, 679, 678, 676,
	675, 147, 674, 673, 10, 26, 672, 666, 52, 15,
	665, 662, 652, 651, 45, 648, 36, 647, 646, 645,
	29, 24, 644, 5, 643, 638, 2, 637, 636, 635,
	0, 3, 634, 633, 115,
}
var yyR1 = [...]int{

	0, 148, 149, 149, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	3, 4, 4, 5, 5, 6, 6, 22, 22, 7,
	8, 8, 152, 152, 38, 38, 9, 9, 85, 85,
	85, 104, 104, 84, 84, 87, 87, 50, 50, 10,
	10, 10, 10, 14, 137, 138, 138, 138, 134, 115,
	115, 115, 118, 118, 116, 116, 116, 116, 116, 116,
	116, 117, 117, 117, 117, 117, 119, 119, 119, 119,
	119, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 133, 133, 121, 121, 128,
	128, 129, 129, 129, 126, 126, 127, 127, 130, 130,
	130, 122, 122, 122, 122, 122, 131, 131, 124, 124,
	124, 125, 125, 132, 132, 132, 132, 132, 123, 123,
	135, 142, 142, 142, 142, 136, 136, 144, 144, 143,
	139, 139, 139, 140, 140, 140, 141, 141, 141, 11,
	11, 11, 11, 11, 147, 145, 145, 146, 146, 12,
	13, 13, 13, 15, 114, 114, 114, 16, 17, 17,
	18, 18, 18, 18, 18, 18, 153, 19, 20, 20,
	21, 21, 21, 25, 25, 25, 23, 23, 24, 24,
	30, 30, 29, 29, 31, 31, 31, 31, 103, 103,
	103, 102, 102, 33, 33, 34, 34, 35, 35, 36,
	36, 36, 44, 37, 37, 37, 37, 109, 109, 108,
	108, 108, 107, 107, 39, 39, 39, 39, 40, 40,
	40, 40, 41, 41, 43, 43, 42, 42, 45, 45,
	45, 45, 46, 46, 47, 47, 32, 32, 32, 32,
	32, 32, 32, 90, 90, 49, 49, 48, 48, 48,
	48, 48, 48, 48, 48, 48, 48, 60, 60, 60,
	60, 60, 60, 51, 51, 51, 51, 51, 51, 51,
	28, 28, 61, 61, 61, 67, 62, 62, 54, 54,
	54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
	54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
	54, 54, 54, 54, 54, 54, 54, 54, 58, 58,
	58, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	57, 57, 57, 57, 57, 57, 57, 57, 154, 154,
	59, 59, 59, 59, 26, 26, 26, 26, 26, 112,
	112, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 71, 71, 27, 27, 69, 69,
	70, 72, 72, 68, 68, 68, 53, 53, 53, 53,
	53, 53, 53, 53, 55, 55, 55, 73, 73, 74,
	74, 75, 75, 76, 76, 77, 78, 78, 78, 79,
	79, 79, 79, 80, 80, 80, 52, 52, 52, 52,
	52, 52, 81, 81, 81, 81, 82, 82, 63, 63,
	65, 65, 64, 66, 83, 83, 86, 88, 88, 91,
	91, 92, 92, 89, 89, 93, 93, 93, 93, 93,
	93, 93, 93, 93, 93, 93, 94, 94, 94, 95,
	95, 96, 96, 96, 97, 97, 100, 100, 101, 101,
	105, 105, 106, 106, 98, 98, 98, 98, 98, 98,
	98, 98, 98, 98, 98, 98, 98, 98, 98, 98,
	98, 98, 98, 98, 98, 98, 98, 98, 98, 98,
	98, 98, 98, 98, 98, 98, 98, 98, 98, 98,
	98, 98, 98, 98, 98, 98, 98, 98, 98, 98,
	98, 98, 98, 98, 98, 98, 98, 98, 98, 98,
	98, 98, 98, 98, 98, 98, 98, 98, 98, 98,
	98, 98, 98, 98, 98, 98, 98, 98, 98, 98,
	98, 98, 98, 98, 98, 98, 98, 98, 98, 98,
	98, 98, 98, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 150, 151, 110, 111, 111,
	111,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 6, 7,
	10, 1, 3, 1, 3, 6, 7, 1, 1, 8,
	7, 6, 1, 1, 1, 3, 5, 3, 1, 2,
	1, 1, 1, 1, 3, 3, 3, 1, 1, 2,
	8, 4, 6, 4, 4, 1, 3, 3, 7, 3,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 2, 1, 2, 2, 2,
	1, 4, 4, 2, 2, 3, 3, 3, 3, 1,
	1, 1, 1, 1, 4, 1, 3, 0, 3, 0,
	5, 0, 3, 5, 0, 1, 0, 1, 0, 1,
	2, 0, 2, 2, 2, 2, 0, 1, 0, 3,
	3, 0, 2, 0, 2, 1, 2, 1, 0, 2,
	4, 2, 3, 2, 2, 1, 1, 1, 3, 2,
	0, 1, 3, 1, 2, 3, 1, 1, 1, 6,
	7, 7, 4, 5, 7, 1, 3, 8, 8, 5,
	4, 5, 5, 3, 1, 1, 1, 3, 2, 1,
	2, 2, 2, 2, 2, 2, 0, 2, 0, 2,
	1, 2, 2, 0, 1, 1, 0, 1, 0, 1,
	0, 1, 1, 3, 1, 2, 3, 5, 0, 1,
	2, 1, 1, 0, 2, 1, 3, 1, 1, 1,
	3, 3, 3, 3, 5, 5, 3, 0, 1, 0,
	1, 2, 1, 1, 1, 2, 2, 1, 2, 3,
	2, 3, 2, 2, 2, 1, 1, 3, 0, 5,
	5, 5, 1, 3, 0, 2, 1, 3, 3, 2,
	3, 1, 2, 0, 3, 1, 1, 3, 3, 4,
	4, 5, 3, 4, 5, 6, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	0, 2, 1, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	2, 2, 2, 3, 1, 1, 1, 1, 4, 5,
	6, 4, 4, 6, 6, 6, 9, 7, 5, 4,
	2, 2, 2, 2, 2, 2, 2, 2, 0, 2,
	4, 4, 4, 4, 0, 3, 4, 7, 3, 1,
	1, 2, 3, 3, 1, 2, 2, 1, 2, 1,
	2, 2, 1, 2, 0, 1, 0, 2, 1, 2,
	4, 0, 2, 1, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 0, 3, 0,
	2, 0, 3, 1, 3, 2, 0, 1, 1, 0,
	2, 4, 4, 0, 2, 4, 2, 1, 3, 5,
	4, 6, 1, 3, 3, 5, 0, 5, 1, 3,
	1, 2, 3, 1, 1, 3, 3, 1, 1, 0,
	2, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 1, 1,
	1, 0, 1, 1, 0, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
	1,
}
var yyChk = [...]int{

	-1000, -148, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -15, -16, -17, -18, -3, -4, 6, -22,
	8, 9, 29, -14, 109, 110, 112, 111, 113, 123,
	47, 24, 124, 125, 128, 129, 130, -150, 7, 191,
	51, -149, 204, -75, 14, -21, 5, -19, -153, -19,
	-19, -19, -19, -137, 51, -96, 116, 68, 114, 120,
	-100, 54, -99, 197, 142, 136, 163, 155, 153, 156,
	181, 63, 126, 151, 147, 145, 26, 168, 202, 146,
	140, 141, 167, 199, 32, 134, 166, 162, 165, 139,
	161, 36, 180, 158, 148, 17, 129, 132, 122, 201,
	144, 133, 128, 35, 172, 138, 159, 135, 149, 150,
	164, 137, 160, 130, 173, 203, 157, 154, 177, 178,
	179, 200, 152, 174, -89, 116, 118, 114, 114, 115,
	116, 114, -114, 54, -98, -99, 69, 21, 23, 170,
	72, 104, 15, 73, 103, 192, 109, 45, 184, 185,
	182, 183, 175, 28, 9, 24, 124, 20, 97, 111,
	76, 77, 127, 22, 125, 67, 18, 48, 10, 12,
	13, 119, 118, 88, 115, 43, 7, 105, 25, 85,
	39, 27, 41, 86, 16, 186, 187, 30, 196, 131,
	99, 46, 33, 70, 65, 50, 49, 68, 14, 44,
	87, 112, 191, 42, 6, 195, 29, 123, 40, 114,
	176, 75, 117, 66, 5, 120, 8, 47, 121, 188,
	189, 190, 31, 74, 11, 116, -105, 54, -99, -110,
	-110, -110, -110, -110, -110, -2, -79, 16, 15, -5,
	-3, -150, 6, 19, 20, -25, 37, 38, -20, -89,
	-34, -35, -36, -37, -44, -67, -150, -42, -105, 10,
	-38, -42, -85, -84, 181, 156, 180, -87, -68, -100,
	-105, 54, -99, -138, -134, 54, 115, -42, 191, -92,
	119, 114, -42, -42, -91, 119, 54, -91, -42, -110,
	-151, 53, -80, 18, 30, -32, -48, 70, -54, 28,
	22, -53, -49, -68, -66, -67, 104, 93, 94, 101,
	71, 105, -58, -56, -57, -59, 56, 55, 64, 57,
	58, 59, 60, 65, 66, 67, -100, -105, -64, -150,
	41, 42, 192, 193, 196, 194, 73, 31, 182, 190,
	189, 188, 186, 187, 184, 185, 119, 183, 99, 191,
	-76, -77, -32, -75, -2, -19, 33, -23, 20, 62,
	-43, 25, -42, 29, 52, -39, -40, -41, 39, 43,
	45, 40, 41, 42, 46, -109, 21, -34, -2, -150,
	-108, -107, 21, -105, 56, 106, -42, -152, 52, 10,
	121, -104, -101, 56, -100, -98, 52, 29, 78, 106,
	53, 52, -115, -118, -120, -119, -116, -117, 153, 154,
	104, 157, 159, 160, 161, 162, 163, 164, 165, 166,
	167, 168, 126, 149, 150, 151, 152, 136, 137, 138,
	139, 140, 141, 142, 144, 145, 146, 147, 148, 54,
	-111, -150, -101, 116, -42, 70, -42, -111, 117, -42,
	22, 49, -42, 8, 88, 69, 68, 85, 52, 17,
	-32, -51, 88, 70, 86, 87, 72, 90, 89, 100,
	93, 94, 95, 96, 97, 98, 99, 91, 92, 103,
	78, 79, 80, 81, 82, 83, 84, -90, -150, -67,
	-150, 107, 108, -54, -54, -54, -54, -54, -54, -150,
	106, -62, -32, -150, -150, -150, -150, -150, -150, -150,
	-71, -32, -150, -154, -150, -154, -154, -154, -154, -154,
	-154, -154, -150, -150, -150, -150, 52, -78, 23, 24,
	-79, -151, -25, -55, -100, 57, 60, -24, 40, -52,
	29, 31, -2, -150, -42, -83, -86, -68, -35, -36,
	-35, -36, 39, 39, 39, 44, 39, 44, 39, -40,
	-105, -151, -151, -2, -45, 47, 118, 48, -107, -106,
	-105, -98, -47, 11, -34, -42, -110, -87, -32, -50,
	49, 50, -101, -106, -98, -139, -140, -141, -101, 56,
	57, -134, -135, -142, 122, 120, -136, 115, 27, -130,
	65, 70, -126, 173, -121, 51, -121, -121, -121, -121,
	-124, 156, -124, -124, -124, 51, -121, -121, -121, -128,
	51, -128, -128, -129, 51, -129, -97, 121, -42, 22,
	-93, 112, -147, 110, 170, 156, 63, 28, 111, 14,
	192, 132, 203, 54, 133, -42, -42, -111, 35, -32,
	-32, -60, 65, 70, 66, 67, -32, -32, -54, -61,
	-64, -67, 61, 88, 86, 87, 72, -54, -54, -54,
	-54, -54, -54, -54, -54, -54, -54, -54, -54, -54,
	-54, -54, -112, 54, 56, 54, -53, -53, -100, -30,
	20, -29, -31, 95, -32, -105, -101, 52, -151, -29,
	-29, -32, -32, -29, -23, -69, -70, 74, -100, -151,
	-29, -30, -29, -29, -77, -80, -88, 18, 10, 31,
	31, -29, -82, 49, -83, -63, -65, -64, -150, -2,
	-81, -100, -47, 52, 78, 49, 49, 39, 39, -151,
	115, 115, 115, -75, -32, -47, 106, 52, -141, 78,
	51, 27, -136, 54, 54, -122, 28, 65, -127, 174,
	57, -124, -124, -125, 103, 29, -125, -125, -125, -133,
	56, 57, 57, 49, -100, -111, -110, -94, -95, 117,
	21, 115, 27, 132, 36, 65, 66, 67, -61, -54,
	-54, -54, -28, 127, 69, -151, -151, -29, 52, -103,
	-102, 21, -100, 56, 106, -150, -32, -151, -151, 52,
	121, 21, -151, -29, -72, -70, 76, -32, -151, -151,
	-151, -151, -151, -42, -33, 10, 26, -82, 52, -151,
	-151, -151, 52, 106, -75, -86, -32, -32, -32, -150,
	-150, -150, -79, -101, -140, -141, -144, -143, -100, 54,
	-131, 170, 56, 57, 58, 65, 53, -125, -125, 54,
	54, 104, 53, 52, 52, 53, 52, -42, -42, -110,
	-100, -28, 69, -54, -54, -151, -31, -102, 95, -106,
	-30, -113, 104, 153, 126, 151, 147, 167, 158, 172,
	149, 173, -112, -113, 197, -75, 77, -32, 75, -47,
	-34, 27, -65, 31, -2, -150, -100, -100, -79, -46,
	-100, -46, -46, 53, 52, -121, -132, 122, 27, 120,
	56, 57, 57, -111, 25, -54, 106, -151, -151, -121,
	-121, -121, -129, -121, 141, -121, 141, -151, -151, -150,
	-27, 195, -32, -73, 12, 8, -63, -2, 106, -151,
	52, -151, -151, -143, -123, 63, 27, 27, 53, 53,
	-150, 95, -124, 54, -54, -151, 56, -74, 13, 15,
	-83, -151, -100, -100, 56, -145, -146, 132, -26, 88,
	200, -32, -62, -151, 52, -100, -151, 198, 46, 201,
	-146, 31, 36, 199, 202, 134, 36, 135, 200, -150,
	201, -54, 131, 202, -151, -151,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 391, 0, 176, 176,
	176, 176, 176, 0, 451, 433, 0, 0, 0, 0,
	169, 617, 617, 617, 617, 617, 617, 0, 27, 28,
	615, 1, 3, 399, 0, 0, 180, 183, 178, 433,
	0, 0, 0, 49, 0, 0, 608, 0, 431, 452,
	453, 456, 457, 553, 554, 555, 556, 557, 558, 559,
	560, 561, 562, 563, 564, 565, 566, 567, 568, 569,
	570, 571, 572, 573, 574, 575, 576, 577, 578, 579,
	580, 581, 582, 583, 584, 585, 586, 587, 588, 589,
	590, 591, 592, 593, 594, 595, 596, 597, 598, 599,
	600, 601, 602, 603, 604, 605, 606, 607, 609, 610,
	611, 612, 613, 614, 0, 0, 434, 0, 429, 0,
	429, 0, 617, 164, 165, 166, 464, 465, 466, 467,
	468, 469, 470, 471, 472, 473, 474, 475, 476, 477,
	478, 479, 480, 481, 482, 483, 484, 485, 486, 487,
	488, 489, 490, 491, 492, 493, 494, 495, 496, 497,
	498, 499, 500, 501, 502, 503, 504, 505, 506, 507,
	508, 509, 510, 511, 512, 513, 514, 515, 516, 517,
	518, 519, 520, 521, 522, 523, 524, 525, 526, 527,
	528, 529, 530, 531, 532, 533, 534, 535, 536, 537,
	538, 539, 540, 541, 542, 543, 544, 545, 546, 547,
	548, 549, 550, 551, 552, 608, 168, 460, 461, 170,
	171, 172, 173, 174, 175, 21, 403, 0, 0, 391,
	23, 0, 176, 181, 182, 186, 184, 185, 177, 0,
	0, 205, 207, 208, 209, 217, 0, 219, 236, 0,
	0, 34, 0, 37, -2, 559, -2, 43, 0, 373,
	0, -2, -2, 0, 55, 0, 0, 618, 0, 0,
	0, 0, 618, 0, 0, 0, 0, 0, 163, 167,
	22, 616, 17, 0, 0, 400, 246, 0, 251, 253,
	0, 288, 289, 290, 291, 292, 0, 0, 0, 0,
	0, 0, 314, 315, 316, 317, 376, 377, 378, 379,
	380, 381, 382, 383, 255, 256, 373, 0, 423, 0,
	0, 0, 0, 0, 0, 0, 364, 0, 338, 338,
	338, 338, 338, 338, 338, 338, 0, 0, 0, 0,
	392, 393, 396, 399, 21, 183, 0, 188, 187, 179,
	0, 0, 235, 0, 0, 0, 0, 0, 224, 0,
	0, 227, 0, 0, 0, 0, 218, 0, 21, 0,
	238, 220, 0, 222, 223, 0, 244, 0, 0, 32,
	33, 617, 41, 42, 458, 459, 0, 39, 0, 0,
	140, 0, 108, 104, 60, 61, 97, 63, 97, 97,
	97, 97, 118, 118, 118, 118, 89, 90, 91, 92,
	93, 0, 76, 97, 97, 97, 80, 64, 65, 66,
	67, 68, 69, 70, 99, 99, 99, 101, 101, 454,
	51, 619, 620, 0, 53, 0, 0, 152, 0, 160,
	430, 0, 618, 404, 0, 0, 0, 0, 0, 0,
	249, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	273, 274, 275, 276, 277, 278, 279, 252, 0, 266,
	0, 0, 0, 308, 309, 310, 311, 312, 0, 190,
	0, 0, 286, 0, 0, 0, 0, 0, 0, 186,
	0, 365, 0, 330, 0, 331, 332, 333, 334, 335,
	336, 337, 0, 190, 0, 0, 0, 395, 397, 398,
	403, 24, 186, 0, 384, 0, 0, 0, 189, 416,
	0, 0, -2, 0, 234, 244, 424, 0, 206, 213,
	0, 216, 225, 226, 228, 0, 230, 0, 232, 233,
	210, 211, 285, 21, 212, 0, 0, 0, 221, 237,
	462, 463, 391, 0, 244, 35, 36, 44, 45, 46,
	47, 48, 374, 0, -2, 54, 141, 143, 146, 147,
	148, 56, 57, 0, 0, 0, 0, 135, 136, 111,
	109, 0, 106, 105, 62, 0, 118, 118, 83, 84,
	121, 0, 121, 121, 121, 0, 77, 78, 79, 71,
	0, 72, 73, 74, 0, 75, 0, 0, 618, 432,
	617, 446, 153, 435, 436, 437, 438, 439, 440, 441,
	442, 443, 444, 445, 0, 159, 161, 162, 0, 247,
	248, 250, 267, 0, 269, 271, 401, 402, 257, 258,
	282, 283, 284, 0, 0, 0, 0, 280, 262, 0,
	293, 294, 295, 296, 297, 298, 299, 300, 301, 302,
	303, 304, 307, 349, 350, 0, 305, 306, 313, 0,
	0, 191, 192, 194, 198, 0, 374, 0, 422, 0,
	0, 0, 0, 0, 0, 371, 368, 0, 0, 339,
	0, 0, 0, 0, 394, 18, 0, 427, 428, 385,
	386, 203, 25, 0, 416, 406, 418, 420, 0, 21,
	0, 412, 391, 0, 0, 0, 0, 229, 231, -2,
	0, 0, 0, 399, 245, 31, 0, 0, 144, 0,
	0, 131, 0, 133, 134, 116, 0, 110, 59, 107,
	0, 121, 121, 85, 0, 0, 86, 87, 88, 0,
	95, 0, 0, 0, 455, 52, 149, 0, 617, 447,
	448, 449, 450, 0, 405, 268, 270, 272, 259, 280,
	263, 0, 260, 0, 0, 254, 318, 0, 0, 195,
	199, 0, 201, 202, 0, 190, 287, 321, 322, 0,
	0, 0, 0, 391, 0, 369, 0, 0, 329, 340,
	341, 342, 343, 19, 244, 0, 0, 26, 0, 421,
	-2, 0, 0, 0, 399, 425, 426, 214, 215, 0,
	0, 0, 30, 375, 142, 145, 0, 137, 97, 132,
	123, 117, 112, 113, 114, 115, 98, 81, 82, 122,
	119, 120, 94, 0, 0, 102, 0, 618, 150, 151,
	0, 261, 0, 281, 264, 319, 193, 200, 196, 0,
	0, 0, 97, 97, 354, 97, 101, 357, 97, 359,
	97, 362, 0, 0, 0, 366, 328, 372, 0, 387,
	204, 0, 419, 0, -2, 0, 414, 413, 29, 0,
	242, 0, 0, 130, 0, 139, 128, 0, 125, 127,
	96, 0, 0, 50, 0, 265, 0, 320, 323, 351,
	118, 355, 356, 358, 360, 361, 363, 325, 324, 0,
	0, 0, 370, 389, 0, 0, 409, 21, 0, 239,
	0, 240, 241, 138, 58, 0, 124, 126, 100, 103,
	0, 197, 352, 353, 344, 327, 367, 20, 0, 0,
	417, -2, 415, 243, 129, 0, 155, 0, 0, 0,
	0, 390, 388, 154, 0, 0, 326, 0, 0, 0,
	156, 0, 345, 0, 348, 0, 346, 0, 0, 0,
	0, 0, 0, 347, 157, 158,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 71, 3, 3, 3, 98, 90, 3,
	51, 53, 95, 93, 52, 94, 106, 96, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 204,
	79, 78, 80, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 100, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 89, 3, 101,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 72, 73, 74, 75,
	76, 77, 81, 82, 83, 84, 85, 86, 87, 88,
	91, 92, 97, 99, 102, 103, 104, 105, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:272
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:277
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:278
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:282
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 17:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:300
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 18:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:308
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 19:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:312
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 20:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:319
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:325
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:329
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:335
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 24:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:339
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:346
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:357
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:369
		{
			yyVAL.str = InsertStr
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:373
		{
			yyVAL.str = ReplaceStr
		}
	case 29:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:379
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:385
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 31:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:389
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:394
		{
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:395
		{
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:399
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:403
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 36:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:409
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Charset: yyDollar[4].colIdent}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:413
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].updateExprs}
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:424
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:428
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:434
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:438
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:444
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:448
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].setVal}
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:454
		{
			yyVAL.setVal = SetVal{yyDollar[1].bytes}
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:458
		{
			yyVAL.setVal = SetVal{yyDollar[1].bytes}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:464
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 50:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:469
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:474
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 52:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:478
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:484
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:491
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:498
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:503
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:507
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 58:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:513
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[5].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[6].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[7].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:523
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:533
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:538
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:544
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:548
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:552
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:556
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:560
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:564
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:568
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:574
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:580
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:586
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:592
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:598
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:606
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:610
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:614
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:618
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:622
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:628
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:632
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:636
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:640
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:644
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:648
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:652
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:656
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:660
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:664
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:668
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:672
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:676
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:680
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:686
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:691
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 97:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:696
		{
			yyVAL.optVal = nil
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:700
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:705
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 100:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:709
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 101:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:717
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:721
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 103:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:727
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 104:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:735
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:739
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 106:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:744
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:748
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:754
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:758
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:762
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 111:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:767
		{
			yyVAL.optVal = nil
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:771
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:775
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:779
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:783
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 116:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:788
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:792
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 118:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:797
		{
			yyVAL.str = ""
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:801
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:805
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:810
		{
			yyVAL.str = ""
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:814
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 123:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:819
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:823
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:827
		{
			yyVAL.colKeyOpt = colKey
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:831
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:835
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:840
		{
			yyVAL.optVal = nil
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:844
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 130:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:850
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:856
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:860
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:864
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:868
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:874
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:878
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:884
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:888
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:894
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:899
		{
			yyVAL.str = ""
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:903
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:907
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:915
		{
			yyVAL.str = yyDollar[1].str
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:919
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:923
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:929
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:933
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:937
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:943
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 150:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:947
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 151:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:952
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 152:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:957
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 153:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:961
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 154:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:967
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:973
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:977
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 157:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:983
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 158:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:987
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 159:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:993
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 160:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:999
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 161:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1007
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 162:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1012
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1022
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1028
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1032
		{
			switch v := string(yyDollar[1].bytes); v {
			case ShowDatabasesStr, ShowTablesStr:
				yyVAL.str = v
			default:
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1041
		{
			switch v := string(yyDollar[1].bytes); v {
			case ShowKeyspacesStr, ShowShardsStr, ShowVSchemaTablesStr:
				yyVAL.str = v
			default:
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1052
		{
			yyVAL.statement = &Show{Type: yyDollar[2].str}
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1058
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1062
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1068
		{
			yyVAL.statement = &OtherRead{}
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1072
		{
			yyVAL.statement = &OtherRead{}
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1076
		{
			yyVAL.statement = &OtherRead{}
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1080
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1084
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1088
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1093
		{
			setAllowComments(yylex, true)
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1097
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 178:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1103
		{
			yyVAL.bytes2 = nil
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1107
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1113
		{
			yyVAL.str = UnionStr
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1117
		{
			yyVAL.str = UnionAllStr
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1121
		{
			yyVAL.str = UnionDistinctStr
		}
	case 183:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1126
		{
			yyVAL.str = ""
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1130
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1134
		{
			yyVAL.str = SQLCacheStr
		}
	case 186:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1139
		{
			yyVAL.str = ""
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1143
		{
			yyVAL.str = DistinctStr
		}
	case 188:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1148
		{
			yyVAL.str = ""
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1152
		{
			yyVAL.str = StraightJoinHint
		}
	case 190:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1157
		{
			yyVAL.selectExprs = nil
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1161
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1167
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1171
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1177
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1181
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1185
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 197:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1189
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 198:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1194
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1198
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1202
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1209
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 203:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1214
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1218
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1224
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1228
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1238
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1242
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1246
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1252
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1265
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 214:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1269
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 215:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1273
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1277
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 217:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1282
		{
			yyVAL.empty = struct{}{}
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1284
		{
			yyVAL.empty = struct{}{}
		}
	case 219:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1287
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1291
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1295
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1302
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1308
		{
			yyVAL.str = JoinStr
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1312
		{
			yyVAL.str = JoinStr
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1316
		{
			yyVAL.str = JoinStr
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1320
		{
			yyVAL.str = StraightJoinStr
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1326
		{
			yyVAL.str = LeftJoinStr
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1330
		{
			yyVAL.str = LeftJoinStr
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1334
		{
			yyVAL.str = RightJoinStr
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1338
		{
			yyVAL.str = RightJoinStr
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1344
		{
			yyVAL.str = NaturalJoinStr
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1348
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1358
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1362
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1368
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1372
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 238:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1377
		{
			yyVAL.indexHints = nil
		}
	case 239:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1381
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 240:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1385
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 241:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1389
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1395
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1399
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 244:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1404
		{
			yyVAL.expr = nil
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1408
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1414
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1418
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1422
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1426
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1430
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1434
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1438
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 253:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1444
		{
			yyVAL.str = ""
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1448
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1454
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1458
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1464
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1468
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 259:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1472
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1476
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 261:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1480
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1484
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1488
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 264:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1492
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 265:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1496
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1500
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1506
		{
			yyVAL.str = IsNullStr
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1510
		{
			yyVAL.str = IsNotNullStr
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1514
		{
			yyVAL.str = IsTrueStr
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1518
		{
			yyVAL.str = IsNotTrueStr
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1522
		{
			yyVAL.str = IsFalseStr
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1526
		{
			yyVAL.str = IsNotFalseStr
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1532
		{
			yyVAL.str = EqualStr
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1536
		{
			yyVAL.str = LessThanStr
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1540
		{
			yyVAL.str = GreaterThanStr
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1544
		{
			yyVAL.str = LessEqualStr
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1548
		{
			yyVAL.str = GreaterEqualStr
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1552
		{
			yyVAL.str = NotEqualStr
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1556
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 280:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1561
		{
			yyVAL.expr = nil
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1565
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1571
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1575
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1579
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1585
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1591
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1595
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1601
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1605
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1609
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1613
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1617
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1621
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1625
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1629
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1633
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1637
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1641
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1645
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1649
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1653
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1657
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1661
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1665
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1669
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1673
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1677
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1681
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1685
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1693
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1707
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1711
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1715
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent}
		}
	case 318:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1733
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 319:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1737
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 320:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1741
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 321:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1751
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 322:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1755
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 323:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1759
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 324:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1763
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 325:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1767
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 326:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1771
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 327:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1775
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 328:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1779
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 329:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1783
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1793
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1797
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1801
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1805
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1810
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1815
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1820
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1825
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 340:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1839
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 341:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1843
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 342:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1847
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 343:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1851
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 344:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1857
		{
			yyVAL.str = ""
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1861
		{
			yyVAL.str = BooleanModeStr
		}
	case 346:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1865
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 347:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1869
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1873
		{
			yyVAL.str = QueryExpansionStr
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1879
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1883
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1889
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1893
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1897
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1901
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1905
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1909
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1915
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1919
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1923
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1927
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1931
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1935
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1939
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 364:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1944
		{
			yyVAL.expr = nil
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1948
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 366:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1953
		{
			yyVAL.str = string("")
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1957
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1963
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1967
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 370:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1973
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 371:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1978
		{
			yyVAL.expr = nil
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1982
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1988
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1992
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 375:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1996
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2002
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2006
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2010
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2014
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2018
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2022
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2026
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2030
		{
			yyVAL.expr = &NullVal{}
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2036
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2045
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2049
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 387:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2054
		{
			yyVAL.exprs = nil
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2058
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 389:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2063
		{
			yyVAL.expr = nil
		}
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2067
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 391:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2072
		{
			yyVAL.orderBy = nil
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2076
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2082
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2086
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2092
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 396:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2097
		{
			yyVAL.str = AscScr
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2101
		{
			yyVAL.str = AscScr
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2105
		{
			yyVAL.str = DescScr
		}
	case 399:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2110
		{
			yyVAL.limit = nil
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2114
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 401:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2118
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 402:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2122
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 403:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2127
		{
			yyVAL.str = ""
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2131
		{
			yyVAL.str = ForUpdateStr
		}
	case 405:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2135
		{
			yyVAL.str = ShareModeStr
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2148
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2152
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2156
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 409:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2161
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 410:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2165
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 411:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2169
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2176
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2180
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2184
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 415:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2188
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 416:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2193
		{
			yyVAL.updateExprs = nil
		}
	case 417:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2197
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2203
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2207
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2213
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2217
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2223
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2229
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2239
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2243
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2249
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 429:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2258
		{
			yyVAL.byt = 0
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2260
		{
			yyVAL.byt = 1
		}
	case 431:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2263
		{
			yyVAL.empty = struct{}{}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2265
		{
			yyVAL.empty = struct{}{}
		}
	case 433:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2268
		{
			yyVAL.str = ""
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2270
		{
			yyVAL.str = IgnoreStr
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2274
		{
			yyVAL.empty = struct{}{}
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2276
		{
			yyVAL.empty = struct{}{}
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2278
		{
			yyVAL.empty = struct{}{}
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2280
		{
			yyVAL.empty = struct{}{}
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2282
		{
			yyVAL.empty = struct{}{}
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2284
		{
			yyVAL.empty = struct{}{}
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2286
		{
			yyVAL.empty = struct{}{}
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2288
		{
			yyVAL.empty = struct{}{}
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2290
		{
			yyVAL.empty = struct{}{}
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2292
		{
			yyVAL.empty = struct{}{}
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2294
		{
			yyVAL.empty = struct{}{}
		}
	case 446:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2297
		{
			yyVAL.empty = struct{}{}
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2299
		{
			yyVAL.empty = struct{}{}
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2301
		{
			yyVAL.empty = struct{}{}
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2305
		{
			yyVAL.empty = struct{}{}
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2307
		{
			yyVAL.empty = struct{}{}
		}
	case 451:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2310
		{
			yyVAL.empty = struct{}{}
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2312
		{
			yyVAL.empty = struct{}{}
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2314
		{
			yyVAL.empty = struct{}{}
		}
	case 454:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2317
		{
			yyVAL.empty = struct{}{}
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2319
		{
			yyVAL.empty = struct{}{}
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2323
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2327
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2334
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2340
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2344
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2351
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2528
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2537
		{
			decNesting(yylex)
		}
	case 617:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2542
		{
			forceEOF(yylex)
		}
	case 618:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2547
		{
			forceEOF(yylex)
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2551
		{
			forceEOF(yylex)
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2555
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
