//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:46
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	updateExpr        *UpdateExpr
	colIdent          ColIdent
	colIdents         []ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	tableColumns      *TableColumns
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	columnDefinitions []*ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALL = 57361
const DISTINCT = 57362
const AS = 57363
const EXISTS = 57364
const ASC = 57365
const DESC = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const VALUES = 57373
const LAST_INSERT_ID = 57374
const NEXT = 57375
const VALUE = 57376
const SHARE = 57377
const MODE = 57378
const SQL_NO_CACHE = 57379
const SQL_CACHE = 57380
const JOIN = 57381
const STRAIGHT_JOIN = 57382
const LEFT = 57383
const RIGHT = 57384
const INNER = 57385
const OUTER = 57386
const CROSS = 57387
const NATURAL = 57388
const USE = 57389
const FORCE = 57390
const ON = 57391
const ID = 57392
const HEX = 57393
const STRING = 57394
const INTEGRAL = 57395
const FLOAT = 57396
const HEXNUM = 57397
const VALUE_ARG = 57398
const LIST_ARG = 57399
const COMMENT = 57400
const NULL = 57401
const TRUE = 57402
const FALSE = 57403
const OR = 57404
const AND = 57405
const NOT = 57406
const BETWEEN = 57407
const CASE = 57408
const WHEN = 57409
const THEN = 57410
const ELSE = 57411
const END = 57412
const LE = 57413
const GE = 57414
const NE = 57415
const NULL_SAFE_EQUAL = 57416
const IS = 57417
const LIKE = 57418
const REGEXP = 57419
const IN = 57420
const SHIFT_LEFT = 57421
const SHIFT_RIGHT = 57422
const DIV = 57423
const MOD = 57424
const UNARY = 57425
const COLLATE = 57426
const BINARY = 57427
const INTERVAL = 57428
const JSON_EXTRACT_OP = 57429
const JSON_UNQUOTE_EXTRACT_OP = 57430
const CREATE = 57431
const ALTER = 57432
const DROP = 57433
const RENAME = 57434
const ANALYZE = 57435
const TABLE = 57436
const INDEX = 57437
const VIEW = 57438
const TO = 57439
const IGNORE = 57440
const IF = 57441
const UNIQUE = 57442
const USING = 57443
const PRIMARY = 57444
const SHOW = 57445
const DESCRIBE = 57446
const EXPLAIN = 57447
const DATE = 57448
const ESCAPE = 57449
const REPAIR = 57450
const OPTIMIZE = 57451
const TRUNCATE = 57452
const BIT = 57453
const TINYINT = 57454
const SMALLINT = 57455
const MEDIUMINT = 57456
const INT = 57457
const INTEGER = 57458
const BIGINT = 57459
const INTNUM = 57460
const REAL = 57461
const DOUBLE = 57462
const FLOAT_TYPE = 57463
const DECIMAL = 57464
const NUMERIC = 57465
const TIME = 57466
const TIMESTAMP = 57467
const DATETIME = 57468
const YEAR = 57469
const CHAR = 57470
const VARCHAR = 57471
const BOOL = 57472
const CHARACTER = 57473
const VARBINARY = 57474
const NCHAR = 57475
const TEXT = 57476
const TINYTEXT = 57477
const MEDIUMTEXT = 57478
const LONGTEXT = 57479
const BLOB = 57480
const TINYBLOB = 57481
const MEDIUMBLOB = 57482
const LONGBLOB = 57483
const JSON = 57484
const NULLX = 57485
const AUTO_INCREMENT = 57486
const APPROXNUM = 57487
const SIGNED = 57488
const UNSIGNED = 57489
const ZEROFILL = 57490
const DATABASES = 57491
const TABLES = 57492
const VITESS_KEYSPACES = 57493
const VITESS_SHARDS = 57494
const VSCHEMA_TABLES = 57495
const CURRENT_TIMESTAMP = 57496
const DATABASE = 57497
const CURRENT_DATE = 57498
const CURRENT_TIME = 57499
const LOCALTIME = 57500
const LOCALTIMESTAMP = 57501
const UTC_DATE = 57502
const UTC_TIME = 57503
const UTC_TIMESTAMP = 57504
const REPLACE = 57505
const CONVERT = 57506
const CAST = 57507
const GROUP_CONCAT = 57508
const SEPARATOR = 57509
const MATCH = 57510
const AGAINST = 57511
const BOOLEAN = 57512
const LANGUAGE = 57513
const WITH = 57514
const QUERY = 57515
const EXPANSION = 57516
const UNUSED = 57517

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"USING",
	"PRIMARY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VSCHEMA_TABLES",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 21,
	-2, 4,
	-1, 219,
	103, 414,
	-2, 410,
	-1, 220,
	103, 415,
	-2, 411,
	-1, 440,
	5, 21,
	-2, 365,
	-1, 476,
	103, 417,
	-2, 413,
	-1, 584,
	5, 22,
	-2, 245,
	-1, 650,
	5, 22,
	-2, 366,
	-1, 736,
	5, 21,
	-2, 368,
	-1, 837,
	5, 22,
	-2, 369,
}

const yyPrivate = 57344

const yyLast = 4473

var yyAct = [...]int{

	220, 399, 572, 342, 819, 775, 340, 247, 713, 214,
	468, 321, 3, 269, 771, 536, 593, 530, 344, 763,
	188, 741, 620, 539, 59, 271, 613, 573, 42, 87,
	180, 475, 553, 507, 569, 181, 320, 57, 237, 294,
	246, 300, 244, 235, 215, 324, 488, 86, 187, 209,
	180, 180, 309, 203, 41, 180, 885, 197, 881, 216,
	486, 884, 873, 204, 883, 217, 880, 182, 183, 184,
	185, 186, 726, 67, 46, 872, 249, 621, 180, 795,
	180, 225, 62, 815, 180, 491, 202, 756, 75, 844,
	764, 71, 66, 829, 48, 49, 50, 51, 790, 788,
	213, 629, 541, 481, 224, 750, 866, 461, 463, 58,
	230, 623, 222, 602, 78, 356, 355, 348, 345, 604,
	234, 356, 355, 332, 587, 586, 207, 227, 77, 228,
	78, 594, 357, 233, 80, 81, 82, 585, 357, 485,
	487, 484, 223, 852, 226, 83, 79, 538, 858, 368,
	367, 377, 378, 370, 371, 372, 373, 374, 375, 376,
	369, 389, 390, 379, 331, 802, 820, 780, 630, 177,
	653, 624, 591, 398, 336, 462, 328, 714, 514, 61,
	379, 70, 68, 72, 369, 411, 354, 379, 764, 64,
	229, 853, 512, 513, 511, 749, 867, 748, 865, 716,
	357, 335, 180, 728, 603, 297, 601, 426, 427, 180,
	180, 757, 180, 489, 554, 718, 871, 722, 753, 717,
	296, 715, 180, 754, 490, 59, 720, 180, 59, 338,
	180, 333, 813, 180, 347, 719, 631, 302, 343, 721,
	723, 343, 60, 869, 65, 74, 69, 63, 73, 356,
	355, 305, 859, 370, 371, 372, 373, 374, 375, 376,
	369, 329, 355, 379, 868, 826, 357, 356, 355, 298,
	554, 337, 636, 232, 730, 825, 346, 816, 357, 349,
	356, 355, 352, 832, 357, 207, 372, 373, 374, 375,
	376, 369, 240, 295, 379, 356, 355, 357, 863, 862,
	59, 499, 501, 502, 851, 180, 500, 842, 180, 180,
	180, 180, 357, 432, 216, 440, 443, 428, 810, 180,
	217, 594, 387, 180, 339, 531, 180, 532, 359, 180,
	231, 180, 180, 39, 459, 606, 607, 608, 59, 878,
	474, 429, 216, 510, 478, 360, 180, 467, 217, 180,
	343, 343, 180, 59, 442, 476, 430, 856, 855, 494,
	465, 444, 358, 446, 457, 458, 343, 470, 804, 236,
	455, 464, 445, 877, 447, 400, 356, 355, 236, 472,
	848, 471, 409, 544, 207, 207, 207, 207, 508, 845,
	846, 847, 43, 357, 570, 482, 334, 59, 492, 207,
	18, 493, 543, 334, 505, 618, 236, 207, 662, 663,
	535, 59, 343, 459, 652, 236, 645, 476, 263, 262,
	264, 265, 266, 267, 555, 735, 268, 544, 236, 618,
	533, 534, 307, 236, 854, 469, 648, 558, 473, 509,
	469, 306, 59, 545, 39, 807, 216, 307, 571, 551,
	618, 424, 217, 576, 579, 578, 556, 618, 496, 497,
	39, 503, 504, 307, 561, 574, 758, 562, 413, 414,
	415, 416, 417, 418, 419, 307, 18, 776, 772, 595,
	334, 590, 59, 59, 311, 314, 315, 316, 312, 597,
	313, 317, 18, 580, 581, 596, 343, 588, 570, 438,
	351, 439, 194, 584, 400, 436, 583, 548, 549, 377,
	378, 370, 371, 372, 373, 374, 375, 376, 369, 598,
	39, 379, 311, 314, 315, 316, 312, 295, 313, 317,
	76, 16, 582, 452, 450, 882, 39, 508, 453, 451,
	449, 448, 59, 879, 243, 609, 39, 198, 199, 605,
	546, 547, 301, 495, 550, 622, 454, 567, 315, 316,
	566, 238, 821, 812, 180, 299, 876, 875, 557, 809,
	559, 560, 589, 239, 808, 733, 192, 646, 479, 201,
	616, 350, 319, 568, 301, 635, 195, 196, 509, 565,
	627, 628, 59, 189, 632, 661, 180, 564, 835, 638,
	180, 639, 640, 641, 642, 343, 647, 190, 654, 660,
	43, 834, 798, 643, 469, 799, 353, 45, 47, 649,
	650, 651, 59, 330, 40, 1, 840, 747, 543, 592,
	746, 864, 843, 752, 814, 622, 702, 703, 343, 270,
	725, 712, 708, 476, 709, 700, 180, 626, 724, 701,
	755, 811, 666, 59, 59, 731, 711, 637, 59, 59,
	59, 707, 727, 736, 59, 667, 738, 739, 665, 178,
	751, 742, 742, 742, 574, 740, 734, 343, 400, 745,
	743, 744, 732, 655, 656, 617, 669, 668, 664, 210,
	210, 218, 84, 318, 210, 765, 766, 767, 323, 633,
	619, 59, 480, 53, 600, 777, 599, 778, 483, 221,
	563, 773, 774, 577, 343, 425, 293, 210, 833, 210,
	797, 634, 207, 210, 786, 408, 368, 367, 377, 378,
	370, 371, 372, 373, 374, 375, 376, 369, 800, 729,
	379, 552, 248, 498, 259, 256, 258, 257, 431, 801,
	437, 361, 241, 460, 206, 303, 781, 782, 310, 308,
	212, 574, 205, 644, 614, 794, 857, 435, 791, 792,
	822, 823, 824, 19, 44, 200, 15, 14, 13, 817,
	818, 59, 12, 11, 661, 803, 10, 805, 806, 9,
	8, 7, 6, 5, 343, 391, 392, 393, 394, 395,
	396, 4, 191, 59, 828, 59, 17, 216, 59, 836,
	2, 0, 0, 217, 0, 0, 838, 0, 839, 0,
	0, 841, 849, 850, 0, 0, 272, 36, 0, 0,
	0, 0, 0, 796, 0, 0, 0, 861, 831, 0,
	0, 210, 0, 0, 0, 837, 0, 0, 210, 326,
	0, 210, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 210, 0, 36, 59, 0, 210, 0, 0, 210,
	0, 193, 210, 0, 0, 0, 208, 874, 0, 0,
	0, 0, 759, 760, 761, 762, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 768, 769, 770, 0,
	0, 870, 0, 0, 0, 0, 506, 0, 0, 515,
	516, 517, 518, 519, 520, 521, 522, 523, 524, 525,
	526, 527, 528, 529, 0, 0, 783, 784, 0, 785,
	0, 0, 787, 0, 789, 0, 0, 860, 400, 0,
	0, 0, 0, 0, 210, 0, 218, 210, 210, 210,
	210, 0, 0, 0, 0, 0, 0, 0, 456, 0,
	0, 0, 210, 0, 0, 326, 0, 0, 466, 0,
	210, 210, 0, 0, 218, 0, 466, 0, 0, 0,
	0, 67, 704, 0, 0, 210, 0, 0, 210, 0,
	62, 210, 0, 0, 0, 0, 75, 0, 0, 71,
	66, 0, 368, 367, 377, 378, 370, 371, 372, 373,
	374, 375, 376, 369, 39, 0, 379, 179, 0, 0,
	36, 0, 368, 367, 377, 378, 370, 371, 372, 373,
	374, 375, 376, 369, 0, 322, 379, 542, 466, 0,
	0, 0, 542, 542, 0, 0, 542, 0, 0, 0,
	0, 341, 0, 0, 341, 0, 0, 610, 611, 612,
	542, 542, 542, 542, 0, 0, 0, 0, 0, 0,
	0, 0, 388, 0, 0, 542, 0, 177, 218, 0,
	0, 0, 0, 0, 0, 0, 0, 61, 0, 70,
	68, 72, 0, 0, 0, 0, 397, 64, 0, 401,
	402, 403, 404, 405, 406, 407, 0, 410, 412, 412,
	412, 412, 412, 412, 412, 412, 420, 421, 422, 423,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	441, 0, 0, 0, 208, 208, 208, 208, 367, 377,
	378, 370, 371, 372, 373, 374, 375, 376, 369, 322,
	60, 379, 65, 74, 69, 63, 73, 208, 0, 705,
	706, 0, 0, 0, 341, 0, 0, 0, 0, 0,
	0, 67, 0, 0, 537, 0, 245, 542, 0, 341,
	62, 0, 0, 0, 0, 280, 75, 0, 0, 71,
	66, 542, 0, 0, 0, 273, 274, 0, 0, 0,
	0, 0, 0, 210, 39, 0, 0, 219, 263, 262,
	264, 265, 266, 267, 0, 36, 268, 260, 261, 0,
	0, 242, 254, 0, 279, 0, 0, 0, 401, 0,
	0, 0, 0, 0, 0, 210, 0, 0, 0, 210,
	0, 0, 0, 0, 251, 252, 540, 0, 0, 779,
	291, 0, 253, 0, 0, 250, 255, 0, 542, 0,
	0, 0, 672, 0, 466, 542, 575, 177, 36, 0,
	289, 0, 0, 0, 0, 0, 0, 61, 0, 70,
	68, 72, 0, 0, 683, 210, 0, 64, 0, 688,
	689, 690, 691, 692, 693, 694, 0, 695, 696, 697,
	698, 699, 684, 685, 686, 687, 670, 671, 0, 341,
	673, 0, 674, 675, 676, 677, 678, 679, 680, 681,
	682, 0, 0, 0, 0, 281, 290, 287, 288, 285,
	286, 284, 283, 282, 292, 275, 276, 278, 830, 277,
	60, 0, 65, 74, 69, 63, 73, 67, 0, 0,
	0, 0, 245, 0, 0, 0, 62, 0, 0, 0,
	0, 280, 75, 0, 0, 71, 66, 0, 0, 0,
	625, 273, 274, 0, 0, 0, 0, 0, 0, 0,
	39, 0, 0, 219, 263, 262, 264, 265, 266, 267,
	0, 0, 268, 260, 261, 0, 0, 242, 254, 0,
	279, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 657, 658, 659, 0, 0, 0, 0, 0,
	251, 252, 540, 0, 0, 0, 291, 0, 253, 0,
	0, 250, 255, 0, 0, 0, 0, 0, 0, 218,
	0, 0, 0, 177, 0, 0, 289, 0, 0, 0,
	0, 0, 0, 61, 0, 70, 68, 72, 0, 0,
	0, 0, 0, 64, 0, 0, 0, 0, 0, 0,
	0, 0, 208, 0, 0, 575, 0, 0, 737, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	341, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 281, 290, 287, 288, 285, 286, 284, 283, 282,
	292, 275, 276, 278, 615, 277, 60, 0, 65, 74,
	69, 63, 73, 0, 0, 0, 0, 341, 0, 0,
	0, 0, 0, 0, 368, 367, 377, 378, 370, 371,
	372, 373, 374, 375, 376, 369, 0, 0, 379, 0,
	0, 0, 0, 793, 0, 0, 0, 0, 0, 0,
	0, 0, 575, 0, 36, 166, 153, 127, 168, 105,
	119, 176, 120, 121, 147, 93, 135, 67, 117, 0,
	108, 89, 114, 90, 106, 129, 62, 132, 104, 155,
	138, 174, 75, 142, 0, 71, 66, 0, 0, 131,
	160, 133, 152, 126, 148, 98, 141, 169, 118, 145,
	0, 0, 0, 58, 0, 0, 0, 0, 0, 0,
	0, 0, 144, 165, 116, 146, 88, 143, 0, 91,
	94, 175, 163, 111, 112, 0, 0, 0, 0, 0,
	0, 0, 130, 134, 149, 124, 0, 0, 0, 0,
	0, 0, 827, 0, 109, 0, 140, 0, 0, 0,
	95, 92, 128, 0, 0, 0, 97, 0, 110, 150,
	0, 161, 125, 177, 164, 123, 122, 167, 170, 0,
	159, 107, 115, 61, 113, 70, 68, 72, 363, 0,
	366, 0, 0, 64, 0, 0, 380, 381, 382, 383,
	384, 385, 386, 0, 364, 365, 362, 368, 367, 377,
	378, 370, 371, 372, 373, 374, 375, 376, 369, 0,
	0, 379, 0, 0, 0, 0, 103, 162, 156, 157,
	158, 101, 102, 99, 100, 136, 137, 171, 172, 173,
	151, 96, 0, 0, 154, 139, 60, 0, 65, 74,
	69, 63, 73, 166, 153, 127, 168, 105, 119, 176,
	120, 121, 147, 93, 135, 67, 117, 0, 108, 89,
	114, 90, 106, 129, 62, 132, 104, 155, 138, 174,
	75, 142, 0, 71, 66, 0, 0, 131, 160, 133,
	152, 126, 148, 98, 141, 169, 118, 145, 39, 0,
	0, 58, 0, 0, 0, 0, 0, 0, 0, 0,
	144, 165, 116, 146, 88, 143, 0, 91, 94, 175,
	163, 111, 112, 0, 0, 0, 0, 0, 0, 0,
	130, 134, 149, 124, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 0, 140, 0, 0, 0, 95, 92,
	128, 0, 0, 0, 97, 0, 110, 150, 0, 161,
	125, 177, 164, 123, 122, 167, 170, 0, 159, 107,
	115, 61, 113, 70, 68, 72, 0, 0, 0, 0,
	0, 64, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 103, 162, 156, 157, 158, 101,
	102, 99, 100, 136, 137, 171, 172, 173, 151, 96,
	0, 0, 154, 139, 60, 0, 65, 74, 69, 63,
	73, 166, 153, 127, 168, 105, 119, 176, 120, 121,
	147, 93, 135, 67, 117, 0, 108, 89, 114, 90,
	106, 129, 62, 132, 104, 155, 138, 174, 75, 142,
	0, 71, 66, 0, 0, 131, 160, 133, 152, 126,
	148, 98, 141, 169, 118, 145, 0, 0, 0, 219,
	0, 0, 0, 0, 0, 0, 0, 0, 144, 165,
	116, 146, 88, 143, 0, 91, 94, 175, 163, 111,
	112, 0, 0, 0, 0, 0, 0, 0, 130, 134,
	149, 124, 0, 0, 0, 0, 0, 0, 710, 0,
	109, 0, 140, 0, 0, 0, 95, 92, 128, 0,
	0, 0, 97, 0, 110, 150, 0, 161, 125, 177,
	164, 123, 122, 167, 170, 0, 159, 107, 115, 61,
	113, 70, 68, 72, 0, 0, 0, 0, 0, 64,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 103, 162, 156, 157, 158, 101, 102, 99,
	100, 136, 137, 171, 172, 173, 151, 96, 0, 0,
	154, 139, 60, 0, 65, 74, 69, 63, 73, 166,
	153, 127, 168, 105, 119, 176, 120, 121, 147, 93,
	135, 67, 117, 0, 108, 89, 114, 90, 106, 129,
	62, 132, 104, 155, 138, 174, 75, 142, 0, 71,
	66, 0, 0, 131, 160, 133, 152, 126, 148, 98,
	141, 169, 118, 145, 477, 0, 0, 58, 0, 0,
	0, 0, 0, 0, 0, 0, 144, 165, 116, 146,
	88, 143, 0, 91, 94, 175, 163, 111, 112, 0,
	0, 0, 0, 0, 0, 0, 130, 134, 149, 124,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 0,
	140, 0, 0, 0, 95, 92, 128, 0, 0, 0,
	97, 0, 110, 150, 0, 161, 125, 177, 164, 123,
	122, 167, 170, 0, 159, 107, 115, 61, 113, 70,
	68, 72, 0, 0, 0, 0, 0, 64, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	103, 162, 156, 157, 158, 101, 102, 99, 100, 136,
	137, 171, 172, 173, 151, 96, 0, 0, 154, 139,
	60, 0, 65, 74, 69, 63, 73, 166, 153, 127,
	168, 105, 119, 176, 120, 121, 147, 93, 135, 67,
	117, 0, 108, 89, 114, 90, 106, 129, 62, 132,
	104, 155, 138, 174, 75, 142, 0, 71, 66, 0,
	0, 131, 160, 133, 152, 126, 148, 98, 141, 169,
	118, 145, 0, 0, 0, 58, 0, 0, 0, 0,
	0, 0, 0, 0, 144, 165, 116, 146, 88, 143,
	0, 91, 94, 175, 163, 111, 112, 0, 0, 0,
	0, 0, 0, 0, 130, 134, 149, 124, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 0, 140, 0,
	0, 0, 95, 92, 128, 0, 0, 0, 97, 0,
	110, 150, 0, 161, 125, 177, 164, 123, 122, 167,
	170, 0, 159, 107, 115, 61, 113, 70, 68, 72,
	0, 0, 0, 0, 0, 64, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 103, 162,
	156, 157, 158, 101, 102, 99, 100, 136, 137, 171,
	172, 173, 151, 96, 0, 0, 154, 139, 60, 0,
	65, 74, 69, 63, 73, 166, 153, 127, 168, 105,
	119, 176, 120, 121, 147, 93, 135, 67, 117, 0,
	108, 89, 114, 90, 106, 129, 62, 132, 104, 155,
	138, 174, 75, 142, 0, 71, 66, 0, 0, 131,
	160, 133, 152, 126, 148, 98, 141, 169, 118, 145,
	0, 0, 0, 219, 0, 0, 0, 0, 0, 0,
	0, 0, 144, 165, 116, 146, 88, 143, 0, 91,
	94, 175, 163, 111, 112, 0, 0, 0, 0, 0,
	0, 0, 130, 134, 149, 124, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 0, 140, 0, 0, 0,
	95, 92, 128, 0, 0, 0, 97, 0, 110, 150,
	0, 161, 125, 177, 164, 123, 122, 167, 170, 0,
	159, 107, 115, 61, 113, 70, 68, 72, 0, 0,
	0, 0, 0, 64, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 103, 162, 156, 157,
	158, 101, 102, 99, 100, 136, 137, 171, 172, 173,
	151, 96, 0, 0, 154, 139, 60, 0, 65, 74,
	69, 63, 73, 166, 153, 127, 168, 105, 119, 176,
	120, 121, 147, 93, 135, 67, 117, 0, 108, 89,
	114, 90, 106, 129, 62, 132, 104, 155, 138, 174,
	75, 142, 0, 71, 66, 0, 0, 131, 160, 133,
	152, 126, 148, 98, 141, 169, 118, 145, 0, 0,
	0, 179, 0, 0, 0, 0, 0, 0, 0, 0,
	144, 165, 116, 146, 88, 143, 0, 91, 94, 175,
	163, 111, 112, 0, 0, 0, 0, 0, 0, 0,
	130, 134, 149, 124, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 0, 140, 0, 0, 0, 95, 92,
	128, 0, 0, 0, 97, 0, 110, 150, 0, 161,
	125, 177, 164, 123, 122, 167, 170, 0, 159, 107,
	115, 61, 113, 70, 68, 72, 0, 0, 0, 0,
	0, 64, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 103, 162, 156, 157, 158, 101,
	102, 99, 100, 136, 137, 171, 172, 173, 151, 96,
	0, 0, 154, 139, 60, 0, 65, 74, 69, 63,
	73, 166, 153, 127, 168, 105, 119, 176, 120, 121,
	147, 93, 135, 67, 117, 0, 108, 89, 114, 90,
	106, 129, 62, 132, 104, 155, 138, 174, 75, 142,
	0, 71, 66, 0, 0, 131, 160, 133, 152, 126,
	148, 98, 141, 169, 118, 145, 0, 0, 0, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 144, 165,
	116, 146, 88, 143, 0, 91, 94, 175, 163, 111,
	112, 0, 0, 0, 0, 0, 0, 0, 130, 134,
	149, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 0, 140, 0, 0, 0, 95, 92, 128, 0,
	0, 0, 97, 0, 110, 150, 0, 161, 125, 177,
	164, 123, 122, 167, 170, 0, 159, 107, 115, 61,
	113, 70, 68, 72, 0, 0, 0, 0, 0, 64,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 67, 0, 0, 0, 0, 0, 0, 0,
	304, 62, 0, 0, 0, 0, 0, 75, 0, 0,
	71, 66, 103, 162, 156, 157, 158, 101, 102, 99,
	100, 136, 137, 171, 172, 173, 151, 96, 179, 0,
	154, 139, 60, 0, 65, 74, 69, 63, 73, 67,
	0, 0, 0, 0, 245, 0, 0, 0, 62, 0,
	0, 0, 0, 280, 75, 0, 0, 71, 66, 0,
	0, 0, 0, 273, 274, 0, 0, 0, 0, 0,
	0, 0, 39, 0, 236, 219, 263, 262, 264, 265,
	266, 267, 0, 0, 268, 260, 261, 0, 177, 242,
	254, 0, 279, 0, 0, 0, 0, 0, 61, 0,
	70, 68, 72, 0, 0, 0, 0, 0, 64, 0,
	0, 0, 251, 252, 0, 0, 0, 0, 291, 0,
	253, 0, 0, 250, 255, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 177, 0, 0, 289, 0,
	0, 0, 0, 0, 0, 61, 0, 70, 68, 72,
	0, 0, 0, 0, 0, 64, 0, 0, 0, 0,
	0, 60, 0, 65, 74, 69, 63, 73, 0, 0,
	0, 0, 0, 67, 0, 0, 0, 0, 0, 0,
	0, 0, 62, 0, 0, 0, 0, 0, 75, 0,
	0, 71, 66, 281, 290, 287, 288, 285, 286, 284,
	283, 282, 292, 275, 276, 278, 18, 277, 60, 58,
	65, 74, 69, 63, 73, 0, 0, 67, 0, 0,
	0, 0, 245, 0, 0, 0, 62, 0, 0, 0,
	0, 280, 75, 0, 0, 71, 66, 0, 0, 0,
	0, 273, 274, 0, 0, 0, 0, 0, 0, 0,
	39, 0, 0, 219, 263, 262, 264, 265, 266, 267,
	0, 0, 268, 260, 261, 0, 0, 242, 254, 177,
	279, 0, 0, 0, 0, 0, 0, 0, 0, 61,
	0, 70, 68, 72, 0, 0, 0, 0, 0, 64,
	251, 252, 0, 0, 0, 0, 291, 0, 253, 0,
	0, 250, 255, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 177, 0, 0, 289, 0, 0, 0,
	0, 0, 0, 61, 0, 70, 68, 72, 0, 0,
	0, 0, 0, 64, 0, 0, 0, 0, 0, 0,
	0, 0, 60, 0, 65, 74, 69, 63, 73, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 281, 290, 287, 288, 285, 286, 284, 283, 282,
	292, 275, 276, 278, 0, 277, 60, 0, 65, 74,
	69, 63, 73, 67, 0, 0, 0, 0, 245, 0,
	0, 0, 62, 0, 0, 0, 0, 280, 75, 0,
	0, 71, 66, 0, 0, 0, 0, 273, 274, 0,
	0, 0, 0, 0, 0, 0, 39, 0, 0, 219,
	263, 262, 264, 265, 266, 267, 0, 0, 268, 260,
	261, 0, 0, 242, 254, 0, 279, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 0, 0,
	0, 0, 291, 0, 253, 0, 0, 250, 255, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 177,
	0, 0, 289, 0, 0, 0, 0, 18, 0, 61,
	0, 70, 68, 72, 0, 0, 0, 0, 67, 64,
	0, 0, 0, 0, 0, 0, 0, 62, 0, 0,
	0, 0, 0, 75, 0, 0, 71, 66, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 39, 0, 0, 58, 0, 0, 281, 290, 287,
	288, 285, 286, 284, 283, 282, 292, 275, 276, 278,
	67, 277, 60, 0, 65, 74, 69, 63, 73, 62,
	0, 0, 0, 0, 280, 75, 0, 0, 71, 66,
	0, 0, 0, 0, 273, 274, 0, 0, 0, 0,
	0, 0, 0, 39, 0, 0, 219, 263, 262, 264,
	265, 266, 267, 0, 177, 268, 260, 261, 0, 0,
	0, 254, 0, 279, 61, 0, 70, 68, 72, 0,
	0, 0, 0, 0, 64, 0, 0, 0, 0, 0,
	0, 0, 0, 251, 252, 0, 0, 0, 0, 291,
	0, 253, 0, 0, 250, 255, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 177, 0, 0, 289,
	0, 0, 0, 0, 0, 0, 61, 0, 70, 68,
	72, 0, 0, 0, 0, 0, 64, 60, 0, 65,
	74, 69, 63, 73, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 281, 290, 287, 288, 285, 286,
	284, 283, 282, 292, 275, 276, 278, 67, 277, 60,
	0, 65, 74, 69, 63, 73, 62, 0, 0, 0,
	0, 280, 75, 0, 0, 71, 66, 0, 0, 0,
	0, 273, 274, 0, 0, 0, 0, 0, 0, 0,
	39, 0, 0, 219, 263, 262, 264, 265, 266, 267,
	0, 0, 268, 0, 0, 0, 0, 0, 254, 0,
	279, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 0, 0, 0, 0, 291, 0, 253, 0,
	0, 250, 255, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 177, 0, 0, 289, 0, 0, 0,
	0, 0, 0, 61, 0, 70, 68, 72, 67, 0,
	0, 0, 0, 64, 0, 0, 0, 62, 0, 0,
	0, 0, 0, 75, 0, 0, 71, 66, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 58, 0, 0, 0, 0, 0,
	0, 281, 290, 287, 288, 285, 286, 284, 283, 282,
	292, 275, 276, 278, 0, 277, 60, 0, 65, 74,
	69, 63, 73, 0, 0, 0, 0, 368, 367, 377,
	378, 370, 371, 372, 373, 374, 375, 376, 369, 0,
	67, 379, 0, 0, 0, 0, 0, 0, 0, 62,
	0, 18, 0, 0, 177, 75, 0, 0, 71, 66,
	0, 0, 67, 0, 61, 0, 70, 68, 72, 0,
	0, 62, 0, 0, 64, 0, 58, 75, 67, 0,
	71, 66, 0, 0, 0, 0, 0, 62, 55, 0,
	0, 0, 0, 75, 0, 39, 71, 66, 179, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 58, 0, 0, 433, 0, 0,
	434, 0, 0, 0, 0, 0, 0, 60, 0, 65,
	74, 69, 63, 73, 52, 0, 54, 0, 0, 0,
	56, 0, 0, 0, 0, 0, 61, 0, 70, 68,
	72, 0, 0, 0, 0, 0, 64, 0, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 61, 0,
	70, 68, 72, 0, 177, 0, 0, 0, 64, 0,
	0, 67, 0, 0, 61, 325, 70, 68, 72, 0,
	62, 0, 0, 0, 64, 0, 75, 0, 0, 71,
	66, 0, 0, 0, 0, 0, 0, 67, 0, 60,
	0, 65, 74, 69, 63, 73, 62, 179, 0, 327,
	0, 0, 75, 67, 0, 71, 66, 0, 0, 0,
	0, 60, 62, 65, 74, 69, 63, 73, 75, 0,
	0, 71, 66, 58, 0, 623, 0, 60, 0, 65,
	74, 69, 63, 73, 0, 0, 0, 0, 0, 179,
	0, 327, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 177, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 61, 0, 70,
	68, 72, 0, 0, 0, 0, 0, 64, 0, 0,
	0, 0, 211, 177, 0, 0, 0, 0, 0, 67,
	0, 0, 0, 61, 0, 70, 68, 72, 62, 177,
	0, 0, 0, 64, 75, 67, 0, 71, 66, 61,
	0, 70, 68, 72, 62, 0, 0, 0, 0, 64,
	75, 0, 0, 71, 66, 179, 0, 0, 67, 0,
	60, 0, 65, 74, 69, 63, 73, 62, 0, 0,
	0, 219, 0, 75, 0, 0, 71, 66, 0, 0,
	0, 0, 0, 0, 0, 0, 60, 0, 65, 74,
	69, 63, 73, 0, 179, 0, 0, 0, 18, 37,
	20, 21, 60, 0, 65, 74, 69, 63, 73, 0,
	0, 0, 0, 0, 0, 177, 30, 0, 0, 0,
	0, 22, 0, 0, 0, 61, 0, 70, 68, 72,
	0, 177, 0, 0, 0, 64, 0, 0, 0, 29,
	0, 61, 39, 70, 68, 72, 0, 0, 0, 0,
	0, 64, 0, 0, 177, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 61, 0, 70, 68, 72, 0,
	0, 0, 0, 0, 64, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 60, 0,
	65, 74, 69, 63, 73, 0, 0, 0, 23, 24,
	26, 25, 27, 0, 60, 0, 65, 74, 69, 63,
	73, 0, 28, 31, 32, 0, 0, 33, 34, 35,
	0, 0, 0, 0, 0, 0, 0, 60, 0, 65,
	74, 69, 63, 73, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 38,
}
var yyPact = [...]int{

	4292, -1000, -139, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 596, 612, -1000, -1000,
	-1000, -1000, -1000, 3933, 15, 35, 23, 34, 2876, 4241,
	-1000, -1000, -1000, -1000, -1000, -1000, 486, -1000, -1000, -1000,
	-1000, -1000, 577, 592, 496, 567, 510, -1000, -1, 964,
	4202, 4218, -4, 30, 4241, -99, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 33, 4241, -1000, 4241,
	-6, 277, -6, 4241, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 326, 543, 3406,
	3406, 596, -1000, 486, -1000, -1000, -1000, 532, -1000, -1000,
	176, 3005, 412, 483, -1000, -1000, -1000, 561, 3955, 4074,
	73, 4241, 113, -1000, 352, -1000, 126, -1000, 71, -1000,
	-1000, 4241, 162, 271, 1748, 5, 4241, 1748, 3, 4241,
	559, 451, 4241, -1000, -1000, -1000, -1000, -1000, 608, 101,
	311, -1000, 3406, 1621, -1000, 410, -1000, 57, -1000, -1000,
	3740, 3740, 3740, 3740, 3740, 3740, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 410,
	70, -1000, 3230, 410, 410, 410, 410, 410, 410, 3406,
	410, 410, 410, 410, 410, 410, 410, 410, 410, 410,
	410, 410, 410, 400, -1000, 184, 577, 326, 510, 3971,
	465, -1000, -1000, 470, 4241, -1000, 4218, 964, 964, 964,
	964, -1000, 502, 501, -1000, 495, 494, 517, 4241, -1000,
	381, 326, 3955, 60, -1000, 4116, -1000, -1000, 2688, 603,
	964, 4241, -1000, -1000, 4218, 3406, 2500, 2124, 556, -15,
	-1000, -1000, -1000, -1000, -1000, 4241, 32, -1000, 4241, -1000,
	-1000, 4241, 1748, -1000, 518, 3406, 3406, 239, 3406, 3406,
	118, 3573, 283, 109, 3740, 3740, 3740, 3740, 3740, 3740,
	3740, 3740, 3740, 3740, 3740, 3740, 3740, 3740, 3740, 272,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 486, 364,
	364, 80, 80, 80, 80, 80, 3851, 1154, 2500, 376,
	230, 3230, 1330, 1330, 3406, 3406, 1330, 564, 143, 230,
	3186, -1000, 326, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1330, 1330, 1330, 1330, 3406, -1000, -1000, -1000, 543, -1000,
	564, 579, -1000, 529, 526, 1330, -1000, 449, 4218, 410,
	-1000, 3521, -1000, 429, 483, 444, 445, -1000, -1000, -1000,
	-1000, 493, -1000, 467, -1000, -1000, -1000, -1000, -1000, 326,
	-1000, 25, 13, 12, -1000, -1000, -1000, -1000, 596, 3406,
	424, -1000, -1000, 230, -1000, 69, -1000, 268, -1000, -1000,
	430, 3186, 1748, -1000, 92, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 513, 118, 196, -1000, -1000,
	273, -1000, -1000, 230, 230, -1000, 936, -1000, -1000, -1000,
	-1000, 283, 3740, 3740, 3740, 640, 936, 1448, 421, 1051,
	80, 194, 194, 87, 87, 87, 87, 87, 163, 163,
	-1000, -1000, -1000, -1000, -1000, -1000, 326, 1330, 399, -1000,
	-1000, 56, 68, 410, 3406, -1000, 354, 354, 50, 215,
	354, 1330, 199, -1000, 3406, 326, -1000, 354, 326, 354,
	354, -1000, -1000, 4241, -1000, -1000, -1000, -1000, 406, -1000,
	551, 345, 385, -1000, -1000, 3052, 326, 363, 67, 596,
	3406, 3406, -1000, -1000, -1000, 410, 410, 410, 577, 230,
	-1000, 2312, 357, -1000, 1161, 4241, -1000, -1000, -1000, 4241,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	640, 936, 916, -1000, 3740, 3740, -1000, 354, 1330, -1000,
	-1000, 4100, -1000, -1000, 1936, 1330, 230, -1000, -1000, 76,
	272, 76, -114, 378, 129, -1000, 3406, 202, -1000, -1000,
	-1000, -1000, -1000, -1000, 603, 964, 548, -1000, 410, -1000,
	-1000, 394, 3186, 3186, 577, 230, 230, 3186, 3186, 3186,
	-1000, -1000, 78, 1748, 156, -77, -1000, -1000, 416, -1000,
	416, 416, 416, 416, -58, -58, -58, -58, -1000, -1000,
	-1000, -1000, -1000, -1000, 416, 416, 416, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 428, 428, 428, 427, 427,
	1748, -1000, -1000, -1000, 3740, 936, 936, -1000, -1000, -1000,
	-1000, 64, 326, 326, 416, 416, -1000, 416, 427, -1000,
	416, -34, 416, -35, 326, 326, 410, -105, -1000, 230,
	3406, 600, 396, 607, -1000, 410, -1000, 486, 62, -1000,
	-1000, 317, -1000, 317, 317, -1000, -1000, 395, 547, 542,
	265, -1000, 535, -1000, 170, -82, -1000, -1000, 221, -58,
	-58, -1000, -1000, 66, 533, 66, 66, 66, -1000, -1000,
	-1000, -1000, 219, -1000, -1000, -1000, 209, -1000, -1000, 936,
	1560, -1000, -1000, -1000, 40, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 3740, 326, 228, 230, 598, 583, 4218,
	385, 326, 3186, -1000, 3186, -1000, -1000, 3186, -1000, 254,
	-1000, -72, 334, -1000, -1000, -1000, 328, 66, 66, -1000,
	251, 90, -1000, -1000, -1000, 383, 306, -1000, -1000, -1000,
	63, -1000, -1000, -1000, 3406, 3406, 352, -1000, -1000, -1000,
	247, -1000, -1000, 79, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 208, -1000, 187, 326, 29, -128,
	230, 332, -1000, 3186, -1000, 540, -1000, 539, 321, 287,
	-1000, 507, -122, -133, -1000, -1000, -1000, -1000, -1000, -1000,
	499, -1000, -125, -129, -135, -1000,
}
var yyPgo = [...]int{

	0, 810, 11, 531, 806, 802, 801, 793, 792, 791,
	790, 789, 786, 783, 782, 778, 777, 776, 74, 775,
	774, 773, 41, 767, 57, 766, 765, 26, 147, 15,
	23, 102, 763, 36, 53, 63, 762, 760, 759, 52,
	758, 49, 755, 754, 753, 21, 10, 752, 42, 751,
	750, 40, 544, 748, 747, 746, 745, 744, 743, 33,
	1, 2, 25, 27, 742, 76, 7, 741, 32, 725,
	721, 720, 718, 28, 716, 39, 715, 20, 38, 713,
	34, 9, 44, 710, 530, 190, 709, 708, 706, 704,
	703, 702, 18, 0, 13, 3, 22, 700, 639, 31,
	45, 698, 693, 35, 6, 17, 8, 692, 688, 687,
	686, 668, 665, 652, 211, 651, 19, 4, 650, 634,
	14, 5, 633, 632, 631, 16, 630, 629, 627, 626,
	625, 624, 826, 43, 623, 618, 185,
}
var yyR1 = [...]int{

	0, 130, 131, 131, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	3, 4, 4, 5, 5, 6, 6, 21, 21, 7,
	8, 8, 134, 134, 37, 37, 9, 108, 108, 108,
	111, 111, 109, 109, 109, 109, 109, 109, 109, 110,
	110, 110, 110, 110, 112, 112, 112, 112, 112, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 114, 114, 120, 120, 121, 121, 121, 118,
	118, 119, 119, 122, 122, 122, 115, 115, 115, 115,
	123, 123, 116, 116, 116, 117, 117, 124, 124, 124,
	124, 124, 125, 126, 128, 128, 128, 129, 129, 127,
	127, 127, 10, 10, 10, 10, 10, 11, 11, 11,
	11, 12, 13, 13, 13, 14, 107, 107, 107, 15,
	16, 17, 17, 17, 17, 17, 17, 135, 18, 19,
	19, 20, 20, 20, 24, 24, 24, 22, 22, 23,
	23, 29, 29, 28, 28, 30, 30, 30, 30, 97,
	97, 97, 96, 96, 32, 32, 33, 33, 34, 34,
	35, 35, 35, 43, 36, 36, 36, 36, 102, 102,
	101, 101, 101, 100, 100, 38, 38, 38, 38, 39,
	39, 39, 39, 40, 40, 42, 42, 41, 41, 44,
	44, 44, 44, 45, 45, 46, 46, 31, 31, 31,
	31, 31, 31, 48, 48, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 58, 58, 58,
	58, 58, 58, 49, 49, 49, 49, 49, 49, 49,
	27, 27, 59, 59, 59, 65, 60, 60, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 56, 56, 56,
	54, 54, 54, 54, 54, 54, 54, 54, 54, 55,
	55, 55, 55, 55, 55, 55, 55, 136, 136, 57,
	57, 57, 57, 25, 25, 25, 25, 25, 105, 105,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 69, 69, 26, 26, 67, 67, 68,
	70, 70, 66, 66, 66, 51, 51, 51, 51, 51,
	51, 51, 53, 53, 53, 71, 71, 72, 72, 73,
	73, 74, 74, 75, 76, 76, 76, 77, 77, 77,
	77, 78, 78, 78, 50, 50, 50, 50, 50, 50,
	79, 79, 79, 79, 80, 80, 61, 61, 63, 63,
	62, 64, 81, 81, 82, 83, 83, 85, 85, 86,
	86, 84, 84, 87, 87, 87, 87, 87, 87, 87,
	88, 88, 88, 89, 89, 90, 90, 90, 91, 91,
	94, 94, 95, 95, 98, 98, 99, 99, 92, 92,
	92, 92, 92, 92, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 92, 92, 93, 93, 93,
	93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
	93, 93, 93, 93, 132, 133, 103, 104, 104, 104,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 6, 7,
	10, 1, 3, 1, 3, 6, 7, 1, 1, 8,
	7, 6, 1, 1, 1, 3, 3, 3, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 2, 2, 2, 1, 4,
	4, 2, 2, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 0, 3, 0, 5, 0, 3, 5, 0,
	1, 0, 1, 0, 1, 2, 0, 2, 2, 2,
	0, 1, 0, 3, 3, 0, 2, 0, 2, 1,
	2, 1, 6, 4, 2, 3, 2, 1, 3, 1,
	3, 3, 8, 5, 8, 4, 6, 6, 7, 7,
	4, 5, 4, 5, 5, 3, 1, 1, 1, 3,
	2, 2, 2, 2, 2, 2, 2, 0, 2, 0,
	2, 1, 2, 2, 0, 1, 1, 0, 1, 0,
	1, 0, 1, 1, 3, 1, 2, 3, 5, 0,
	1, 2, 1, 1, 0, 2, 1, 3, 1, 1,
	1, 3, 3, 3, 3, 5, 5, 3, 0, 1,
	0, 1, 2, 1, 1, 1, 2, 2, 1, 2,
	3, 2, 3, 2, 2, 2, 1, 1, 3, 0,
	5, 5, 5, 1, 3, 0, 2, 1, 3, 3,
	2, 3, 1, 1, 1, 1, 3, 3, 3, 4,
	4, 5, 3, 4, 5, 6, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	0, 2, 1, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 2,
	2, 2, 3, 1, 1, 1, 1, 4, 5, 6,
	4, 4, 6, 6, 6, 9, 7, 5, 4, 2,
	2, 2, 2, 2, 2, 2, 2, 0, 2, 4,
	4, 4, 4, 0, 3, 4, 7, 3, 1, 1,
	2, 3, 3, 1, 2, 2, 1, 2, 1, 2,
	2, 1, 2, 0, 1, 0, 2, 1, 2, 4,
	0, 2, 1, 3, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 0, 3, 0, 2, 0,
	3, 1, 3, 2, 0, 1, 1, 0, 2, 4,
	4, 0, 2, 4, 2, 1, 3, 5, 4, 6,
	1, 3, 3, 5, 0, 5, 1, 3, 1, 2,
	3, 1, 1, 3, 3, 1, 1, 0, 2, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 1, 0, 1, 1, 0, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -130, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -16, -17, -3, -4, 6, -21,
	8, 9, 29, 106, 107, 109, 108, 110, 120, 47,
	24, 121, 122, 125, 126, 127, -132, 7, 180, 50,
	-131, 193, -73, 14, -20, 5, -18, -135, -18, -18,
	-18, -18, 111, -90, 113, 65, 117, -94, 53, -93,
	186, 123, 26, 191, 133, 188, 36, 17, 126, 190,
	125, 35, 127, 192, 189, 32, -84, 113, 115, 111,
	111, 112, 113, 111, -107, 53, -92, -93, 66, 21,
	23, 69, 101, 15, 70, 100, 181, 106, 45, 173,
	174, 171, 172, 166, 28, 9, 24, 121, 20, 94,
	108, 73, 74, 124, 22, 122, 64, 18, 48, 10,
	12, 13, 116, 115, 85, 112, 43, 7, 102, 25,
	82, 39, 27, 41, 83, 16, 175, 176, 30, 185,
	96, 46, 33, 67, 62, 49, 65, 14, 44, 84,
	109, 180, 42, 6, 184, 29, 168, 169, 170, 120,
	40, 111, 167, 72, 114, 63, 5, 117, 8, 47,
	118, 177, 178, 179, 31, 71, 11, 113, -98, 53,
	-93, -103, -103, -103, -103, -103, -103, -2, -77, 16,
	15, -5, -3, -132, 6, 19, 20, -24, 37, 38,
	-19, -84, -33, -34, -35, -36, -43, -65, -132, -41,
	-98, 10, -37, -41, -81, -82, -66, -94, -98, 53,
	-93, -86, 116, 112, -41, 180, 111, -41, -41, -85,
	116, 53, -85, -41, -103, -133, 52, -78, 18, 30,
	-31, -47, 67, -52, -48, 22, -51, -66, -64, -65,
	101, 90, 91, 98, 68, 102, -56, -54, -55, -57,
	63, 64, 55, 54, 56, 57, 58, 59, 62, -94,
	-98, -62, -132, 41, 42, 181, 182, 185, 183, 70,
	31, 171, 179, 178, 177, 175, 176, 173, 174, 116,
	172, 96, 180, -74, -75, -31, -73, -2, -18, 33,
	-22, 20, 61, -42, 25, -41, 29, 51, -38, -39,
	-40, 39, 43, 45, 40, 41, 42, 46, -102, 21,
	-33, -2, -132, -101, -100, 21, -98, 55, 103, -41,
	-134, 51, 10, 118, 51, 75, 103, -41, 67, 53,
	-104, -132, -95, -94, -92, 113, -41, -104, 114, -41,
	22, 49, -41, 8, 85, 66, 65, 82, 51, 17,
	-31, -49, 85, 67, 83, 84, 69, 87, 86, 97,
	90, 91, 92, 93, 94, 95, 96, 88, 89, 100,
	75, 76, 77, 78, 79, 80, 81, -65, -132, 104,
	105, -52, -52, -52, -52, -52, -52, -132, 103, -60,
	-31, -132, -132, -132, -132, -132, -132, -132, -69, -31,
	-132, -136, -132, -136, -136, -136, -136, -136, -136, -136,
	-132, -132, -132, -132, 51, -76, 23, 24, -77, -133,
	-24, -53, -94, 56, 59, -23, 40, -50, 29, 31,
	-2, -132, -41, -81, -34, -35, -34, -35, 39, 39,
	39, 44, 39, 44, 39, -39, -98, -133, -133, -2,
	-44, 47, 115, 48, -100, -99, -98, -92, -46, 11,
	-33, -41, -82, -31, -95, -99, -92, 50, -104, 22,
	-91, 118, -41, -87, 109, 107, 28, 108, 14, 181,
	192, 53, -41, -41, -104, 35, -31, -31, -58, 62,
	67, 63, 64, -31, -31, -48, -52, -59, -62, -65,
	60, 85, 83, 84, 69, -52, -52, -52, -52, -52,
	-52, -52, -52, -52, -52, -52, -52, -52, -52, -52,
	-105, 53, 55, -51, -51, -94, -29, 20, -28, -30,
	92, -31, -98, -95, 51, -133, -28, -28, -31, -31,
	-28, -22, -67, -68, 71, -94, -133, -28, -29, -28,
	-28, -75, -78, -83, 18, 10, 31, 31, -28, -80,
	49, -81, -61, -63, -62, -132, -2, -79, -94, -46,
	49, 49, 39, 39, -133, 112, 112, 112, -73, -31,
	-46, 103, -127, -125, 53, 49, -94, -104, -103, -88,
	-89, 114, 21, 112, 27, 36, 62, 63, 64, -59,
	-52, -52, -52, -27, 124, 66, -133, -28, 51, -97,
	-96, 21, -94, 55, 103, -132, -31, -133, -133, 51,
	118, 21, -133, -28, -70, -68, 73, -31, -133, -133,
	-133, -133, -133, -41, -32, 10, 26, -80, 51, -133,
	-133, -133, 51, 103, -73, -31, -31, -132, -132, -132,
	-77, -95, 51, 52, -108, -111, -113, -112, -109, -110,
	145, 146, 101, 149, 151, 152, 153, 154, 155, 156,
	157, 158, 159, 123, 141, 142, 143, 144, 128, 129,
	130, 131, 132, 133, 134, 136, 137, 138, 139, 140,
	-41, -41, -103, -27, 66, -52, -52, -133, -30, -96,
	92, -99, -29, -106, 101, 145, 123, 143, 139, 159,
	150, 163, 141, 164, -105, -106, 186, -73, 74, -31,
	72, -46, -33, 27, -63, 31, -2, -132, -94, -94,
	-77, -45, -94, -45, -45, -125, -126, -128, 119, 117,
	27, -104, -122, 62, 67, -118, 164, -114, 50, -114,
	-114, -114, -114, -116, 148, -116, -116, -116, -114, -114,
	-114, -120, 50, -120, -120, -121, 50, -121, -104, -52,
	103, -133, -133, -114, -114, -114, -121, -114, 133, -114,
	133, -133, -133, -132, -26, 184, -31, -71, 12, 8,
	-61, -2, 103, -133, 51, -133, -133, 50, 27, 27,
	53, -115, 28, 62, -119, 165, 56, -116, -116, -117,
	100, 29, -117, -117, -117, 56, 56, 92, -116, 53,
	-52, -133, 55, -72, 13, 15, -81, -133, -94, -94,
	-129, -94, 53, -123, 161, 55, 56, 57, 52, -117,
	-117, 53, 53, 101, 51, 52, 51, -25, 85, 189,
	-31, -60, 52, 51, -124, 119, 27, 117, 56, 56,
	-133, 187, 46, 190, -94, 27, 27, 52, 52, 36,
	188, 191, 36, 189, 190, 191,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 349, 0, 137, 137,
	137, 137, 137, 405, 391, 0, 0, 0, 0, 0,
	526, 526, 526, 526, 526, 526, 0, 27, 28, 524,
	1, 3, 357, 0, 0, 141, 144, 139, 391, 0,
	0, 0, 389, 0, 521, 0, 406, 407, 410, 411,
	507, 508, 509, 510, 511, 512, 513, 514, 515, 516,
	517, 518, 519, 520, 522, 523, 0, 0, 392, 0,
	387, 0, 387, 0, 526, 126, 127, 128, 418, 419,
	420, 421, 422, 423, 424, 425, 426, 427, 428, 429,
	430, 431, 432, 433, 434, 435, 436, 437, 438, 439,
	440, 441, 442, 443, 444, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 457, 458, 459,
	460, 461, 462, 463, 464, 465, 466, 467, 468, 469,
	470, 471, 472, 473, 474, 475, 476, 477, 478, 479,
	480, 481, 482, 483, 484, 485, 486, 487, 488, 489,
	490, 491, 492, 493, 494, 495, 496, 497, 498, 499,
	500, 501, 502, 503, 504, 505, 506, 521, 130, 414,
	415, 131, 132, 133, 134, 135, 136, 21, 361, 0,
	0, 349, 23, 0, 137, 142, 143, 147, 145, 146,
	138, 0, 0, 166, 168, 169, 170, 178, 0, 180,
	197, 0, 0, 34, 36, 382, 0, 332, 0, -2,
	-2, 0, 0, 0, 527, 0, 0, 527, 0, 0,
	0, 0, 0, 125, 129, 22, 525, 17, 0, 0,
	358, 207, 0, 212, 215, 0, 248, 249, 250, 251,
	0, 0, 0, 0, 0, 0, 273, 274, 275, 276,
	213, 214, 335, 336, 337, 338, 339, 340, 341, 332,
	0, 381, 0, 0, 0, 0, 0, 0, 0, 323,
	0, 297, 297, 297, 297, 297, 297, 297, 297, 0,
	0, 0, 0, 350, 351, 354, 357, 21, 144, 0,
	149, 148, 140, 0, 0, 196, 0, 0, 0, 0,
	0, 185, 0, 0, 188, 0, 0, 0, 0, 179,
	0, 21, 0, 199, 181, 0, 183, 184, 0, 205,
	0, 0, 32, 33, 0, 0, 0, 527, 0, 408,
	115, 528, 529, 412, 413, 0, 0, 120, 0, 122,
	388, 0, 527, 362, 0, 0, 0, 0, 0, 0,
	210, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	233, 234, 235, 236, 237, 238, 239, 226, 0, 0,
	0, 267, 268, 269, 270, 271, 0, 151, 0, 0,
	246, 0, 0, 0, 0, 0, 0, 147, 0, 324,
	0, 289, 0, 290, 291, 292, 293, 294, 295, 296,
	0, 151, 0, 0, 0, 353, 355, 356, 361, 24,
	147, 0, 342, 0, 0, 0, 150, 374, 0, 0,
	-2, 0, 195, 205, 167, 174, 0, 177, 186, 187,
	189, 0, 191, 0, 193, 194, 171, 172, 245, 21,
	173, 0, 0, 0, 182, 198, 416, 417, 349, 0,
	205, 35, 383, 384, 333, 0, -2, 524, 113, 390,
	0, 0, 527, 526, 400, 393, 394, 395, 396, 397,
	398, 399, 121, 123, 124, 0, 208, 209, 211, 227,
	0, 229, 231, 359, 360, 216, 217, 218, 242, 243,
	244, 0, 0, 0, 0, 240, 222, 0, 252, 253,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	266, 308, 309, 264, 265, 272, 0, 0, 152, 153,
	155, 159, 0, 333, 0, 380, 0, 0, 0, 0,
	0, 0, 330, 327, 0, 0, 298, 0, 0, 0,
	0, 352, 18, 0, 385, 386, 343, 344, 164, 25,
	0, 374, 364, 376, 378, 0, 21, 0, 370, 349,
	0, 0, 190, 192, -2, 0, 0, 0, 357, 206,
	31, 0, 0, 109, 0, 0, 409, 116, 117, 0,
	526, 401, 402, 403, 404, 363, 228, 230, 232, 219,
	240, 223, 0, 220, 0, 0, 277, 0, 0, 156,
	160, 0, 162, 163, 0, 151, 247, 280, 281, 0,
	0, 0, 0, 349, 0, 328, 0, 0, 288, 299,
	300, 301, 302, 19, 205, 0, 0, 26, 0, 379,
	-2, 0, 0, 0, 357, 175, 176, 0, 0, 0,
	30, 334, 0, 527, 83, 79, 38, 39, 72, 41,
	72, 72, 72, 72, 92, 92, 92, 92, 67, 68,
	69, 70, 71, 54, 72, 72, 72, 58, 42, 43,
	44, 45, 46, 47, 48, 74, 74, 74, 76, 76,
	527, 118, 119, 221, 0, 241, 224, 278, 154, 161,
	157, 0, 0, 0, 72, 72, 313, 72, 76, 316,
	72, 318, 72, 321, 0, 0, 0, 325, 287, 331,
	0, 345, 165, 0, 377, 0, -2, 0, 372, 371,
	29, 0, 203, 0, 0, 110, 111, 0, 0, 0,
	0, 112, 86, 84, 0, 81, 80, 40, 0, 92,
	92, 61, 62, 95, 0, 95, 95, 95, 55, 56,
	57, 49, 0, 50, 51, 52, 0, 53, 114, 225,
	0, 279, 282, 310, 92, 314, 315, 317, 319, 320,
	322, 284, 283, 0, 0, 0, 329, 347, 0, 0,
	367, 21, 0, 200, 0, 201, 202, 0, 104, 0,
	106, 90, 0, 85, 37, 82, 0, 95, 95, 63,
	0, 0, 64, 65, 66, 0, 0, 158, 311, 312,
	303, 286, 326, 20, 0, 0, 375, -2, 373, 204,
	0, 107, 105, 97, 91, 87, 88, 89, 73, 59,
	60, 96, 93, 94, 0, 77, 0, 0, 0, 0,
	348, 346, 103, 0, 102, 0, 99, 101, 0, 0,
	285, 0, 0, 0, 108, 98, 100, 75, 78, 304,
	0, 307, 305, 0, 0, 306,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 68, 3, 3, 3, 95, 87, 3,
	50, 52, 92, 90, 51, 91, 103, 93, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 193,
	76, 75, 77, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 97, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 86, 3, 98,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 69, 70, 71, 72, 73, 74, 78,
	79, 80, 81, 82, 83, 84, 85, 88, 89, 94,
	96, 99, 100, 101, 102, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:247
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:252
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:253
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:257
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 17:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:275
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 18:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:283
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 19:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:287
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 20:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:294
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:300
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:304
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:310
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 24:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:314
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:321
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:332
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:344
		{
			yyVAL.str = InsertStr
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:348
		{
			yyVAL.str = ReplaceStr
		}
	case 29:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:354
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:360
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 31:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:364
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:369
		{
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:370
		{
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:374
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:378
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:384
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].updateExprs}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:390
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:400
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:405
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:411
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:415
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:419
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:423
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:427
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:431
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:435
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:441
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 50:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:447
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 51:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:453
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:459
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:465
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:473
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:477
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:481
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:485
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:489
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 59:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:495
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 60:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:499
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:503
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:507
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:511
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:515
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:519
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:523
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:527
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:531
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:535
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:539
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:543
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:548
		{
			yyVAL.optVal = nil
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:552
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:557
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 75:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:561
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 76:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:569
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:573
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 78:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:579
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 79:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:587
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:591
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 81:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:596
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:600
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 83:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:606
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:610
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:614
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 86:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:619
		{
			yyVAL.optVal = nil
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:623
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:627
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:631
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 90:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:636
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:640
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 92:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:645
		{
			yyVAL.str = ""
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:649
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:653
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 95:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:658
		{
			yyVAL.str = ""
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:662
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 97:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:667
		{
			yyVAL.colKeyOpt = ColKeyNone
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:671
		{
			yyVAL.colKeyOpt = ColKeyPrimary
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:675
		{
			yyVAL.colKeyOpt = ColKey
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:679
		{
			yyVAL.colKeyOpt = ColKeyUnique
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:683
		{
			yyVAL.colKeyOpt = ColKeyUnique
		}
	case 102:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:689
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[5].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[6].colKeyOpt
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 103:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:699
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].columns}
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:705
		{
			yyVAL.indexInfo = &IndexInfo{Primary: true}
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:709
		{
			yyVAL.indexInfo = &IndexInfo{Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:713
		{
			yyVAL.indexInfo = &IndexInfo{Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:719
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:723
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:729
		{
			yyVAL.tableColumns = &TableColumns{}
			yyVAL.tableColumns.AddColumn(yyDollar[1].columnDefinition)
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:734
		{
			yyVAL.tableColumns.AddColumn(yyDollar[3].columnDefinition)
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:738
		{
			yyVAL.tableColumns.AddIndex(yyDollar[3].indexDefinition)
		}
	case 112:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:744
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName, Columns: yyDollar[6].tableColumns}
		}
	case 113:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:748
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
		}
	case 114:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:752
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 115:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:757
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 116:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:761
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 117:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:767
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 118:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:771
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 119:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:776
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 120:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:781
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 121:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:787
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 122:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:793
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 123:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:801
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 124:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:806
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:816
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:822
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:826
		{
			switch v := string(yyDollar[1].bytes); v {
			case ShowDatabasesStr, ShowTablesStr, ShowKeyspacesStr, ShowShardsStr, ShowVSchemaTablesStr:
				yyVAL.str = v
			default:
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:835
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:841
		{
			yyVAL.statement = &Show{Type: yyDollar[2].str}
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:847
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:853
		{
			yyVAL.statement = &OtherRead{}
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:857
		{
			yyVAL.statement = &OtherRead{}
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:861
		{
			yyVAL.statement = &OtherRead{}
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:865
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:869
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:873
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:878
		{
			setAllowComments(yylex, true)
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:882
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:888
		{
			yyVAL.bytes2 = nil
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:892
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:898
		{
			yyVAL.str = UnionStr
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:902
		{
			yyVAL.str = UnionAllStr
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:906
		{
			yyVAL.str = UnionDistinctStr
		}
	case 144:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:911
		{
			yyVAL.str = ""
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:915
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:919
		{
			yyVAL.str = SQLCacheStr
		}
	case 147:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:924
		{
			yyVAL.str = ""
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:928
		{
			yyVAL.str = DistinctStr
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:933
		{
			yyVAL.str = ""
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:937
		{
			yyVAL.str = StraightJoinHint
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:942
		{
			yyVAL.selectExprs = nil
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:946
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:952
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:956
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:962
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:966
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:970
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 158:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:974
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:979
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:983
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:987
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:994
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:999
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1003
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1009
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1013
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1023
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1027
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1031
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1037
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1050
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 175:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1054
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 176:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1058
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1062
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 178:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1067
		{
			yyVAL.empty = struct{}{}
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1069
		{
			yyVAL.empty = struct{}{}
		}
	case 180:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1072
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1076
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1080
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1087
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1093
		{
			yyVAL.str = JoinStr
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1097
		{
			yyVAL.str = JoinStr
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1101
		{
			yyVAL.str = JoinStr
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1105
		{
			yyVAL.str = StraightJoinStr
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1111
		{
			yyVAL.str = LeftJoinStr
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1115
		{
			yyVAL.str = LeftJoinStr
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1119
		{
			yyVAL.str = RightJoinStr
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1123
		{
			yyVAL.str = RightJoinStr
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1129
		{
			yyVAL.str = NaturalJoinStr
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1133
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1143
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1147
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1153
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1157
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 199:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1162
		{
			yyVAL.indexHints = nil
		}
	case 200:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1166
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 201:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1170
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 202:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1174
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1180
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1184
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 205:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1189
		{
			yyVAL.expr = nil
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1193
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1199
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1203
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1207
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1211
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1215
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1219
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1225
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1229
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1235
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1239
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].boolVal}
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1243
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1247
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 219:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1251
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 220:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1255
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 221:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1259
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1263
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 223:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1267
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 224:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1271
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 225:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1275
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1279
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1285
		{
			yyVAL.str = IsNullStr
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1289
		{
			yyVAL.str = IsNotNullStr
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1293
		{
			yyVAL.str = IsTrueStr
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1297
		{
			yyVAL.str = IsNotTrueStr
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1301
		{
			yyVAL.str = IsFalseStr
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1305
		{
			yyVAL.str = IsNotFalseStr
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1311
		{
			yyVAL.str = EqualStr
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1315
		{
			yyVAL.str = LessThanStr
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1319
		{
			yyVAL.str = GreaterThanStr
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1323
		{
			yyVAL.str = LessEqualStr
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1327
		{
			yyVAL.str = GreaterEqualStr
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1331
		{
			yyVAL.str = NotEqualStr
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1335
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 240:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1340
		{
			yyVAL.expr = nil
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1344
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1350
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1354
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1358
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1364
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1370
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1374
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1380
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1384
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1388
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1392
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1396
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1400
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1404
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1408
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1412
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1416
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1420
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1424
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1428
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1432
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1436
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1440
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1444
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1448
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1452
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1456
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1460
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1468
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1482
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1486
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1490
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent}
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1508
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 278:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1512
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 279:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1516
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 280:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1526
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1530
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 282:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1534
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 283:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1538
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 284:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1542
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 285:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1546
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 286:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1550
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 287:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1554
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1558
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1568
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1572
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1576
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1580
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1585
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1590
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1595
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1600
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 299:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1614
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 300:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1618
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 301:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1622
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 302:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1626
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 303:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1632
		{
			yyVAL.str = ""
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1636
		{
			yyVAL.str = BooleanModeStr
		}
	case 305:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1640
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 306:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1644
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1648
		{
			yyVAL.str = QueryExpansionStr
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1654
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1658
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1664
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1668
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1672
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1676
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1680
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1684
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1690
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1694
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1698
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1702
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1706
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1710
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1714
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1719
		{
			yyVAL.expr = nil
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1723
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1728
		{
			yyVAL.str = string("")
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1732
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1738
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1742
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 329:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1748
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1753
		{
			yyVAL.expr = nil
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1757
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1763
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1767
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 334:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1771
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1777
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1781
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1785
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1789
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1793
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1797
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1801
		{
			yyVAL.expr = &NullVal{}
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1807
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1816
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1820
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 345:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1825
		{
			yyVAL.exprs = nil
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1829
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 347:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1834
		{
			yyVAL.expr = nil
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1838
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 349:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1843
		{
			yyVAL.orderBy = nil
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1847
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1853
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1857
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1863
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 354:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1868
		{
			yyVAL.str = AscScr
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1872
		{
			yyVAL.str = AscScr
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1876
		{
			yyVAL.str = DescScr
		}
	case 357:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1881
		{
			yyVAL.limit = nil
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1885
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 359:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1889
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 360:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1893
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 361:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1898
		{
			yyVAL.str = ""
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1902
		{
			yyVAL.str = ForUpdateStr
		}
	case 363:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1906
		{
			yyVAL.str = ShareModeStr
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1919
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1923
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1927
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 367:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1932
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 368:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1936
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 369:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1940
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1947
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1951
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1955
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 373:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1959
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 374:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1964
		{
			yyVAL.updateExprs = nil
		}
	case 375:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1968
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1974
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1978
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1984
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1988
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1994
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2000
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2010
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2014
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2020
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 387:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2029
		{
			yyVAL.byt = 0
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2031
		{
			yyVAL.byt = 1
		}
	case 389:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2034
		{
			yyVAL.empty = struct{}{}
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2036
		{
			yyVAL.empty = struct{}{}
		}
	case 391:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2039
		{
			yyVAL.str = ""
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2041
		{
			yyVAL.str = IgnoreStr
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2045
		{
			yyVAL.empty = struct{}{}
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2047
		{
			yyVAL.empty = struct{}{}
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2049
		{
			yyVAL.empty = struct{}{}
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2051
		{
			yyVAL.empty = struct{}{}
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2053
		{
			yyVAL.empty = struct{}{}
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2055
		{
			yyVAL.empty = struct{}{}
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2057
		{
			yyVAL.empty = struct{}{}
		}
	case 400:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2060
		{
			yyVAL.empty = struct{}{}
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2062
		{
			yyVAL.empty = struct{}{}
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2064
		{
			yyVAL.empty = struct{}{}
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2068
		{
			yyVAL.empty = struct{}{}
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2070
		{
			yyVAL.empty = struct{}{}
		}
	case 405:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2073
		{
			yyVAL.empty = struct{}{}
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2075
		{
			yyVAL.empty = struct{}{}
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2077
		{
			yyVAL.empty = struct{}{}
		}
	case 408:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2080
		{
			yyVAL.empty = struct{}{}
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2082
		{
			yyVAL.empty = struct{}{}
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2086
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2090
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2097
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2103
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2107
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2114
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2245
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2254
		{
			decNesting(yylex)
		}
	case 526:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2259
		{
			forceEOF(yylex)
		}
	case 527:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2264
		{
			forceEOF(yylex)
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2268
		{
			forceEOF(yylex)
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2272
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
