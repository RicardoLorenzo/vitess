//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:46
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	updateExpr        *UpdateExpr
	colIdent          ColIdent
	colIdents         []ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	columnDefinitions []*ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALL = 57361
const DISTINCT = 57362
const AS = 57363
const EXISTS = 57364
const ASC = 57365
const DESC = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const VALUES = 57373
const LAST_INSERT_ID = 57374
const NEXT = 57375
const VALUE = 57376
const SHARE = 57377
const MODE = 57378
const SQL_NO_CACHE = 57379
const SQL_CACHE = 57380
const JOIN = 57381
const STRAIGHT_JOIN = 57382
const LEFT = 57383
const RIGHT = 57384
const INNER = 57385
const OUTER = 57386
const CROSS = 57387
const NATURAL = 57388
const USE = 57389
const FORCE = 57390
const ON = 57391
const ID = 57392
const HEX = 57393
const STRING = 57394
const INTEGRAL = 57395
const FLOAT = 57396
const HEXNUM = 57397
const VALUE_ARG = 57398
const LIST_ARG = 57399
const COMMENT = 57400
const NULL = 57401
const TRUE = 57402
const FALSE = 57403
const OR = 57404
const AND = 57405
const NOT = 57406
const BETWEEN = 57407
const CASE = 57408
const WHEN = 57409
const THEN = 57410
const ELSE = 57411
const END = 57412
const LE = 57413
const GE = 57414
const NE = 57415
const NULL_SAFE_EQUAL = 57416
const IS = 57417
const LIKE = 57418
const REGEXP = 57419
const IN = 57420
const SHIFT_LEFT = 57421
const SHIFT_RIGHT = 57422
const DIV = 57423
const MOD = 57424
const UNARY = 57425
const COLLATE = 57426
const BINARY = 57427
const INTERVAL = 57428
const JSON_EXTRACT_OP = 57429
const JSON_UNQUOTE_EXTRACT_OP = 57430
const CREATE = 57431
const ALTER = 57432
const DROP = 57433
const RENAME = 57434
const ANALYZE = 57435
const TABLE = 57436
const INDEX = 57437
const VIEW = 57438
const TO = 57439
const IGNORE = 57440
const IF = 57441
const UNIQUE = 57442
const USING = 57443
const PRIMARY = 57444
const SHOW = 57445
const DESCRIBE = 57446
const EXPLAIN = 57447
const DATE = 57448
const ESCAPE = 57449
const REPAIR = 57450
const OPTIMIZE = 57451
const TRUNCATE = 57452
const BIT = 57453
const TINYINT = 57454
const SMALLINT = 57455
const MEDIUMINT = 57456
const INT = 57457
const INTEGER = 57458
const BIGINT = 57459
const INTNUM = 57460
const REAL = 57461
const DOUBLE = 57462
const FLOAT_TYPE = 57463
const DECIMAL = 57464
const NUMERIC = 57465
const TIME = 57466
const TIMESTAMP = 57467
const DATETIME = 57468
const YEAR = 57469
const CHAR = 57470
const VARCHAR = 57471
const BOOL = 57472
const CHARACTER = 57473
const VARBINARY = 57474
const NCHAR = 57475
const TEXT = 57476
const TINYTEXT = 57477
const MEDIUMTEXT = 57478
const LONGTEXT = 57479
const BLOB = 57480
const TINYBLOB = 57481
const MEDIUMBLOB = 57482
const LONGBLOB = 57483
const JSON = 57484
const NULLX = 57485
const AUTO_INCREMENT = 57486
const APPROXNUM = 57487
const SIGNED = 57488
const UNSIGNED = 57489
const ZEROFILL = 57490
const DATABASES = 57491
const TABLES = 57492
const VITESS_KEYSPACES = 57493
const VITESS_SHARDS = 57494
const VSCHEMA_TABLES = 57495
const CURRENT_TIMESTAMP = 57496
const DATABASE = 57497
const CURRENT_DATE = 57498
const CURRENT_TIME = 57499
const LOCALTIME = 57500
const LOCALTIMESTAMP = 57501
const UTC_DATE = 57502
const UTC_TIME = 57503
const UTC_TIMESTAMP = 57504
const REPLACE = 57505
const CONVERT = 57506
const CAST = 57507
const GROUP_CONCAT = 57508
const SEPARATOR = 57509
const MATCH = 57510
const AGAINST = 57511
const BOOLEAN = 57512
const LANGUAGE = 57513
const WITH = 57514
const QUERY = 57515
const EXPANSION = 57516
const UNUSED = 57517

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"USING",
	"PRIMARY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VSCHEMA_TABLES",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 21,
	-2, 4,
	-1, 221,
	103, 426,
	-2, 422,
	-1, 222,
	103, 427,
	-2, 423,
	-1, 442,
	5, 21,
	-2, 377,
	-1, 478,
	103, 429,
	-2, 425,
	-1, 587,
	5, 22,
	-2, 257,
	-1, 653,
	5, 22,
	-2, 378,
	-1, 739,
	5, 21,
	-2, 380,
	-1, 848,
	5, 22,
	-2, 381,
}

const yyPrivate = 57344

const yyLast = 4976

var yyAct = [...]int{

	222, 854, 750, 544, 401, 575, 765, 749, 830, 249,
	245, 771, 783, 271, 216, 744, 342, 470, 344, 596,
	576, 533, 539, 716, 59, 623, 542, 190, 779, 87,
	182, 510, 477, 616, 572, 273, 556, 57, 239, 322,
	296, 302, 248, 237, 246, 326, 199, 206, 41, 311,
	182, 182, 46, 901, 897, 182, 217, 900, 889, 899,
	896, 218, 42, 729, 888, 219, 803, 227, 826, 183,
	346, 764, 48, 49, 50, 51, 858, 840, 182, 772,
	182, 798, 205, 796, 182, 484, 882, 232, 224, 204,
	334, 78, 323, 3, 463, 465, 77, 717, 78, 86,
	350, 184, 185, 186, 187, 188, 873, 370, 369, 379,
	380, 372, 373, 374, 375, 376, 377, 378, 371, 719,
	347, 381, 491, 80, 81, 82, 590, 251, 605, 189,
	759, 333, 589, 228, 607, 721, 489, 725, 588, 720,
	225, 718, 83, 79, 391, 392, 723, 810, 541, 788,
	356, 656, 627, 594, 236, 722, 597, 400, 338, 724,
	726, 494, 464, 372, 373, 374, 375, 376, 377, 378,
	371, 330, 772, 381, 831, 381, 883, 209, 881, 231,
	370, 369, 379, 380, 372, 373, 374, 375, 376, 377,
	378, 371, 632, 413, 381, 242, 297, 867, 335, 371,
	359, 337, 381, 731, 182, 887, 358, 357, 358, 357,
	874, 182, 182, 557, 182, 488, 490, 487, 617, 606,
	758, 604, 757, 359, 182, 359, 357, 59, 340, 182,
	59, 824, 182, 428, 429, 182, 557, 634, 639, 761,
	345, 304, 359, 345, 762, 868, 349, 885, 362, 300,
	374, 375, 376, 377, 378, 371, 298, 517, 381, 633,
	884, 837, 234, 393, 394, 395, 396, 397, 398, 836,
	843, 515, 516, 514, 39, 358, 357, 827, 402, 358,
	357, 358, 357, 866, 513, 411, 733, 856, 299, 492,
	878, 877, 359, 609, 610, 611, 359, 534, 359, 535,
	493, 821, 59, 502, 504, 505, 597, 182, 503, 341,
	182, 182, 182, 182, 233, 434, 871, 870, 218, 812,
	238, 182, 219, 445, 894, 182, 430, 893, 182, 621,
	238, 182, 547, 182, 182, 859, 860, 861, 209, 238,
	59, 475, 862, 431, 666, 665, 218, 432, 182, 863,
	219, 182, 345, 345, 182, 59, 480, 476, 447, 336,
	449, 499, 500, 467, 506, 507, 459, 460, 345, 457,
	869, 497, 472, 466, 509, 389, 651, 518, 519, 520,
	521, 522, 523, 524, 525, 526, 527, 528, 529, 530,
	531, 532, 446, 474, 448, 655, 238, 815, 442, 59,
	511, 469, 547, 238, 309, 238, 309, 402, 508, 478,
	551, 552, 538, 59, 345, 648, 43, 461, 18, 546,
	265, 264, 266, 267, 268, 269, 558, 573, 270, 336,
	297, 621, 426, 471, 536, 537, 471, 209, 209, 209,
	209, 440, 308, 441, 59, 548, 561, 18, 766, 18,
	218, 554, 209, 621, 219, 574, 621, 581, 559, 196,
	209, 818, 39, 582, 309, 39, 784, 564, 780, 565,
	76, 478, 738, 309, 438, 592, 336, 577, 415, 416,
	417, 418, 419, 420, 421, 59, 59, 707, 598, 583,
	593, 39, 512, 39, 573, 361, 461, 353, 599, 345,
	586, 454, 600, 39, 16, 587, 455, 370, 369, 379,
	380, 372, 373, 374, 375, 376, 377, 378, 371, 203,
	452, 381, 585, 451, 450, 453, 613, 614, 615, 360,
	898, 895, 456, 591, 317, 318, 579, 200, 201, 608,
	498, 570, 303, 358, 357, 59, 612, 569, 832, 194,
	511, 629, 823, 549, 550, 301, 601, 553, 625, 892,
	359, 640, 313, 316, 317, 318, 314, 182, 315, 319,
	891, 560, 584, 562, 563, 820, 819, 240, 736, 649,
	482, 321, 402, 619, 352, 303, 571, 658, 659, 241,
	197, 198, 638, 630, 631, 59, 191, 635, 846, 182,
	192, 43, 641, 182, 642, 643, 644, 645, 345, 650,
	845, 806, 471, 664, 313, 316, 317, 318, 314, 663,
	315, 319, 652, 653, 654, 59, 568, 807, 708, 709,
	355, 45, 47, 332, 567, 40, 1, 853, 625, 756,
	748, 345, 512, 732, 595, 657, 546, 706, 711, 182,
	712, 715, 479, 755, 880, 727, 59, 59, 728, 857,
	714, 59, 59, 59, 710, 734, 59, 760, 825, 741,
	742, 272, 737, 705, 745, 745, 745, 746, 747, 345,
	767, 768, 769, 770, 751, 743, 754, 577, 735, 620,
	773, 774, 775, 763, 776, 777, 778, 822, 478, 730,
	669, 180, 670, 636, 59, 668, 672, 671, 667, 84,
	320, 325, 622, 483, 53, 785, 603, 345, 787, 602,
	786, 212, 212, 220, 791, 792, 212, 793, 781, 782,
	795, 486, 797, 223, 794, 566, 580, 804, 427, 295,
	844, 805, 637, 410, 808, 555, 250, 739, 501, 212,
	59, 212, 816, 261, 258, 212, 260, 259, 433, 789,
	790, 439, 363, 345, 243, 462, 208, 305, 751, 312,
	310, 799, 800, 214, 577, 207, 209, 647, 802, 828,
	829, 872, 833, 834, 835, 437, 19, 44, 811, 59,
	813, 814, 202, 15, 14, 13, 12, 11, 10, 9,
	8, 7, 345, 6, 839, 5, 4, 664, 193, 17,
	2, 59, 841, 59, 0, 0, 59, 218, 59, 59,
	852, 219, 847, 851, 849, 0, 850, 0, 0, 345,
	0, 345, 855, 809, 751, 211, 751, 864, 865, 274,
	36, 0, 0, 0, 0, 0, 842, 0, 0, 875,
	402, 876, 59, 848, 816, 18, 37, 20, 21, 0,
	0, 0, 879, 0, 0, 345, 0, 0, 0, 0,
	751, 0, 0, 30, 0, 212, 36, 0, 22, 59,
	890, 0, 212, 328, 195, 212, 215, 0, 0, 210,
	226, 0, 855, 0, 0, 212, 29, 0, 0, 39,
	212, 0, 0, 212, 0, 0, 212, 0, 0, 0,
	0, 0, 0, 229, 0, 230, 886, 0, 0, 235,
	0, 18, 379, 380, 372, 373, 374, 375, 376, 377,
	378, 371, 67, 0, 381, 0, 0, 0, 0, 0,
	0, 62, 0, 0, 0, 0, 0, 75, 0, 0,
	71, 66, 0, 0, 0, 23, 24, 26, 25, 27,
	0, 0, 0, 0, 0, 39, 0, 0, 58, 28,
	31, 32, 0, 0, 33, 34, 35, 0, 212, 0,
	220, 212, 212, 212, 212, 0, 0, 0, 0, 0,
	0, 0, 458, 0, 0, 0, 212, 0, 0, 328,
	0, 0, 468, 0, 212, 212, 0, 0, 220, 0,
	468, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	0, 0, 212, 0, 0, 212, 0, 0, 179, 38,
	0, 0, 0, 0, 0, 36, 0, 0, 61, 307,
	70, 68, 72, 0, 0, 0, 0, 0, 64, 331,
	324, 0, 0, 0, 0, 0, 0, 0, 0, 339,
	0, 0, 0, 0, 348, 0, 343, 351, 0, 343,
	354, 545, 468, 0, 0, 0, 545, 545, 0, 0,
	545, 0, 0, 0, 0, 0, 0, 390, 0, 0,
	0, 0, 0, 0, 545, 545, 545, 545, 0, 0,
	0, 60, 0, 65, 74, 69, 63, 73, 0, 545,
	0, 399, 220, 0, 403, 404, 405, 406, 407, 408,
	409, 0, 412, 414, 414, 414, 414, 414, 414, 414,
	414, 422, 423, 424, 425, 0, 0, 0, 0, 0,
	0, 0, 444, 0, 0, 443, 0, 0, 0, 210,
	210, 210, 210, 369, 379, 380, 372, 373, 374, 375,
	376, 377, 378, 371, 324, 0, 381, 0, 0, 473,
	0, 0, 210, 0, 0, 0, 0, 0, 0, 343,
	0, 67, 0, 485, 0, 0, 495, 0, 0, 496,
	62, 0, 0, 0, 343, 0, 75, 0, 0, 71,
	66, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 545, 0, 0, 0, 0, 58, 0, 0,
	0, 0, 0, 0, 0, 0, 545, 0, 0, 0,
	36, 0, 0, 0, 0, 0, 0, 0, 212, 0,
	0, 0, 0, 403, 0, 0, 0, 0, 0, 0,
	370, 369, 379, 380, 372, 373, 374, 375, 376, 377,
	378, 371, 0, 0, 381, 0, 0, 0, 0, 0,
	212, 0, 0, 0, 212, 0, 0, 179, 0, 0,
	0, 578, 0, 36, 0, 0, 0, 61, 0, 70,
	68, 72, 0, 545, 0, 0, 0, 64, 67, 468,
	545, 540, 0, 247, 0, 0, 0, 62, 0, 0,
	0, 0, 282, 75, 0, 0, 71, 66, 0, 0,
	212, 0, 275, 276, 0, 343, 0, 0, 0, 0,
	0, 39, 0, 0, 221, 265, 264, 266, 267, 268,
	269, 0, 0, 270, 262, 263, 0, 0, 244, 256,
	60, 281, 65, 74, 69, 63, 73, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 253, 254, 543, 0, 0, 0, 293, 0, 255,
	0, 0, 252, 257, 0, 0, 628, 0, 0, 0,
	0, 0, 0, 0, 179, 0, 0, 291, 0, 0,
	0, 0, 646, 0, 61, 0, 70, 68, 72, 0,
	0, 0, 0, 0, 64, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 660, 661,
	662, 0, 0, 0, 703, 0, 0, 0, 704, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 283, 292, 289, 290, 287, 288, 286, 285,
	284, 294, 277, 278, 280, 0, 279, 60, 0, 65,
	74, 69, 63, 73, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 0, 0, 0, 0, 210, 0,
	0, 578, 0, 0, 740, 0, 168, 155, 129, 170,
	107, 121, 178, 122, 123, 149, 94, 137, 67, 119,
	0, 110, 89, 116, 90, 108, 131, 62, 134, 106,
	157, 140, 176, 75, 144, 0, 71, 66, 0, 0,
	133, 162, 135, 154, 128, 150, 100, 143, 171, 120,
	147, 0, 0, 343, 58, 0, 752, 753, 0, 0,
	0, 0, 0, 146, 167, 118, 148, 88, 145, 0,
	92, 95, 177, 165, 113, 114, 817, 0, 0, 801,
	0, 0, 0, 132, 136, 151, 126, 0, 578, 0,
	36, 0, 0, 0, 0, 111, 0, 142, 0, 0,
	0, 97, 93, 130, 0, 0, 0, 99, 0, 112,
	152, 0, 163, 127, 179, 166, 125, 124, 169, 172,
	0, 161, 109, 117, 61, 115, 70, 68, 72, 0,
	618, 0, 0, 0, 64, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	370, 369, 379, 380, 372, 373, 374, 375, 376, 377,
	378, 371, 91, 0, 381, 0, 0, 105, 164, 158,
	159, 160, 103, 104, 101, 102, 138, 139, 173, 174,
	175, 153, 98, 0, 0, 156, 141, 60, 0, 65,
	74, 69, 63, 73, 168, 155, 129, 170, 107, 121,
	178, 122, 123, 149, 94, 137, 67, 119, 0, 110,
	89, 116, 90, 108, 131, 62, 134, 106, 157, 140,
	176, 75, 144, 0, 71, 66, 0, 0, 133, 162,
	135, 154, 128, 150, 100, 143, 171, 120, 147, 0,
	0, 0, 58, 0, 752, 753, 0, 0, 0, 0,
	0, 146, 167, 118, 148, 88, 145, 0, 92, 95,
	177, 165, 113, 114, 0, 0, 0, 0, 0, 0,
	0, 132, 136, 151, 126, 0, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 142, 0, 0, 0, 97,
	93, 130, 0, 0, 0, 99, 0, 112, 152, 0,
	163, 127, 179, 166, 125, 124, 169, 172, 0, 161,
	109, 117, 61, 115, 70, 68, 72, 0, 0, 0,
	0, 0, 64, 0, 370, 369, 379, 380, 372, 373,
	374, 375, 376, 377, 378, 371, 0, 96, 381, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	91, 0, 0, 0, 0, 105, 164, 158, 159, 160,
	103, 104, 101, 102, 138, 139, 173, 174, 175, 153,
	98, 0, 0, 156, 141, 60, 0, 65, 74, 69,
	63, 73, 168, 155, 129, 170, 107, 121, 178, 122,
	123, 149, 94, 137, 67, 119, 0, 110, 89, 116,
	90, 108, 131, 62, 134, 106, 157, 140, 176, 75,
	144, 0, 71, 66, 0, 0, 133, 162, 135, 154,
	128, 150, 100, 143, 171, 120, 147, 0, 0, 0,
	58, 0, 0, 0, 0, 0, 0, 0, 0, 146,
	167, 118, 148, 88, 145, 0, 92, 95, 177, 165,
	113, 114, 0, 0, 0, 0, 0, 0, 0, 132,
	136, 151, 126, 0, 0, 0, 0, 0, 0, 838,
	0, 111, 0, 142, 0, 0, 0, 97, 93, 130,
	0, 0, 0, 99, 0, 112, 152, 0, 163, 127,
	179, 166, 125, 124, 169, 172, 0, 161, 109, 117,
	61, 115, 70, 68, 72, 0, 0, 0, 0, 0,
	64, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 0,
	0, 0, 0, 105, 164, 158, 159, 160, 103, 104,
	101, 102, 138, 139, 173, 174, 175, 153, 98, 0,
	0, 156, 141, 60, 0, 65, 74, 69, 63, 73,
	168, 155, 129, 170, 107, 121, 178, 122, 123, 149,
	94, 137, 67, 119, 0, 110, 89, 116, 90, 108,
	131, 62, 134, 106, 157, 140, 176, 75, 144, 0,
	71, 66, 0, 0, 133, 162, 135, 154, 128, 150,
	100, 143, 171, 120, 147, 39, 0, 0, 58, 0,
	0, 0, 0, 0, 0, 0, 0, 146, 167, 118,
	148, 88, 145, 0, 92, 95, 177, 165, 113, 114,
	0, 0, 0, 0, 0, 0, 0, 132, 136, 151,
	126, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 142, 0, 0, 0, 97, 93, 130, 0, 0,
	0, 99, 0, 112, 152, 0, 163, 127, 179, 166,
	125, 124, 169, 172, 0, 161, 109, 117, 61, 115,
	70, 68, 72, 0, 0, 0, 0, 0, 64, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 91, 0, 0, 0,
	0, 105, 164, 158, 159, 160, 103, 104, 101, 102,
	138, 139, 173, 174, 175, 153, 98, 0, 0, 156,
	141, 60, 0, 65, 74, 69, 63, 73, 168, 155,
	129, 170, 107, 121, 178, 122, 123, 149, 94, 137,
	67, 119, 0, 110, 89, 116, 90, 108, 131, 62,
	134, 106, 157, 140, 176, 75, 144, 0, 71, 66,
	0, 0, 133, 162, 135, 154, 128, 150, 100, 143,
	171, 120, 147, 0, 0, 0, 221, 0, 0, 0,
	0, 0, 0, 0, 0, 146, 167, 118, 148, 88,
	145, 0, 92, 95, 177, 165, 113, 114, 0, 0,
	0, 0, 0, 0, 0, 132, 136, 151, 126, 0,
	0, 0, 0, 0, 0, 713, 0, 111, 0, 142,
	0, 0, 0, 97, 93, 130, 0, 0, 0, 99,
	0, 112, 152, 0, 163, 127, 179, 166, 125, 124,
	169, 172, 0, 161, 109, 117, 61, 115, 70, 68,
	72, 0, 0, 0, 0, 0, 64, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 91, 0, 0, 0, 0, 105,
	164, 158, 159, 160, 103, 104, 101, 102, 138, 139,
	173, 174, 175, 153, 98, 0, 0, 156, 141, 60,
	0, 65, 74, 69, 63, 73, 168, 155, 129, 170,
	107, 121, 178, 122, 123, 149, 94, 137, 67, 119,
	0, 110, 89, 116, 90, 108, 131, 62, 134, 106,
	157, 140, 176, 75, 144, 0, 71, 66, 0, 0,
	133, 162, 135, 154, 128, 150, 100, 143, 171, 120,
	147, 481, 0, 0, 58, 0, 0, 0, 0, 0,
	0, 0, 0, 146, 167, 118, 148, 88, 145, 0,
	92, 95, 177, 165, 113, 114, 0, 0, 0, 0,
	0, 0, 0, 132, 136, 151, 126, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 142, 0, 0,
	0, 97, 93, 130, 0, 0, 0, 99, 0, 112,
	152, 0, 163, 127, 179, 166, 125, 124, 169, 172,
	0, 161, 109, 117, 61, 115, 70, 68, 72, 0,
	0, 0, 0, 0, 64, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 91, 0, 0, 0, 0, 105, 164, 158,
	159, 160, 103, 104, 101, 102, 138, 139, 173, 174,
	175, 153, 98, 0, 0, 156, 141, 60, 0, 65,
	74, 69, 63, 73, 168, 155, 129, 170, 107, 121,
	178, 122, 123, 149, 94, 137, 67, 119, 0, 110,
	89, 116, 90, 108, 131, 62, 134, 106, 157, 140,
	176, 75, 144, 0, 71, 66, 0, 0, 133, 162,
	135, 154, 128, 150, 100, 143, 171, 120, 147, 0,
	0, 0, 58, 0, 0, 0, 0, 0, 0, 0,
	0, 146, 167, 118, 148, 88, 145, 0, 92, 95,
	177, 165, 113, 114, 0, 0, 0, 0, 0, 0,
	0, 132, 136, 151, 126, 0, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 142, 0, 0, 0, 97,
	93, 130, 0, 0, 0, 99, 0, 112, 152, 0,
	163, 127, 179, 166, 125, 124, 169, 172, 0, 161,
	109, 117, 61, 115, 70, 68, 72, 0, 0, 0,
	0, 0, 64, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	91, 0, 0, 0, 0, 105, 164, 158, 159, 160,
	103, 104, 101, 102, 138, 139, 173, 174, 175, 153,
	98, 0, 0, 156, 141, 60, 0, 65, 74, 69,
	63, 73, 168, 155, 129, 170, 107, 121, 178, 122,
	123, 149, 94, 137, 67, 119, 0, 110, 89, 116,
	90, 108, 131, 62, 134, 106, 157, 140, 176, 75,
	144, 0, 71, 66, 0, 0, 133, 162, 135, 154,
	128, 150, 100, 143, 171, 120, 147, 0, 0, 0,
	221, 0, 0, 0, 0, 0, 0, 0, 0, 146,
	167, 118, 148, 88, 145, 0, 92, 95, 177, 165,
	113, 114, 0, 0, 0, 0, 0, 0, 0, 132,
	136, 151, 126, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 142, 0, 0, 0, 97, 93, 130,
	0, 0, 0, 99, 0, 112, 152, 0, 163, 127,
	179, 166, 125, 124, 169, 172, 0, 161, 109, 117,
	61, 115, 70, 68, 72, 0, 0, 0, 0, 0,
	64, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 0,
	0, 0, 0, 105, 164, 158, 159, 160, 103, 104,
	101, 102, 138, 139, 173, 174, 175, 153, 98, 0,
	0, 156, 141, 60, 0, 65, 74, 69, 63, 73,
	168, 155, 129, 170, 107, 121, 178, 122, 123, 149,
	94, 137, 67, 119, 0, 110, 89, 116, 90, 108,
	131, 62, 134, 106, 157, 140, 176, 75, 144, 0,
	71, 66, 0, 0, 133, 162, 135, 154, 128, 150,
	100, 143, 171, 120, 147, 0, 0, 0, 181, 0,
	0, 0, 0, 0, 0, 0, 0, 146, 167, 118,
	148, 88, 145, 0, 92, 95, 177, 165, 113, 114,
	0, 0, 0, 0, 0, 0, 0, 132, 136, 151,
	126, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 142, 0, 0, 0, 97, 93, 130, 0, 0,
	0, 99, 0, 112, 152, 0, 163, 127, 179, 166,
	125, 124, 169, 172, 0, 161, 109, 117, 61, 115,
	70, 68, 72, 0, 0, 0, 0, 0, 64, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 91, 0, 0, 0,
	0, 105, 164, 158, 159, 160, 103, 104, 101, 102,
	138, 139, 173, 174, 175, 153, 98, 0, 0, 156,
	141, 60, 0, 65, 74, 69, 63, 73, 168, 155,
	129, 170, 107, 121, 178, 122, 123, 149, 94, 137,
	67, 119, 0, 110, 89, 116, 90, 108, 131, 62,
	134, 106, 157, 140, 176, 75, 144, 0, 71, 66,
	0, 0, 133, 162, 135, 154, 128, 150, 100, 143,
	171, 120, 147, 0, 0, 0, 85, 0, 0, 0,
	0, 0, 0, 0, 0, 146, 167, 118, 148, 88,
	145, 0, 92, 95, 177, 165, 113, 114, 0, 0,
	0, 0, 0, 0, 0, 132, 136, 151, 126, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 142,
	0, 0, 0, 97, 93, 130, 0, 0, 0, 99,
	0, 112, 152, 0, 163, 127, 179, 166, 125, 124,
	169, 172, 0, 161, 109, 117, 61, 115, 70, 68,
	72, 0, 0, 0, 0, 0, 64, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 91, 0, 0, 0, 0, 105,
	164, 158, 159, 160, 103, 104, 101, 102, 138, 139,
	173, 174, 175, 153, 98, 0, 0, 156, 141, 60,
	0, 65, 74, 69, 63, 73, 67, 0, 0, 0,
	0, 247, 0, 0, 0, 62, 0, 0, 0, 0,
	282, 75, 0, 0, 71, 66, 0, 0, 0, 0,
	275, 276, 0, 0, 0, 0, 0, 0, 0, 39,
	0, 0, 221, 265, 264, 266, 267, 268, 269, 0,
	0, 270, 262, 263, 0, 0, 244, 256, 0, 281,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 253,
	254, 543, 0, 0, 0, 293, 0, 255, 0, 0,
	252, 257, 0, 0, 0, 0, 675, 0, 0, 0,
	0, 0, 179, 0, 0, 291, 0, 0, 0, 0,
	0, 0, 61, 0, 70, 68, 72, 0, 686, 0,
	0, 0, 64, 691, 692, 693, 694, 695, 696, 697,
	0, 698, 699, 700, 701, 702, 687, 688, 689, 690,
	673, 674, 0, 0, 676, 0, 677, 678, 679, 680,
	681, 682, 683, 684, 685, 0, 0, 0, 0, 0,
	283, 292, 289, 290, 287, 288, 286, 285, 284, 294,
	277, 278, 280, 0, 279, 60, 0, 65, 74, 69,
	63, 73, 67, 0, 0, 0, 0, 247, 0, 0,
	0, 62, 0, 0, 0, 0, 282, 75, 0, 0,
	71, 66, 0, 0, 0, 0, 275, 276, 0, 0,
	0, 0, 0, 0, 0, 39, 0, 238, 221, 265,
	264, 266, 267, 268, 269, 0, 0, 270, 262, 263,
	0, 0, 244, 256, 0, 281, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 253, 254, 0, 0, 0,
	0, 293, 0, 255, 0, 0, 252, 257, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 179, 0,
	0, 291, 0, 0, 0, 0, 0, 0, 61, 0,
	70, 68, 72, 0, 0, 0, 0, 0, 64, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 67, 0, 0, 0,
	0, 0, 0, 0, 306, 62, 0, 0, 0, 0,
	0, 75, 0, 0, 71, 66, 283, 292, 289, 290,
	287, 288, 286, 285, 284, 294, 277, 278, 280, 18,
	279, 60, 181, 65, 74, 69, 63, 73, 0, 0,
	67, 0, 0, 0, 0, 247, 0, 0, 0, 62,
	0, 0, 0, 0, 282, 75, 0, 0, 71, 66,
	0, 0, 0, 0, 275, 276, 0, 0, 0, 0,
	0, 0, 0, 39, 0, 0, 221, 265, 264, 266,
	267, 268, 269, 0, 0, 270, 262, 263, 0, 0,
	244, 256, 179, 281, 0, 0, 0, 0, 0, 0,
	0, 0, 61, 0, 70, 68, 72, 0, 0, 0,
	0, 0, 64, 253, 254, 0, 0, 0, 0, 293,
	0, 255, 0, 0, 252, 257, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 179, 0, 0, 291,
	0, 0, 0, 0, 0, 0, 61, 0, 70, 68,
	72, 0, 0, 0, 0, 0, 64, 0, 0, 0,
	0, 0, 0, 0, 0, 60, 0, 65, 74, 69,
	63, 73, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 283, 292, 289, 290, 287, 288,
	286, 285, 284, 294, 277, 278, 280, 0, 279, 60,
	0, 65, 74, 69, 63, 73, 67, 0, 0, 0,
	0, 247, 0, 0, 0, 62, 0, 0, 0, 0,
	282, 75, 0, 0, 71, 66, 0, 0, 0, 0,
	275, 276, 0, 0, 0, 0, 0, 0, 0, 39,
	0, 0, 221, 265, 264, 266, 267, 268, 269, 0,
	0, 270, 262, 263, 0, 0, 244, 256, 0, 281,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 253,
	254, 0, 0, 0, 0, 293, 0, 255, 0, 0,
	252, 257, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 179, 0, 0, 291, 0, 0, 0, 0,
	18, 0, 61, 0, 70, 68, 72, 0, 0, 0,
	0, 67, 64, 0, 0, 0, 0, 0, 0, 0,
	62, 0, 0, 0, 0, 0, 75, 0, 0, 71,
	66, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 39, 0, 0, 181, 0, 0,
	283, 292, 289, 290, 287, 288, 286, 285, 284, 294,
	277, 278, 280, 67, 279, 60, 0, 65, 74, 69,
	63, 73, 62, 0, 0, 0, 0, 282, 75, 0,
	0, 71, 66, 0, 0, 0, 0, 275, 276, 0,
	0, 0, 0, 0, 0, 0, 39, 0, 0, 221,
	265, 264, 266, 267, 268, 269, 0, 179, 270, 262,
	263, 0, 0, 0, 256, 0, 281, 61, 0, 70,
	68, 72, 0, 0, 0, 0, 0, 64, 0, 0,
	0, 0, 0, 0, 0, 0, 253, 254, 0, 0,
	0, 0, 293, 0, 255, 0, 0, 252, 257, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 179,
	0, 0, 291, 0, 0, 0, 0, 0, 0, 61,
	0, 70, 68, 72, 0, 0, 0, 0, 0, 64,
	60, 0, 65, 74, 69, 63, 73, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 292, 289,
	290, 287, 288, 286, 285, 284, 294, 277, 278, 280,
	67, 279, 60, 0, 65, 74, 69, 63, 73, 62,
	0, 0, 0, 0, 282, 75, 0, 0, 71, 66,
	0, 0, 0, 0, 275, 276, 0, 0, 0, 0,
	0, 0, 0, 39, 0, 0, 221, 265, 264, 266,
	267, 268, 269, 0, 0, 270, 0, 0, 0, 0,
	0, 256, 0, 281, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 253, 254, 0, 0, 0, 0, 293,
	0, 255, 67, 0, 252, 257, 624, 0, 0, 0,
	0, 62, 0, 0, 0, 0, 179, 75, 0, 291,
	71, 66, 0, 0, 0, 0, 61, 0, 70, 68,
	72, 0, 0, 0, 0, 0, 64, 0, 58, 0,
	626, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	358, 357, 0, 0, 67, 0, 0, 0, 0, 0,
	0, 0, 0, 62, 0, 0, 0, 359, 0, 75,
	0, 0, 71, 66, 283, 292, 289, 290, 287, 288,
	286, 285, 284, 294, 277, 278, 280, 0, 279, 60,
	58, 65, 74, 69, 63, 73, 0, 0, 179, 0,
	0, 0, 55, 0, 67, 0, 0, 0, 61, 0,
	70, 68, 72, 62, 0, 0, 0, 0, 64, 75,
	0, 0, 71, 66, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	58, 0, 0, 435, 0, 0, 436, 0, 52, 0,
	54, 0, 0, 0, 56, 0, 0, 0, 0, 0,
	61, 0, 70, 68, 72, 0, 0, 0, 0, 0,
	64, 60, 0, 65, 74, 69, 63, 73, 0, 0,
	0, 0, 0, 0, 0, 0, 67, 0, 0, 0,
	327, 0, 0, 0, 0, 62, 0, 0, 0, 0,
	179, 75, 0, 0, 71, 66, 0, 0, 0, 0,
	61, 0, 70, 68, 72, 0, 0, 0, 0, 0,
	64, 67, 181, 60, 329, 65, 74, 69, 63, 73,
	62, 0, 67, 0, 0, 0, 75, 0, 0, 71,
	66, 62, 0, 0, 0, 0, 0, 75, 0, 0,
	71, 66, 0, 0, 39, 0, 0, 181, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 58, 0,
	626, 67, 0, 60, 0, 65, 74, 69, 63, 73,
	62, 0, 179, 0, 0, 0, 75, 0, 0, 71,
	66, 0, 61, 0, 70, 68, 72, 0, 0, 0,
	0, 0, 64, 67, 0, 0, 0, 181, 0, 329,
	0, 0, 62, 0, 0, 0, 0, 179, 75, 0,
	0, 71, 66, 0, 0, 0, 0, 61, 179, 70,
	68, 72, 0, 0, 0, 0, 0, 64, 61, 58,
	70, 68, 72, 0, 0, 0, 213, 0, 64, 0,
	0, 0, 0, 67, 0, 60, 0, 65, 74, 69,
	63, 73, 62, 0, 0, 0, 0, 179, 75, 0,
	0, 71, 66, 0, 0, 0, 0, 61, 0, 70,
	68, 72, 0, 0, 0, 0, 0, 64, 0, 181,
	60, 0, 65, 74, 69, 63, 73, 0, 0, 179,
	0, 60, 0, 65, 74, 69, 63, 73, 0, 61,
	0, 70, 68, 72, 0, 0, 0, 0, 0, 64,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	60, 0, 65, 74, 69, 63, 73, 0, 0, 179,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 61,
	0, 70, 68, 72, 67, 0, 0, 0, 0, 64,
	0, 0, 60, 62, 65, 74, 69, 63, 73, 75,
	67, 0, 71, 66, 0, 0, 0, 0, 0, 62,
	0, 0, 0, 0, 0, 75, 0, 0, 71, 66,
	221, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 181, 0, 0, 0,
	0, 365, 60, 368, 65, 74, 69, 63, 73, 382,
	383, 384, 385, 386, 387, 388, 0, 366, 367, 364,
	370, 369, 379, 380, 372, 373, 374, 375, 376, 377,
	378, 371, 0, 0, 381, 0, 0, 0, 0, 0,
	179, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	61, 0, 70, 68, 72, 0, 179, 0, 0, 0,
	64, 0, 0, 0, 0, 0, 61, 0, 70, 68,
	72, 0, 0, 0, 0, 0, 64, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 60, 0, 65, 74, 69, 63, 73,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 60,
	0, 65, 74, 69, 63, 73,
}
var yyPact = [...]int{

	849, -1000, -145, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 587, 626, -1000, -1000,
	-1000, -1000, -1000, 4357, -17, 32, 12, 31, 3183, 4783,
	-1000, -1000, -1000, -1000, -1000, -1000, 443, -1000, -1000, -1000,
	-1000, -1000, 580, 585, 453, 571, 500, -1000, -24, 4524,
	4656, 4767, -28, 28, 4783, -113, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 22, 4783, -1000, 4783,
	-29, 261, -29, 4783, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 287,
	559, 3889, 3889, 587, -1000, 443, -1000, -1000, -1000, 522,
	-1000, -1000, 180, 3669, 413, 575, -1000, -1000, -1000, 560,
	4004, 4489, 68, 4783, 80, -1000, 308, -1000, 126, -1000,
	55, -1000, -1000, 4783, 161, 256, 2055, 7, 4783, 2055,
	-14, 4783, 562, 448, 4783, -1000, -1000, -1000, -1000, -1000,
	622, 65, 478, -1000, 3889, 4774, -1000, 415, -1000, 40,
	-1000, -1000, 4223, 4223, 4223, 4223, 4223, 4223, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 415, 54, -1000, 3713, 415, 415, 415, 415, 415,
	415, 3889, 415, 415, 415, 415, 415, 415, 415, 415,
	415, 415, 415, 415, 415, 381, -1000, 210, 580, 287,
	500, 4407, 434, -1000, -1000, 412, 4783, -1000, 4767, 4524,
	4524, 4524, 4524, -1000, 485, 484, -1000, 481, 462, 493,
	4783, -1000, 353, 287, 4004, 47, -1000, 4574, -1000, -1000,
	2995, 601, 4524, 4783, -1000, -1000, 4767, 3889, 2807, 2431,
	558, -33, -1000, -1000, -1000, -1000, -1000, 4783, 108, -1000,
	4783, -1000, -1000, 4783, 2055, -1000, 505, 3889, 3889, 241,
	3889, 3889, 118, 4056, 224, 188, 4223, 4223, 4223, 4223,
	4223, 4223, 4223, 4223, 4223, 4223, 4223, 4223, 4223, 4223,
	4223, 244, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	443, 366, 366, 75, 75, 75, 75, 75, 1164, 1281,
	2807, 351, 143, 3713, 3359, 3359, 3889, 3889, 3359, 565,
	142, 143, 4606, -1000, 287, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 3359, 3359, 3359, 3359, 3889, -1000, -1000, -1000,
	559, -1000, 565, 616, -1000, 516, 510, 3359, -1000, 445,
	4767, 415, -1000, 915, -1000, 425, 575, 440, 523, -1000,
	-1000, -1000, -1000, 483, -1000, 461, -1000, -1000, -1000, -1000,
	-1000, 287, -1000, 26, 20, 14, -1000, -1000, -1000, -1000,
	587, 3889, 422, -1000, -1000, 143, -1000, 50, -1000, -1000,
	-1000, 253, -1000, 439, 4606, 2055, -1000, 107, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 503, 118,
	160, -1000, -1000, 231, -1000, -1000, 143, 143, -1000, 1728,
	-1000, -1000, -1000, -1000, 224, 4223, 4223, 4223, 94, 1728,
	1554, 834, 1066, 75, 158, 158, 102, 102, 102, 102,
	102, 73, 73, -1000, -1000, -1000, -1000, -1000, -1000, 287,
	3359, 380, -1000, -1000, 4305, 49, 415, 3889, -1000, 278,
	278, 141, 216, 278, 3359, 165, -1000, 3889, 287, -1000,
	278, 287, 278, 278, -1000, -1000, 4783, -1000, -1000, -1000,
	-1000, 405, -1000, 553, 378, 325, -1000, -1000, 3535, 287,
	344, 48, 587, 3889, 3889, -1000, -1000, -1000, 415, 415,
	415, 580, 143, -1000, 2619, 293, -1000, 3365, 4783, -1000,
	-1000, -1000, 4783, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 94, 1728, 421, -1000, 4223, 4223, -1000,
	278, 3359, -1000, -1000, 4535, -1000, -1000, 2243, 3359, 143,
	-1000, -1000, -4, 244, -4, -123, 402, 129, -1000, 3889,
	214, -1000, -1000, -1000, -1000, -1000, -1000, 601, 4524, 551,
	-1000, 415, -1000, -1000, 441, 4606, 4606, 580, 143, 143,
	4606, 4606, 4606, -1000, -1000, 1679, 103, 177, -93, -1000,
	-1000, 398, -1000, 398, 398, 398, 398, -69, -69, -69,
	-69, -1000, -1000, -1000, -1000, -1000, -1000, 398, 398, 398,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 418, 418,
	418, 416, 416, 2055, -1000, -1000, -1000, 4223, 1728, 1728,
	-1000, -1000, -1000, -1000, 46, 287, 287, 398, 398, -1000,
	398, 416, -1000, 398, -50, 398, -52, 287, 287, 415,
	-118, -1000, 143, 3889, 599, 355, 619, -1000, 415, -1000,
	443, 44, -1000, -1000, 268, -1000, 268, 268, 346, 1491,
	-1000, -1000, -1000, -1000, -1000, -1000, 411, 549, 548, 248,
	524, -1000, 169, -97, -1000, -1000, 221, -69, -69, -1000,
	-1000, 74, 519, 74, 74, 74, -1000, -1000, -1000, -1000,
	213, -1000, -1000, -1000, 205, -1000, -1000, 1728, 1867, -1000,
	-1000, -1000, 24, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 4223, 287, 215, 143, 597, 583, 4767, 325, 287,
	4606, -1000, 4606, -1000, -1000, 1679, -1000, 1679, 4606, -1000,
	234, -1000, -85, 280, -1000, -1000, -1000, 297, 74, 74,
	-1000, 230, 144, -1000, -1000, -1000, 319, 265, -1000, -1000,
	-1000, 21, -1000, -1000, -1000, 3889, 3889, 308, -1000, -1000,
	-1000, 1491, -1000, 239, -1000, 398, -1000, 59, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 204,
	-1000, 191, 287, 18, -132, 143, 281, -1000, 4606, -1000,
	-1000, 543, -1000, 532, 275, 272, -1000, 495, -128, -137,
	-1000, -1000, -1000, -1000, -1000, -1000, 494, -1000, -130, -133,
	-138, -1000,
}
var yyPgo = [...]int{

	0, 810, 92, 504, 809, 808, 806, 805, 803, 801,
	800, 799, 798, 797, 796, 795, 794, 793, 52, 792,
	787, 786, 41, 785, 46, 781, 778, 33, 148, 22,
	26, 3, 777, 39, 82, 47, 775, 773, 770, 49,
	769, 835, 767, 766, 765, 15, 17, 764, 44, 762,
	761, 42, 10, 758, 757, 756, 754, 753, 748, 31,
	4, 5, 35, 20, 746, 127, 9, 745, 36, 743,
	742, 741, 740, 62, 739, 40, 738, 27, 38, 736,
	34, 14, 56, 735, 470, 179, 733, 731, 719, 716,
	714, 713, 70, 0, 13, 18, 25, 712, 671, 32,
	45, 711, 710, 69, 16, 21, 23, 709, 708, 707,
	706, 705, 702, 700, 6, 697, 11, 8, 693, 668,
	28, 12, 667, 659, 654, 19, 653, 652, 644, 640,
	7, 2, 639, 1, 637, 636, 635, 839, 43, 633,
	632, 193,
}
var yyR1 = [...]int{

	0, 135, 136, 136, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	3, 4, 4, 5, 5, 6, 6, 21, 21, 7,
	8, 8, 139, 139, 37, 37, 9, 108, 108, 108,
	111, 111, 109, 109, 109, 109, 109, 109, 109, 110,
	110, 110, 110, 110, 112, 112, 112, 112, 112, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 114, 114, 120, 120, 121, 121, 121, 118,
	118, 119, 119, 122, 122, 122, 115, 115, 115, 115,
	115, 123, 123, 116, 116, 116, 117, 117, 124, 124,
	124, 124, 124, 125, 126, 132, 132, 132, 134, 134,
	133, 127, 128, 128, 128, 129, 129, 129, 130, 130,
	130, 131, 131, 131, 10, 10, 10, 10, 10, 11,
	11, 11, 11, 12, 13, 13, 13, 14, 107, 107,
	107, 15, 16, 17, 17, 17, 17, 17, 17, 140,
	18, 19, 19, 20, 20, 20, 24, 24, 24, 22,
	22, 23, 23, 29, 29, 28, 28, 30, 30, 30,
	30, 97, 97, 97, 96, 96, 32, 32, 33, 33,
	34, 34, 35, 35, 35, 43, 36, 36, 36, 36,
	102, 102, 101, 101, 101, 100, 100, 38, 38, 38,
	38, 39, 39, 39, 39, 40, 40, 42, 42, 41,
	41, 44, 44, 44, 44, 45, 45, 46, 46, 31,
	31, 31, 31, 31, 31, 48, 48, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 58,
	58, 58, 58, 58, 58, 49, 49, 49, 49, 49,
	49, 49, 27, 27, 59, 59, 59, 65, 60, 60,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 56,
	56, 56, 54, 54, 54, 54, 54, 54, 54, 54,
	54, 55, 55, 55, 55, 55, 55, 55, 55, 141,
	141, 57, 57, 57, 57, 25, 25, 25, 25, 25,
	105, 105, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 69, 69, 26, 26, 67,
	67, 68, 70, 70, 66, 66, 66, 51, 51, 51,
	51, 51, 51, 51, 53, 53, 53, 71, 71, 72,
	72, 73, 73, 74, 74, 75, 76, 76, 76, 77,
	77, 77, 77, 78, 78, 78, 50, 50, 50, 50,
	50, 50, 79, 79, 79, 79, 80, 80, 61, 61,
	63, 63, 62, 64, 81, 81, 82, 83, 83, 85,
	85, 86, 86, 84, 84, 87, 87, 87, 87, 87,
	87, 87, 88, 88, 88, 89, 89, 90, 90, 90,
	91, 91, 94, 94, 95, 95, 98, 98, 99, 99,
	92, 92, 92, 92, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 92, 92, 92, 92, 92,
	92, 93, 93, 93, 93, 93, 93, 93, 93, 93,
	93, 93, 93, 93, 93, 93, 93, 93, 137, 138,
	103, 104, 104, 104,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 6, 7,
	10, 1, 3, 1, 3, 6, 7, 1, 1, 8,
	7, 6, 1, 1, 1, 3, 3, 3, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 2, 2, 2, 1, 4,
	4, 2, 2, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 0, 3, 0, 5, 0, 3, 5, 0,
	1, 0, 1, 0, 1, 2, 0, 2, 2, 2,
	2, 0, 1, 0, 3, 3, 0, 2, 0, 2,
	1, 2, 1, 6, 4, 2, 3, 2, 1, 3,
	2, 4, 1, 3, 3, 0, 1, 3, 1, 2,
	3, 1, 1, 1, 5, 5, 8, 4, 6, 6,
	7, 7, 4, 5, 4, 5, 5, 3, 1, 1,
	1, 3, 2, 2, 2, 2, 2, 2, 2, 0,
	2, 0, 2, 1, 2, 2, 0, 1, 1, 0,
	1, 0, 1, 0, 1, 1, 3, 1, 2, 3,
	5, 0, 1, 2, 1, 1, 0, 2, 1, 3,
	1, 1, 1, 3, 3, 3, 3, 5, 5, 3,
	0, 1, 0, 1, 2, 1, 1, 1, 2, 2,
	1, 2, 3, 2, 3, 2, 2, 2, 1, 1,
	3, 0, 5, 5, 5, 1, 3, 0, 2, 1,
	3, 3, 2, 3, 1, 1, 1, 1, 3, 3,
	3, 4, 4, 5, 3, 4, 5, 6, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 0, 2, 1, 1, 1, 3, 1, 3,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 2, 2, 2, 3, 1, 1, 1, 1, 4,
	5, 6, 4, 4, 6, 6, 6, 9, 7, 5,
	4, 2, 2, 2, 2, 2, 2, 2, 2, 0,
	2, 4, 4, 4, 4, 0, 3, 4, 7, 3,
	1, 1, 2, 3, 3, 1, 2, 2, 1, 2,
	1, 2, 2, 1, 2, 0, 1, 0, 2, 1,
	2, 4, 0, 2, 1, 3, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 0, 3, 0,
	2, 0, 3, 1, 3, 2, 0, 1, 1, 0,
	2, 4, 4, 0, 2, 4, 2, 1, 3, 5,
	4, 6, 1, 3, 3, 5, 0, 5, 1, 3,
	1, 2, 3, 1, 1, 3, 3, 1, 1, 0,
	2, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 0, 1, 1,
	0, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -135, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -16, -17, -3, -4, 6, -21,
	8, 9, 29, 106, 107, 109, 108, 110, 120, 47,
	24, 121, 122, 125, 126, 127, -137, 7, 180, 50,
	-136, 193, -73, 14, -20, 5, -18, -140, -18, -18,
	-18, -18, 111, -90, 113, 65, 117, -94, 53, -93,
	186, 123, 26, 191, 133, 188, 36, 17, 126, 190,
	125, 35, 127, 192, 189, 32, -84, 113, 115, 111,
	111, 112, 113, 111, -107, 53, -92, -93, 66, 21,
	23, 161, 69, 101, 15, 70, 148, 100, 181, 106,
	45, 173, 174, 171, 172, 166, 28, 9, 24, 121,
	20, 94, 108, 73, 74, 124, 22, 122, 64, 18,
	48, 10, 12, 13, 116, 115, 85, 112, 43, 7,
	102, 25, 82, 39, 27, 41, 83, 16, 175, 176,
	30, 185, 96, 46, 33, 67, 62, 49, 65, 14,
	44, 84, 109, 180, 42, 6, 184, 29, 168, 169,
	170, 120, 40, 111, 167, 72, 114, 63, 5, 117,
	8, 47, 118, 177, 178, 179, 31, 71, 11, 113,
	-98, 53, -93, -103, -103, -103, -103, -103, -103, -2,
	-77, 16, 15, -5, -3, -137, 6, 19, 20, -24,
	37, 38, -19, -84, -33, -34, -35, -36, -43, -65,
	-137, -41, -98, 10, -37, -41, -81, -82, -66, -94,
	-98, 53, -93, -86, 116, 112, -41, 180, 111, -41,
	-41, -85, 116, 53, -85, -41, -103, -138, 52, -78,
	18, 30, -31, -47, 67, -52, -48, 22, -51, -66,
	-64, -65, 101, 90, 91, 98, 68, 102, -56, -54,
	-55, -57, 63, 64, 55, 54, 56, 57, 58, 59,
	62, -94, -98, -62, -137, 41, 42, 181, 182, 185,
	183, 70, 31, 171, 179, 178, 177, 175, 176, 173,
	174, 116, 172, 96, 180, -74, -75, -31, -73, -2,
	-18, 33, -22, 20, 61, -42, 25, -41, 29, 51,
	-38, -39, -40, 39, 43, 45, 40, 41, 42, 46,
	-102, 21, -33, -2, -137, -101, -100, 21, -98, 55,
	103, -41, -139, 51, 10, 118, 51, 75, 103, -41,
	67, 53, -104, -137, -95, -94, -92, 113, -41, -104,
	114, -41, 22, 49, -41, 8, 85, 66, 65, 82,
	51, 17, -31, -49, 85, 67, 83, 84, 69, 87,
	86, 97, 90, 91, 92, 93, 94, 95, 96, 88,
	89, 100, 75, 76, 77, 78, 79, 80, 81, -65,
	-137, 104, 105, -52, -52, -52, -52, -52, -52, -137,
	103, -60, -31, -137, -137, -137, -137, -137, -137, -137,
	-69, -31, -137, -141, -137, -141, -141, -141, -141, -141,
	-141, -141, -137, -137, -137, -137, 51, -76, 23, 24,
	-77, -138, -24, -53, -94, 56, 59, -23, 40, -50,
	29, 31, -2, -137, -41, -81, -34, -35, -34, -35,
	39, 39, 39, 44, 39, 44, 39, -39, -98, -138,
	-138, -2, -44, 47, 115, 48, -100, -99, -98, -92,
	-46, 11, -33, -41, -82, -31, -95, -99, -92, -127,
	-104, 50, 22, -91, 118, -41, -87, 109, 107, 28,
	108, 14, 181, 192, 53, -41, -41, -104, 35, -31,
	-31, -58, 62, 67, 63, 64, -31, -31, -48, -52,
	-59, -62, -65, 60, 85, 83, 84, 69, -52, -52,
	-52, -52, -52, -52, -52, -52, -52, -52, -52, -52,
	-52, -52, -52, -105, 53, 55, -51, -51, -94, -29,
	20, -28, -30, 92, -31, -98, -95, 51, -138, -28,
	-28, -31, -31, -28, -22, -67, -68, 71, -94, -138,
	-28, -29, -28, -28, -75, -78, -83, 18, 10, 31,
	31, -28, -80, 49, -81, -61, -63, -62, -137, -2,
	-79, -94, -46, 49, 49, 39, 39, -138, 112, 112,
	112, -73, -31, -46, 103, -128, -125, 53, 49, -94,
	-104, -103, -88, -89, 114, 21, 112, 27, 36, 62,
	63, 64, -59, -52, -52, -52, -27, 124, 66, -138,
	-28, 51, -97, -96, 21, -94, 55, 103, -137, -31,
	-138, -138, 51, 118, 21, -138, -28, -70, -68, 73,
	-31, -138, -138, -138, -138, -138, -41, -32, 10, 26,
	-80, 51, -138, -138, -138, 51, 103, -73, -31, -31,
	-137, -137, -137, -77, -95, 52, 51, -108, -111, -113,
	-112, -109, -110, 145, 146, 101, 149, 151, 152, 153,
	154, 155, 156, 157, 158, 159, 123, 141, 142, 143,
	144, 128, 129, 130, 131, 132, 133, 134, 136, 137,
	138, 139, 140, -41, -41, -103, -27, 66, -52, -52,
	-138, -30, -96, 92, -99, -29, -106, 101, 145, 123,
	143, 139, 159, 150, 163, 141, 164, -105, -106, 186,
	-73, 74, -31, 72, -46, -33, 27, -63, 31, -2,
	-137, -94, -94, -77, -45, -94, -45, -45, -129, -130,
	-131, -95, 55, 56, -125, -126, -132, 119, 117, 27,
	-122, 62, 67, -118, 164, -114, 50, -114, -114, -114,
	-114, -116, 148, -116, -116, -116, -114, -114, -114, -120,
	50, -120, -120, -121, 50, -121, -104, -52, 103, -138,
	-138, -114, -114, -114, -121, -114, 133, -114, 133, -138,
	-138, -137, -26, 184, -31, -71, 12, 8, -61, -2,
	103, -138, 51, -138, -138, 51, -131, 75, 50, 27,
	27, 53, -115, 28, 62, -119, 165, 56, -116, -116,
	-117, 100, 29, -117, -117, -117, 56, 56, 92, -116,
	53, -52, -138, 55, -72, 13, 15, -81, -138, -94,
	-94, -130, -131, -134, -133, -94, 53, -123, 161, 55,
	56, 57, 62, 52, -117, -117, 53, 53, 101, 51,
	52, 51, -25, 85, 189, -31, -60, 52, 51, -114,
	-124, 119, 27, 117, 56, 56, -138, 187, 46, 190,
	-133, 27, 27, 52, 52, 36, 188, 191, 36, 189,
	190, 191,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 361, 0, 149, 149,
	149, 149, 149, 417, 403, 0, 0, 0, 0, 0,
	540, 540, 540, 540, 540, 540, 0, 27, 28, 538,
	1, 3, 369, 0, 0, 153, 156, 151, 403, 0,
	0, 0, 401, 0, 535, 0, 418, 419, 422, 423,
	521, 522, 523, 524, 525, 526, 527, 528, 529, 530,
	531, 532, 533, 534, 536, 537, 0, 0, 404, 0,
	399, 0, 399, 0, 540, 138, 139, 140, 430, 431,
	432, 433, 434, 435, 436, 437, 438, 439, 440, 441,
	442, 443, 444, 445, 446, 447, 448, 449, 450, 451,
	452, 453, 454, 455, 456, 457, 458, 459, 460, 461,
	462, 463, 464, 465, 466, 467, 468, 469, 470, 471,
	472, 473, 474, 475, 476, 477, 478, 479, 480, 481,
	482, 483, 484, 485, 486, 487, 488, 489, 490, 491,
	492, 493, 494, 495, 496, 497, 498, 499, 500, 501,
	502, 503, 504, 505, 506, 507, 508, 509, 510, 511,
	512, 513, 514, 515, 516, 517, 518, 519, 520, 535,
	142, 426, 427, 143, 144, 145, 146, 147, 148, 21,
	373, 0, 0, 361, 23, 0, 149, 154, 155, 159,
	157, 158, 150, 0, 0, 178, 180, 181, 182, 190,
	0, 192, 209, 0, 0, 34, 36, 394, 0, 344,
	0, -2, -2, 0, 0, 0, 541, 0, 0, 541,
	0, 0, 0, 0, 0, 137, 141, 22, 539, 17,
	0, 0, 370, 219, 0, 224, 227, 0, 260, 261,
	262, 263, 0, 0, 0, 0, 0, 0, 285, 286,
	287, 288, 225, 226, 347, 348, 349, 350, 351, 352,
	353, 344, 0, 393, 0, 0, 0, 0, 0, 0,
	0, 335, 0, 309, 309, 309, 309, 309, 309, 309,
	309, 0, 0, 0, 0, 362, 363, 366, 369, 21,
	156, 0, 161, 160, 152, 0, 0, 208, 0, 0,
	0, 0, 0, 197, 0, 0, 200, 0, 0, 0,
	0, 191, 0, 21, 0, 211, 193, 0, 195, 196,
	0, 217, 0, 0, 32, 33, 0, 0, 0, 541,
	0, 420, 127, 542, 543, 424, 425, 0, 0, 132,
	0, 134, 400, 0, 541, 374, 0, 0, 0, 0,
	0, 0, 222, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 245, 246, 247, 248, 249, 250, 251, 238,
	0, 0, 0, 279, 280, 281, 282, 283, 0, 163,
	0, 0, 258, 0, 0, 0, 0, 0, 0, 159,
	0, 336, 0, 301, 0, 302, 303, 304, 305, 306,
	307, 308, 0, 163, 0, 0, 0, 365, 367, 368,
	373, 24, 159, 0, 354, 0, 0, 0, 162, 386,
	0, 0, -2, 0, 207, 217, 179, 186, 0, 189,
	198, 199, 201, 0, 203, 0, 205, 206, 183, 184,
	257, 21, 185, 0, 0, 0, 194, 210, 428, 429,
	361, 0, 217, 35, 395, 396, 345, 0, -2, 124,
	125, 538, 402, 0, 0, 541, 540, 412, 405, 406,
	407, 408, 409, 410, 411, 133, 135, 136, 0, 220,
	221, 223, 239, 0, 241, 243, 371, 372, 228, 229,
	230, 254, 255, 256, 0, 0, 0, 0, 252, 234,
	0, 264, 265, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 278, 320, 321, 276, 277, 284, 0,
	0, 164, 165, 167, 171, 0, 345, 0, 392, 0,
	0, 0, 0, 0, 0, 342, 339, 0, 0, 310,
	0, 0, 0, 0, 364, 18, 0, 397, 398, 355,
	356, 176, 25, 0, 386, 376, 388, 390, 0, 21,
	0, 382, 361, 0, 0, 202, 204, -2, 0, 0,
	0, 369, 218, 31, 0, 0, 112, 0, 0, 421,
	128, 129, 0, 540, 413, 414, 415, 416, 375, 240,
	242, 244, 231, 252, 235, 0, 232, 0, 0, 289,
	0, 0, 168, 172, 0, 174, 175, 0, 163, 259,
	292, 293, 0, 0, 0, 0, 361, 0, 340, 0,
	0, 300, 311, 312, 313, 314, 19, 217, 0, 0,
	26, 0, 391, -2, 0, 0, 0, 369, 187, 188,
	0, 0, 0, 30, 346, 115, 0, 83, 79, 38,
	39, 72, 41, 72, 72, 72, 72, 93, 93, 93,
	93, 67, 68, 69, 70, 71, 54, 72, 72, 72,
	58, 42, 43, 44, 45, 46, 47, 48, 74, 74,
	74, 76, 76, 541, 130, 131, 233, 0, 253, 236,
	290, 166, 173, 169, 0, 0, 0, 72, 72, 325,
	72, 76, 328, 72, 330, 72, 333, 0, 0, 0,
	337, 299, 343, 0, 357, 177, 0, 389, 0, -2,
	0, 384, 383, 29, 0, 215, 0, 0, 111, 116,
	118, 121, 122, 123, 113, 114, 0, 0, 0, 0,
	86, 84, 0, 81, 80, 40, 0, 93, 93, 61,
	62, 96, 0, 96, 96, 96, 55, 56, 57, 49,
	0, 50, 51, 52, 0, 53, 126, 237, 0, 291,
	294, 322, 93, 326, 327, 329, 331, 332, 334, 296,
	295, 0, 0, 0, 341, 359, 0, 0, 379, 21,
	0, 212, 0, 213, 214, 0, 119, 0, 0, 105,
	0, 107, 91, 0, 85, 37, 82, 0, 96, 96,
	63, 0, 0, 64, 65, 66, 0, 0, 170, 323,
	324, 315, 298, 338, 20, 0, 0, 387, -2, 385,
	216, 117, 120, 0, 108, 72, 106, 98, 92, 87,
	88, 89, 90, 73, 59, 60, 97, 94, 95, 0,
	77, 0, 0, 0, 0, 360, 358, 104, 0, 110,
	103, 0, 100, 102, 0, 0, 297, 0, 0, 0,
	109, 99, 101, 75, 78, 316, 0, 319, 317, 0,
	0, 318,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 68, 3, 3, 3, 95, 87, 3,
	50, 52, 92, 90, 51, 91, 103, 93, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 193,
	76, 75, 77, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 97, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 86, 3, 98,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 69, 70, 71, 72, 73, 74, 78,
	79, 80, 81, 82, 83, 84, 85, 88, 89, 94,
	96, 99, 100, 101, 102, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:249
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:254
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:255
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:259
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 17:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:277
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 18:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:285
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 19:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:289
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 20:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:296
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:302
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:306
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:312
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 24:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:316
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:323
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:334
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:346
		{
			yyVAL.str = InsertStr
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:350
		{
			yyVAL.str = ReplaceStr
		}
	case 29:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:356
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:362
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 31:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:366
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:371
		{
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:372
		{
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:376
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:380
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:386
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].updateExprs}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:392
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:402
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:407
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:413
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:417
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:421
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:425
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:429
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:433
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:437
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:443
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 50:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:449
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 51:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:455
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:461
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:467
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:475
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:479
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:483
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:487
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:491
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 59:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:497
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 60:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:501
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:505
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:509
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:513
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:517
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:521
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:525
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:529
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:533
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:537
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:541
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:545
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:550
		{
			yyVAL.optVal = nil
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:554
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:559
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 75:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:563
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 76:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:571
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:575
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 78:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:581
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 79:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:589
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:593
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 81:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:598
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:602
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 83:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:608
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:612
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:616
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 86:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:621
		{
			yyVAL.optVal = nil
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:625
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:629
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:633
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:637
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 91:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:642
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:646
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 93:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:651
		{
			yyVAL.str = ""
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:655
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:659
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 96:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:664
		{
			yyVAL.str = ""
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:668
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 98:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:673
		{
			yyVAL.colKeyOpt = ColKeyNone
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:677
		{
			yyVAL.colKeyOpt = ColKeyPrimary
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:681
		{
			yyVAL.colKeyOpt = ColKey
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:685
		{
			yyVAL.colKeyOpt = ColKeyUnique
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:689
		{
			yyVAL.colKeyOpt = ColKeyUnique
		}
	case 103:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:695
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[5].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[6].colKeyOpt
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 104:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:705
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].columns}
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:711
		{
			yyVAL.indexInfo = &IndexInfo{Primary: true, Name: NewColIdent("PRIMARY"), Unique: true}
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:715
		{
			yyVAL.indexInfo = &IndexInfo{Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:719
		{
			yyVAL.indexInfo = &IndexInfo{Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:725
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:729
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:735
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 111:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:741
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:748
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:753
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:757
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:762
		{
			yyVAL.str = ""
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:766
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:770
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:778
		{
			yyVAL.str = yyDollar[1].str
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:782
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:786
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:792
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:796
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:800
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 124:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:806
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName, TableSpec: yyDollar[5].TableSpec}
		}
	case 125:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:810
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
		}
	case 126:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:814
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 127:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:819
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 128:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:823
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 129:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:829
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 130:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:833
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 131:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:838
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 132:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:843
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 133:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:849
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 134:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:855
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 135:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:863
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 136:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:868
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:878
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:884
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:888
		{
			switch v := string(yyDollar[1].bytes); v {
			case ShowDatabasesStr, ShowTablesStr, ShowKeyspacesStr, ShowShardsStr, ShowVSchemaTablesStr:
				yyVAL.str = v
			default:
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:897
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:903
		{
			yyVAL.statement = &Show{Type: yyDollar[2].str}
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:909
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:915
		{
			yyVAL.statement = &OtherRead{}
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:919
		{
			yyVAL.statement = &OtherRead{}
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:923
		{
			yyVAL.statement = &OtherRead{}
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:927
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:931
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:935
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:940
		{
			setAllowComments(yylex, true)
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:944
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:950
		{
			yyVAL.bytes2 = nil
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:954
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:960
		{
			yyVAL.str = UnionStr
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:964
		{
			yyVAL.str = UnionAllStr
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:968
		{
			yyVAL.str = UnionDistinctStr
		}
	case 156:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:973
		{
			yyVAL.str = ""
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:977
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:981
		{
			yyVAL.str = SQLCacheStr
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:986
		{
			yyVAL.str = ""
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:990
		{
			yyVAL.str = DistinctStr
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:995
		{
			yyVAL.str = ""
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:999
		{
			yyVAL.str = StraightJoinHint
		}
	case 163:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1004
		{
			yyVAL.selectExprs = nil
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1008
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1014
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1018
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1024
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1028
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1032
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 170:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1036
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 171:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1041
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1045
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1049
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1056
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1061
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1065
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1071
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1075
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1085
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1089
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1093
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1099
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1112
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 187:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1116
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 188:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1120
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1124
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 190:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1129
		{
			yyVAL.empty = struct{}{}
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1131
		{
			yyVAL.empty = struct{}{}
		}
	case 192:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1134
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1138
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1142
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1149
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1155
		{
			yyVAL.str = JoinStr
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1159
		{
			yyVAL.str = JoinStr
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1163
		{
			yyVAL.str = JoinStr
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1167
		{
			yyVAL.str = StraightJoinStr
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1173
		{
			yyVAL.str = LeftJoinStr
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1177
		{
			yyVAL.str = LeftJoinStr
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1181
		{
			yyVAL.str = RightJoinStr
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1185
		{
			yyVAL.str = RightJoinStr
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1191
		{
			yyVAL.str = NaturalJoinStr
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1195
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1205
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1209
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1215
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1219
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 211:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1224
		{
			yyVAL.indexHints = nil
		}
	case 212:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1228
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 213:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1232
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 214:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1236
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1242
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1246
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 217:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1251
		{
			yyVAL.expr = nil
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1255
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1261
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1265
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1269
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1273
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1277
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1281
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1287
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1291
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1297
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1301
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].boolVal}
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1305
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1309
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 231:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1313
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1317
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 233:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1321
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1325
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1329
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 236:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1333
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 237:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1337
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1341
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1347
		{
			yyVAL.str = IsNullStr
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1351
		{
			yyVAL.str = IsNotNullStr
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1355
		{
			yyVAL.str = IsTrueStr
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1359
		{
			yyVAL.str = IsNotTrueStr
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1363
		{
			yyVAL.str = IsFalseStr
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1367
		{
			yyVAL.str = IsNotFalseStr
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1373
		{
			yyVAL.str = EqualStr
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1377
		{
			yyVAL.str = LessThanStr
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1381
		{
			yyVAL.str = GreaterThanStr
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1385
		{
			yyVAL.str = LessEqualStr
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1389
		{
			yyVAL.str = GreaterEqualStr
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1393
		{
			yyVAL.str = NotEqualStr
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1397
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 252:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1402
		{
			yyVAL.expr = nil
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1406
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1412
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1416
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1420
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1426
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1432
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1436
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1442
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1446
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1450
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1454
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1458
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1462
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1466
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1470
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1474
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1478
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1482
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1486
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1490
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1494
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1498
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1502
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1506
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1510
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1514
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1518
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1522
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1530
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1544
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1548
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1552
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent}
		}
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1570
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 290:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1574
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 291:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1578
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 292:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1588
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 293:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1592
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 294:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1596
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 295:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1600
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 296:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1604
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 297:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1608
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 298:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1612
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 299:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1616
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 300:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1620
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1630
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1634
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1638
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1642
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1647
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1652
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1657
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1662
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 311:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1676
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 312:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1680
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 313:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1684
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 314:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1688
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 315:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1694
		{
			yyVAL.str = ""
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1698
		{
			yyVAL.str = BooleanModeStr
		}
	case 317:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1702
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 318:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1706
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1710
		{
			yyVAL.str = QueryExpansionStr
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1716
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1720
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1726
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1730
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1734
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1738
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1742
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1746
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1752
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1756
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1760
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1764
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1768
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1772
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1776
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1781
		{
			yyVAL.expr = nil
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1785
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1790
		{
			yyVAL.str = string("")
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1794
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1800
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1804
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 341:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1810
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1815
		{
			yyVAL.expr = nil
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1819
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1825
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1829
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 346:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1833
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1839
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1843
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1847
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1851
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1855
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1859
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1863
		{
			yyVAL.expr = &NullVal{}
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1869
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1878
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1882
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 357:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1887
		{
			yyVAL.exprs = nil
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1891
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 359:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1896
		{
			yyVAL.expr = nil
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1900
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 361:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1905
		{
			yyVAL.orderBy = nil
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1909
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1915
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1919
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1925
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 366:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1930
		{
			yyVAL.str = AscScr
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1934
		{
			yyVAL.str = AscScr
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1938
		{
			yyVAL.str = DescScr
		}
	case 369:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1943
		{
			yyVAL.limit = nil
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1947
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 371:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1951
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 372:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1955
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 373:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1960
		{
			yyVAL.str = ""
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1964
		{
			yyVAL.str = ForUpdateStr
		}
	case 375:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1968
		{
			yyVAL.str = ShareModeStr
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1981
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1985
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1989
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 379:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1994
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 380:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1998
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 381:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2002
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2009
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2013
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2017
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 385:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2021
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 386:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2026
		{
			yyVAL.updateExprs = nil
		}
	case 387:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2030
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2036
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2040
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2046
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2050
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2056
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2062
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2072
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2076
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2082
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 399:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2091
		{
			yyVAL.byt = 0
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2093
		{
			yyVAL.byt = 1
		}
	case 401:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2096
		{
			yyVAL.empty = struct{}{}
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2098
		{
			yyVAL.empty = struct{}{}
		}
	case 403:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2101
		{
			yyVAL.str = ""
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2103
		{
			yyVAL.str = IgnoreStr
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2107
		{
			yyVAL.empty = struct{}{}
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2109
		{
			yyVAL.empty = struct{}{}
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2111
		{
			yyVAL.empty = struct{}{}
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2113
		{
			yyVAL.empty = struct{}{}
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2115
		{
			yyVAL.empty = struct{}{}
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2117
		{
			yyVAL.empty = struct{}{}
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2119
		{
			yyVAL.empty = struct{}{}
		}
	case 412:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2122
		{
			yyVAL.empty = struct{}{}
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2124
		{
			yyVAL.empty = struct{}{}
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2126
		{
			yyVAL.empty = struct{}{}
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2130
		{
			yyVAL.empty = struct{}{}
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2132
		{
			yyVAL.empty = struct{}{}
		}
	case 417:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2135
		{
			yyVAL.empty = struct{}{}
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2137
		{
			yyVAL.empty = struct{}{}
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2139
		{
			yyVAL.empty = struct{}{}
		}
	case 420:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2142
		{
			yyVAL.empty = struct{}{}
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2144
		{
			yyVAL.empty = struct{}{}
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2148
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2152
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2159
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2165
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2169
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2176
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2309
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2318
		{
			decNesting(yylex)
		}
	case 540:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2323
		{
			forceEOF(yylex)
		}
	case 541:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2328
		{
			forceEOF(yylex)
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2332
		{
			forceEOF(yylex)
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2336
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
